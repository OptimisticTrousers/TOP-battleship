(()=>{var e={653:(e,t,r)=>{const o=r(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1},t=Array(10).fill(structuredClone(e)).map((()=>Array(10).fill(structuredClone(e)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=(e,r)=>t?.[e]?.[r],i=(r,o,n=(()=>Object.assign(e,{offLimits:!0}))())=>(void 0===t?.[r]?.[o]||(t[r][o]=n),!0),a=(e,t)=>{i(e-1,t-1),i(e,t-1)},s=(e,r)=>e>=0&&e+r-1<t.length,l=(e,r)=>e>=0&&e+r-1<t.length,c=e=>!0===e.isShip||!0===e.offLimits,u=e=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal",r=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());return s(r,e)&&l(o,e)?{randomColumn:r,randomRow:o,randomDirection:t}:u(e)};return{checkIfOffLimitZoneWasCorrectlyImplemented:e=>t.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:n,receiveAttack:(e,r)=>{t[e][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>t.flat().every((e=>!1===e.isShip||!0===e.isShip&&!0===e.hasBeenHit&&e.getStatus().every((e=>"hit"===e)))),placeShip:(e,t,r,o)=>{const u=o.getLength();if("vertical"===r){if(l(t,u)){for(let r=0;r<u;r+=1){if(!1!==c(n(e,t+r)))return!1;i(e,t+r,o),i(e+1,t+r),i(e-1,t+r)}return((e,t,r)=>{a(e,t),i(e,t+r),i(e+1,t+r),i(e-1,t+r),i(e+1,t-1)})(e,t,u),!0}}else if("horizontal"===r&&s(e,u)){for(let r=0;r<u;r+=1){if(c(e+r))return!1;i(e+r,t,o),i(e+r,t+1),i(e+r,t-1)}return((e,t,r)=>{a(e,t),i(e+r,t),i(e-1,t+1),i(e+r,t+1),i(e+r,t-1)})(e,t,u),!0}return!1},randomlyPlaceShips:()=>{const e=[];for(let t=0;t<r.length;t+=1){const o=r[t],{randomColumn:n,randomRow:i,randomDirection:a}=u(o.getLength());e.push({randomColumn:n,randomRow:i,randomDirection:a})}return e},makeRandomCoordinates:u}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:r,receiveAttack:o})=>{const n=r(e,t);return!1===n.hasBeenHit||n.isShip&&n.getStatus().includes("unhit")?(o(e,t),"It's a hit!"):"You have already hit this spot!"}})},585:e=>{e.exports=(e,t="ship")=>{const r=Array(e).fill("unhit");return{name:t,getLength:()=>r.length,isSunk:()=>r.every((e=>"hit"===e)),hit:t=>{t<e&&(r[t]="hit")},getStatus:()=>r,hasBeenHit:!1,isShip:!0}}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=(e,t,r)=>{const o=document.querySelector(`.${e}-board > .cell[column='${t}'][row='${r}']`);o.classList.contains("ship")?o.classList.add("hit"):o.classList.add("miss")},t=(e,t,r,o)=>o.attack(e,t,r);var o=r(653),n=r.n(o),i=(r(585),r(61)),a=r.n(i);const s=n()(),l=n()(),c=a()(),u=a()();s.randomlyPlaceShips(),l.randomlyPlaceShips();const h=(()=>{const e={};return{publish:function(t,r){Array.isArray(e[t])&&e[t].forEach((e=>{e(r)}))},subscribe:function t(r,o){Array.isArray(t[r])||(e[r]=[]),e[r].push(o);const n=e[r].length-1;return{unsubscribe(){e[r].splice(n,1)}}}}})();((e,t,r,o,n)=>{const i=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let s=0;s<10;s+=1){const l=i.querySelector(`.cell:nth-child(${10*s+a+1})`);l.setAttribute("column",a),l.setAttribute("row",s),l.addEventListener("click",(()=>{n.publish("click",{cell:l,column:a,row:s,playerBoard:e,enemyBoard:t,player:r,enemy:o})}),{once:!0})}})(s,l,c,u,h),h.subscribe("click",(({cell:r,column:o,row:n,playerBoard:i,enemyBoard:a,player:s,enemy:l})=>{((r,o,n,i)=>{t(r,o,n,i),e("enemy",r,o)})(o,n,a,s),((r,o)=>{const{randomColumn:n,randomRow:i}=r.makeRandomCoordinates();t(n,n,r,o),e("player",n,i)})(i,l)})),(({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=t.querySelector(`.cell:nth-child(${10*o+r+1})`);n.setAttribute("column",r),n.setAttribute("row",o),e(o,r).isShip&&n.classList.add("ship")}})(s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,