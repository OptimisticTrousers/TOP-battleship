(()=>{var t={653:(t,e,o)=>{const r=o(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1};let e=!1;const o=()=>{const e=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1)e[o][r]={...t,column:o,row:r};return e};let a=o();const i=()=>{a=o()},n=(t,e)=>a?.[t]?.[e],l=(e,o,r=(()=>Object.assign(t,{offLimits:!0}))())=>{if(void 0===a?.[e]?.[o])return!0;const i=a[e][o];return a[e][o]={...i,...r},!0},c=(t,e)=>{l(t-1,e-1),l(t,e-1)},s=(t,e,o,r)=>{if("vertical"===o)for(let o=0;o<r;o+=1){const r=n(t,e+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}if("horizontal"===o)for(let o=0;o<r;o+=1){const r=n(t+o,e);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}return!1},d=(t,e,o,r)=>{if(a[t][e].isShip||a[t][e].offLimits)return!1;const i=r.getLength();if(s(n(t,e)))return!1;if("vertical"===o){if(((t,e)=>t>=0&&t+e-1<a.length)(e,i)){for(let o=0;o<i;o+=1)l(t,e+o,{...r,position:o}),l(t+1,e+o),l(t-1,e+o);return((t,e,o)=>{c(t,e),l(t,e+o),l(t+1,e+o),l(t-1,e+o),l(t+1,e-1)})(t,e,i),!0}}else if("horizontal"===o&&((t,e)=>t>=0&&t+e-1<a.length)(t,i)){for(let o=0;o<i;o+=1)l(t+o,e,{...r,position:o}),l(t+o,e+1),l(t+o,e-1);return((t,e,o)=>{c(t,e),l(t+o,e),l(t-1,e+1),l(t+o,e+1),l(t+o,e-1),l(t-1,e)})(t,e,i),!0}return!1},h=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal",e=Math.floor(100*Math.random()),o=(()=>{const t=[...a.flat()];return t.forEach((t=>{!0===t.hasBeenHit?t.availability=!1:t.availability=!0})),t})()[e];return!1===o.availability?h():{elementColumn:o.column,elementRow:o.row,randomDirection:t}},u=t=>{const e=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());let a=Math.round(Math.random());return(0!==a||(a="horizontal",!1!==d(e,o,a,r(t))))&&(1!==a||(a="vertical",!1!==d(e,o,a,r(t))))&&void 0};return{clearBoard:i,checkIfLocationIsAShipOrOffLimits:s,checkIfOffLimitZoneWasCorrectlyImplemented:t=>a.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,e)=>{a[t][e].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let t=!0;for(let e=0;e<10;e+=1)for(let o=0;o<10;o+=1){const r=n(e,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){t=!1;break}}return t},placeShip:d,randomlyPlaceShips:()=>{switch(i(),Math.floor(10*Math.random())){case 0:d(1,1,"horizontal",r(4)),d(1,4,"horizontal",r(4)),d(7,3,"horizontal",r(3)),d(2,7,"horizonal",r(3)),d(6,7,"horizontal",r(2)),d(5,9,"horizontal",r(2)),d(8,1,"vertical",r(1)),d(9,5,"vertical",r(1));break;case 1:d(0,1,"vertical",r(4)),d(8,1,"vertical",r(4)),d(3,1,"horizontal",r(3)),d(0,7,"vertical",r(3)),d(3,6,"horizontal",r(2)),d(8,7,"horizontal",r(2)),d(4,8,"vertical",r(1)),d(6,7,"vertical",r(1));break;case 2:d(0,1,"horizontal",r(4)),d(0,3,"horizontal",r(4)),d(9,1,"vertical",r(3)),d(2,8,"horizontal",r(3)),d(5,3,"vertical",r(2)),d(0,6,"vertical",r(2)),d(1,6,"vertical",r(1)),d(7,4,"vertical",r(1));break;case 3:d(0,0,"vertical",r(4)),d(9,0,"vertical",r(4)),d(0,5,"vertical",r(3)),d(3,1,"vertical",r(3)),d(5,1,"vertical",r(2)),d(7,1,"vertical",r(2)),d(4,7,"vertical",r(1)),d(8,7,"vertical",r(1));break;case 4:d(2,4,"horizontal",r(4)),d(0,6,"vertical",r(4)),d(2,7,"horizontal",r(3)),d(6,6,"horizontal",r(3)),d(7,1,"horizontal",r(2)),d(6,8,"horizontal",r(2)),d(2,1,"horizontal",r(1)),d(4,1,"horizontal",r(1));break;case 5:d(1,3,"horizontal",r(4)),d(6,2,"vertical",r(4)),d(0,6,"vertical",r(3)),d(8,2,"vertical",r(3)),d(0,0,"horizontal",r(2)),d(2,6,"horizontal",r(2)),d(9,6,"vertical",r(1)),d(5,9,"vertical",r(1));break;case 6:d(0,0,"vertical",r(4)),d(0,6,"vertical",r(4)),d(0,2,"horizontal",r(3)),d(6,1,"horizontal",r(3)),d(8,3,"horizontal",r(2)),d(9,5,"vertical",r(2)),d(9,8,"vertical",r(1)),d(7,9,"vertical",r(1));break;case 7:d(0,1,"vertical",r(4)),d(0,6,"vertical",r(4)),d(2,0,"horizontal",r(3)),d(6,0,"horizontal",r(3)),d(9,2,"vertical",r(2)),d(9,6,"vertical",r(2)),d(9,9,"vertical",r(1)),d(7,9,"vertical",r(1));break;case 8:d(2,0,"vertical",r(4)),d(7,1,"vertical",r(4)),d(2,5,"horizontal",r(3)),d(6,7,"vertical",r(3)),d(1,9,"horizontal",r(2)),d(2,7,"horizontal",r(2)),d(9,6,"vertical",r(1)),d(8,9,"vertical",r(1));break;case 9:d(0,0,"horizontal",r(4)),d(5,2,"vertical",r(1)),d(2,6,"vertical",r(1)),d(0,8,"horizontal",r(3)),d(4,5,"vertical",r(4)),d(7,4,"horizontal",r(2)),d(6,6,"horizontal",r(2)),d(7,8,"horizontal",r(3))}},makeRandomCoordinates:h,checkIfBoardHasBeenFullyPopulated:()=>{const t=a.flat();let e=0;return t.forEach((t=>{t.isShip&&(e+=1)})),20===e},randomFleet:()=>{for(let t=0;t<2;)!1!==u(1)&&(t+=1);for(let t=0;t<2;)!1!==u(2)&&(t+=1);for(let t=0;t<2;)!1!==u(3)&&(t+=1);for(let t=0;t<2;)!1!==u(4)&&(t+=1);e=!0},gameBoard:a,isStartAllowed:{get:()=>e,set(t){e=t}}}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:o,receiveAttack:r})=>{const a=o(t,e);return!1===a.hasBeenHit||a.isShip&&!1===a.getStatus().includes("unhit")?(r(t,e),a.hit?(a.hit(a.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:t=>{t.exports=(t,e="ship")=>{const o=Array(t).fill("unhit");return{getName:()=>e,getLength:()=>o.length,isSunk:()=>o.every((t=>"hit"===t)),hit:e=>{e<t&&(o[e]="hit")},getStatus:()=>o,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},e={};function o(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,o),i.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";let t,e=!1,r=!1,a=[],i=[],n=[],l=[];function c(e){return"left"===e?(t="left",[a[0],a[1]-1]):"right"===e?(t="right",[a[0],a[1]+1]):"down"===e?(t="down",[a[0]+1,a[1]]):"up"===e?(t="up",[a[0]-1,a[1]]):void 0}function s(t,o,l,c){e=t,void 0!==o&&(r=o),void 0!==l&&(a=[l,c]),0===i.length&&void 0!==l?i=[l,c]:0!==i.length&&0===n.length&&void 0!==l&&(n=[l,c])}function d(t,e){return l=[],0!==e&&l.push([t,e-1]),9!==e&&l.push([t,e+1]),0!==t&&l.push([t-1,e]),9!==t&&l.push([t+1,e]),l}function h(o,s,h,u,f,p){let v;if(!0===u&&(a=[],i=[],n=[],l=[],e=!1,r=!1,t=""),!r&&!e)return v=s.randomPos(),S(s,h,v[0],v[1],f,p);if(0!==n.length&&e&&!o){let t;if(i[0]===n[0]-1&&(t=c("down")),i[0]===n[0]+1&&(t=c("up")),i[1]===n[1]-1&&(t=c("right")),i[1]===n[1]+1&&(t=c("left")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return S(s,h,t[0],t[1],f,p)}else if(0!==n.length&&r&&!e){let e;if(a=i,n=[],"up"===t&&(e=c("down")),"down"===t&&(e=c("up")),"right"===t&&(e=c("left")),"left"===t&&(e=c("right")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return S(s,h,e[0],e[1],f,p)}else if(r){0===l.length&&d(a[0],a[1]),0===l.length&&!0===r&&d(i[0],i[1]);const t=l.pop();return S(s,h,t[0],t[1],f,p)}}var u=o(585),f=o.n(u);let p=0;function v(t,e){let o=2;const r=document.querySelector(t),a=document.querySelector("body"),i=document.querySelectorAll(".player-board > .cell"),n=r.childNodes;let l,c,s="horizontal";n[0]&&n[0].addEventListener("mouseenter",(()=>c=0)),n[1]&&n[1].addEventListener("mouseenter",(()=>c=-1)),n[2]&&n[2].addEventListener("mouseenter",(()=>c=-2)),n[3]&&n[3].addEventListener("mouseenter",(()=>c=-3)),r.addEventListener("click",(t=>function(t){"horizontal"===s?(s="vertical",t.target.parentNode.classList.toggle("rotated")):(s="horizontal",t.target.parentNode.classList.toggle("rotated"))}(t))),r.addEventListener("dragstart",(()=>{for(let t=0;t<10;t+=1)e.gameBoard[t].forEach((t=>{(t.offLimits||t.isShip)&&document.querySelector(`.player-board > .cell[column='${t.column}'][row='${t.row}']`).classList.toggle("not-available")}))})),r.addEventListener("dragend",(()=>{if(document.querySelectorAll(".not-available").forEach((t=>t.classList.remove("not-available"))),-1===l)return;let a,i,n=`${l}`;l<10?(a=0,i=l):(n=n.split(""),a=1*n[0],i=1*n[1]),"horizontal"===s&&(i+=c),"vertical"===s&&(a+=c),i<0||".ship-1"===t&&!1===e.placeShip(i,a,s,f()(1))||".ship-2"===t&&!1===e.placeShip(i,a,s,f()(2))||".ship-3"===t&&!1===e.placeShip(i,a,s,f()(3))||".ship-4"===t&&!1===e.placeShip(i,a,s,f()(4))||(g(e),o-=1,p+=1,8===p&&e.isStartAllowed.set(!0),r.parentNode.firstChild.textContent=`${o}x`,0===o&&(r.parentNode.style.display="none"),!e.checkIfBoardHasBeenFullyPopulated())||(document.querySelector("body > main > div.player > div:nth-child(4)").style.display="none",document.querySelector(".randomize").style.display="none",e.isStartAllowed.set(!0))})),i.forEach(((t,e)=>{t.addEventListener("dragover",(t=>{t.preventDefault(),l=e}))})),a.addEventListener("dragenter",(()=>{l=-1}))}function m(t){return new Promise((e=>{setTimeout((()=>{e(2)}),t)}))}const y=(t,e)=>{if(t.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",o.addEventListener("click",(()=>{location.reload()})),e.textContent="You lose!"}if(e.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",e.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}};async function S(t,e,o,r,a,i){let n=!1;const l=document.querySelector(`.player-board > .cell[column='${o}'][row='${r}']`),c=e.attack(o,r,a);if("You have already hit this spot!"===c&&h(!0,t,e,void 0,a,i),"It's a hit!"===c&&(s(!1),l.classList.add("miss")),"You hit a ship!"===c)return s(!0,!0,o,r),l.classList.add("hit"),a.getLocation(o,r).domTargets.push(l),a.getLocation(o,r).isSunk()&&(a.getLocation(o,r).domTargets.forEach((t=>t.classList.add("sunk"))),n=!0,!0===a.checkIfAllShipsHaveSunk())?y(a,i):(await m(1e3),h(!1,t,e,n,a,i))}const g=({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const a=e.querySelector(`.cell:nth-child(${10*r+o+1})`);a.setAttribute("column",o),a.setAttribute("row",r);const i=t(o,r);i.isShip&&(a.classList.add("ship"),a.setAttribute("ship-name",i.getName()))}};var L=o(653),b=o.n(L),k=o(61),z=o.n(k);const A=b()(),w=b()(),E=z()(),q=z()();!function(t){document.querySelector("button.randomize").addEventListener("click",(()=>{document.querySelector(".player > div:nth-child(4)").style.display="none",t.randomlyPlaceShips(),t.isStartAllowed.set(!0),g(t)})),document.querySelector("button.reset").addEventListener("click",(()=>{location.reload()}))}(A),function(t){function e(t,e){const o=document.querySelector("body > main > div.player > div:nth-child(4)"),r=document.createElement("div");r.classList.add("ship-container"),o.appendChild(r);const a=document.createElement("span");a.classList.add(`info-${t}`),a.textContent="2x",r.appendChild(a);const i=document.createElement("div");i.classList.add("ship"),i.classList.add(`ship-${t}`),i.setAttribute("draggable","true"),r.appendChild(i);for(let t=0;t<e;t+=1){const t=document.createElement("div");t.classList.add("cell"),i.appendChild(t)}}e(1,1),e(2,2),e(3,3),e(4,4);for(let e=1;e<5;e+=1)v(`.ship-${e}`,t)}(A),w.randomlyPlaceShips();const M=(()=>{const t={};return{publish:function(e,o){Array.isArray(t[e])&&t[e].forEach((t=>{t(o)}))},subscribe:function e(o,r){Array.isArray(e[o])||(t[o]=[]),t[o].push(r);const a=t[o].length-1;return{unsubscribe(){t[o].splice(a,1)}}}}})();((t,e,o,r,a)=>{const i=document.querySelector("div.enemy-board");for(let n=0;n<10;n+=1)for(let l=0;l<10;l+=1){const c=i.querySelector(`.cell:nth-child(${10*l+n+1})`);c.setAttribute("column",n),c.setAttribute("row",l),c.addEventListener("click",(()=>{!1!==t.isStartAllowed.get()&&a.publish("click",{column:n,row:l,playerBoard:t,enemyBoard:e,player:o,enemy:r})}),{once:!0})}})(A,w,E,q,M),M.subscribe("click",(({column:t,row:e,playerBoard:o,enemyBoard:r,player:a,enemy:i})=>{(async(t,e,o,r,a,i)=>{((t,e,o,r)=>{r.attack(t,e,o)})(t,e,o,a),((t,e,o,r)=>{const a=document.querySelector(`.enemy-board > .cell[column='${e}'][row='${o}']`);r.getLocation(e,o)?.isShip&&(r.getLocation(e,o).domTargets.push(a),r.getLocation(e,o).isSunk()&&r.getLocation(e,o).domTargets.forEach((t=>t.classList.add("sunk")))),r.getLocation(e,o).isShip?a.classList.add("hit"):a.classList.add("miss")})(0,t,e,o),await m(700),o.checkIfAllShipsHaveSunk()?y(r,o):h(!1,a,i,void 0,r,o)})(t,e,r,o,a,i)})),g(A)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,