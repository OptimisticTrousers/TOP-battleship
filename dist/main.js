(()=>{var t={653:(t,e,r)=>{const o=r(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=(t,r)=>e?.[t]?.[r],i=(r,o,n=(()=>Object.assign(t,{offLimits:!0}))())=>{e?.[r]?.[o]&&(e[r][o]=n)},a=(t,e)=>{i(t-1,e-1),i(t-1,e),i(t,e-1)},l=(t,e,r,o)=>{const n=o.getLength();if("vertical"===r){if(e+n<=10){for(let r=0;r<n;r+=1)i(t,e+r,o),i(t+1,e+r),i(t-1,e+r);return((t,e,r)=>{a(t,e),i(t,e+r),i(t+1,e+r),i(t-1,e+r),i(t+1,e-1)})(t,e,n),!0}}else if("horizontal"===r&&t+n<=10){for(let r=0;r<n;r+=1)i(t+r,e,o),i(t+r,e+1),i(t+r,e-1);return((t,e,r)=>{a(t,e),i(t+r,e),i(t-1,e+1),i(t+r,e+1),i(t+r,e-1)})(t,e,n),!0}return!1},s=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:l,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:i,randomDirection:a}=s(),c=r[e],h=n(o,i);!0===h.isShip||!0===h.offLimits||!1===l(o,i,a,c)?e-=1:t.push({randomColumn:o,randomRow:i,randomDirection:a})}return t}}}},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,isShip:!0}}}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=t=>{console.log("hiiii this works")};(()=>{const e=document.querySelector("div.enemy-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1)e.querySelector(`.cell:nth-child(${10*o+r+1})`).addEventListener("click",t)})();var e=r(653);const o=r.n(e)()();o.randomlyPlaceShips(),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=e.querySelector(`.cell:nth-child(${10*o+r+1})`);t(o,r).isShip&&n.classList.add("ship")}})(o)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,