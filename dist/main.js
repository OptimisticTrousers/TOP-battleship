(()=>{var t={653:(t,e,r)=>{const o=r(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],a=(t,r)=>e?.[t]?.[r],n=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal",e=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());return a(e,r),{randomColumn:e,randomRow:r,randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:a,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:e,randomRow:r,randomDirection:o}=n();a(e,r),t.push({randomColumn:e,randomRow:r,randomDirection:o})}return t},makeRandomCoordinates:n}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:r,receiveAttack:o})=>{const a=r(t,e);return!1===a.hasBeenHit||a.isShip&&a.getStatus().includes("unhit")?(o(t,e),"It's a hit!"):"You have already hit this spot!"}})},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,hasBeenHit:!1,isShip:!0}}}},e={};function r(o){var a=e[o];if(void 0!==a)return a.exports;var n=e[o]={exports:{}};return t[o](n,n.exports,r),n.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,r,o)=>o.attack(t,e,r),e=(r,o,a)=>{const{randomColumn:n,randomRow:i}=o.makeRandomCoordinates();return"You have already hit this spot!"===t(n,i,o,a)?e(r,o,a):{randomColumn:n,randomRow:i}};var o=r(653),a=r.n(o),n=r(585),i=r.n(n),s=r(61),l=r.n(s);const c=a()(),h=a()(),u=l()(),d=l()();c.randomlyPlaceShips(),h.placeShip(0,0,"horizontal",i()(5)),h.placeShip(3,4,"horizontal",i()(3)),h.placeShip(6,7,"horizontal",i()(2)),h.placeShip(9,1,"vertical",i()(3)),h.placeShip(5,9,"horizontal",i()(4));const m=(()=>{const t={};return{publish:function(e,r){Array.isArray(t[e])&&t[e].forEach((t=>{t(r)}))},subscribe:function e(r,o){Array.isArray(e[r])||(t[r]=[]),t[r].push(o);const a=t[r].length-1;return{unsubscribe(){t[r].splice(a,1)}}}}})();((t,e,r,o,a)=>{const n=document.querySelector("div.enemy-board");for(let i=0;i<10;i+=1)for(let s=0;s<10;s+=1){const l=n.querySelector(`.cell:nth-child(${10*s+i+1})`);l.setAttribute("column",i),l.setAttribute("row",s),l.addEventListener("click",(()=>{a.publish("click",{cell:l,column:i,row:s,playerBoard:t,enemyBoard:e,player:r,enemy:o})}),{once:!0})}})(c,h,u,d,m),m.subscribe("click",(({cell:r,column:o,row:a,playerBoard:n,enemyBoard:i,player:s,enemy:l})=>{((e,r,o,a,n)=>{a.getLocation(r,o).isShip?e.classList.add("hit"):e.classList.add("miss"),t(r,o,a,n)})(r,o,a,i,s);const{randomColumn:c,randomRow:h}=e(r,n,l);((t,e)=>{const r=document.querySelector(`.cell[column='${t}'][row='${e}']`);r.classList.contains("ship")?r.classList.add("hit"):r.classList.add("miss")})(c,h)})),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const a=e.querySelector(`.cell:nth-child(${10*o+r+1})`);a.setAttribute("column",r),a.setAttribute("row",o),t(o,r).isShip&&a.classList.add("ship")}})(c)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,