(()=>{var e={653:(e,t,r)=>{const o=r(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1},t=Array(10).fill(structuredClone(e)).map((()=>Array(10).fill(structuredClone(e)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=(r,o,n=(()=>Object.assign(e,{offLimits:!0}))())=>(void 0===t?.[r]?.[o]||(t[r][o]=n),!0),i=e=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:e=>t.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:(e,r)=>t?.[e]?.[r],receiveAttack:(e,r)=>{t[e][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>t.flat().every((e=>!1===e.isShip||!0===e.isShip&&!0===e.hasBeenHit&&e.getStatus().every((e=>"hit"===e)))),placeShip:(e,r,o,i)=>{if(((e,r,o,n)=>{if(r<0||r>9||o<0||o>9)return!1;const i=e.getLength(0);if("vertical"===n){if(r+i>10)return!1}else if(o+i>10)return!1;if("vertical"===n){for(let n=0;n<e.length;n++)if(t[r+n][o])return!1}else for(let n=0;n<e.length;n++)if(t[r][o+n])return!1;if("vertical"===n){for(let n=0;n<e.length;n++)for(let e=-1;e<=1;e++)for(let i=-1;i<=1;i++)if(!(r+e+n<0||r+e+n>=10||o+i<0||o+i>=10)&&t[r+e+n][o+i])return!1}else for(let n=0;n<e.length;n++)for(let e=-1;e<=1;e++)for(let i=-1;i<=1;i++)if(!(r+e<0||r+e>=10||o+i+n<0||o+i+n>=10)&&t[r+e][o+i+n])return!1;return!0})(i,r,e,o))return!1;const a=i.getLength();if("vertical"===o)for(let t=0;t<a;t+=1)n(e,r+t,i);else if("horizontal"===o){for(let t=0;t<a;t+=1)n(e+t,r,i);return!0}return!1},randomlyPlaceShips:()=>{const e=[];for(let t=0;t<r.length;t+=1){const o=r[t],{randomColumn:n,randomRow:a,randomDirection:l}=i(o.getLength());e.push({randomColumn:n,randomRow:a,randomDirection:l})}return e},makeRandomCoordinates:i}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:r,receiveAttack:o})=>{const n=r(e,t);return!1===n.hasBeenHit||n.isShip&&n.getStatus().includes("unhit")?(o(e,t),"It's a hit!"):"You have already hit this spot!"}})},585:e=>{e.exports=(e,t="ship")=>{const r=Array(e).fill("unhit");return{name:t,getLength:()=>r.length,isSunk:()=>r.every((e=>"hit"===e)),hit:t=>{t<e&&(r[t]="hit")},getStatus:()=>r,hasBeenHit:!1,isShip:!0}}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=(e,t,r)=>{const o=document.querySelector(`.${e}-board > .cell[column='${t}'][row='${r}']`);o.classList.contains("ship")?o.classList.add("hit"):o.classList.add("miss")},t=(e,t,r,o)=>o.attack(e,t,r);var o=r(653),n=r.n(o),i=r(585),a=r.n(i),l=r(61),c=r.n(l);const s=n()(),h=n()(),u=c()(),p=c()();s.placeShip(0,0,"horizontal",a()(5)),s.placeShip(3,4,"horizontal",a()(3)),s.placeShip(6,7,"horizontal",a()(2)),s.placeShip(9,1,"vertical",a()(3)),s.placeShip(5,9,"horizontal",a()(4)),h.placeShip(0,0,"horizontal",a()(5)),h.placeShip(3,4,"horizontal",a()(3)),h.placeShip(6,7,"horizontal",a()(2)),h.placeShip(9,1,"vertical",a()(3)),h.placeShip(5,9,"horizontal",a()(4));const f=(()=>{const e={};return{publish:function(t,r){Array.isArray(e[t])&&e[t].forEach((e=>{e(r)}))},subscribe:function t(r,o){Array.isArray(t[r])||(e[r]=[]),e[r].push(o);const n=e[r].length-1;return{unsubscribe(){e[r].splice(n,1)}}}}})();((e,t,r,o,n)=>{const i=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let l=0;l<10;l+=1){const c=i.querySelector(`.cell:nth-child(${10*l+a+1})`);c.setAttribute("column",a),c.setAttribute("row",l),c.addEventListener("click",(()=>{n.publish("click",{cell:c,column:a,row:l,playerBoard:e,enemyBoard:t,player:r,enemy:o})}),{once:!0})}})(s,h,u,p,f),f.subscribe("click",(({cell:r,column:o,row:n,playerBoard:i,enemyBoard:a,player:l,enemy:c})=>{((r,o,n,i)=>{t(r,o,n,i),e("enemy",r,o)})(o,n,a,l),((r,o)=>{const{randomColumn:n,randomRow:i}=r.makeRandomCoordinates();t(n,n,r,o),e("player",n,i)})(i,c)})),(({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=t.querySelector(`.cell:nth-child(${10*o+r+1})`);n.setAttribute("column",r),n.setAttribute("row",o),e(o,r).isShip&&n.classList.add("ship")}})(s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,