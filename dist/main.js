(()=>{var t={653:(t,e,r)=>{const o=r(585),n=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=(t,r)=>e?.[t]?.[r],i=(r,o,n=(()=>Object.assign(t,{offLimits:!0}))())=>{e[r][o]=n},a=(t,e,r,o)=>{const a=o.getLength();if("vertical"===r){if(e+a<=10){for(let r=0;r<a;r+=1)i(t,e+r,o);return((t,e,r)=>{const o=[t+r,e],a=n(o[0],o[1]);a&&i(o[0],o[1],a)})(t,e,a),!0}}else if("horizontal"===r&&t+a<=10){for(let r=0;r<a;r+=1)i(t+r,e,o);return((t,e,r)=>{const o=[t+r,e],a=n(o[0],o[1]);a&&i(o[0],o[1],a),((t,e,r)=>{const o=[t,e-1],a=n(o[0],o[1]),s=[t-1,e],l=n(s[0],s[1]),c=[t+1,e-1],h=n(c[0],c[1]),d=[t-1,e-1],p=n(d[0],d[1]),u=[t+1,e+r],f=n(u[0],u[1]),m=[t-1,e+r],v=n(m[0],m[1]);a&&i(o[0],o[1],a),l&&i(s[0],s[1],l),h&&i(c[0],c[1],h),p&&i(d[0],d[1],p),f&&i(u[0],u[1],f),v&&i(m[0],m[1],v)})(t,e,r)})(t,e,a),!0}return!1},s=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{getLocation:n,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:a,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:i,randomDirection:l}=s(),c=r[e],h=n(o,i);!0===h.isShip||!0===h.offLimits||!1===a(o,i,l,c)?e-=1:t.push({randomColumn:o,randomRow:i,randomDirection:l})}return t}}};n().placeShip(0,0,"vertical",o(3,"bobs ship")),t.exports=n},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,isShip:!0}}}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(653);const e=r.n(t)()();e.randomlyPlaceShips(),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=document.createElement("div");n.classList.add("cell"),t(o,r).isShip&&n.classList.add("ship"),e.appendChild(n)}})(e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsQ0FDNUIsTUFBTXpDLEVBQU91QyxTQUFTRyxjQUFjLE9BQ3BDMUMsRUFBSzJDLFVBQVVDLElBQUksUUFDZnZGLEVBQVlvRixFQUFHeEUsR0FBR3BCLFFBQ2xCbUQsRUFBSzJDLFVBQVVDLElBQUksUUFFdkJOLEVBQWdCTyxZQUFZN0MsS0RKeEMsQ0FBa0JxQyxJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZWJvYXJkL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9zaGlwL3NoaXAuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuY29uc3QgY3JlYXRlU2hpcCA9IHJlcXVpcmUoJy4uL3NoaXAvc2hpcCcpXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5jb25zdCBjcmVhdGVHYW1lQm9hcmQgPSAoKSA9PiB7XG4gICAgY29uc3QgZW1wdHlDZWxsID0geyBoYXNCZWVuSGl0OiBmYWxzZSwgaXNTaGlwOiBmYWxzZSwgb2ZmTGltaXRzOiBmYWxzZSB9XG4gICAgY29uc3QgZ2FtZUJvYXJkID0gQXJyYXkoMTApXG4gICAgICAgIC5maWxsKHN0cnVjdHVyZWRDbG9uZShlbXB0eUNlbGwpKVxuICAgICAgICAubWFwKCgpID0+IEFycmF5KDEwKS5maWxsKHN0cnVjdHVyZWRDbG9uZShlbXB0eUNlbGwpKSlcblxuICAgIGNvbnN0IHNoaXBzID0gW1xuICAgICAgICBjcmVhdGVTaGlwKDUsICdDYXJyaWVyJyksXG4gICAgICAgIGNyZWF0ZVNoaXAoNCwgJ0JhdHRsZXNoaXAnKSxcbiAgICAgICAgY3JlYXRlU2hpcCgzLCAnRGVzdHJveWVyJyksXG4gICAgICAgIGNyZWF0ZVNoaXAoMywgJ1N1Ym1hcmluZScpLFxuICAgICAgICBjcmVhdGVTaGlwKDIsICdQYXRyb2wgQm9hdCcpLFxuICAgIF1cblxuICAgIGNvbnN0IGNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rID0gKCkgPT5cbiAgICAgICAgZ2FtZUJvYXJkLmZsYXQoKS5ldmVyeShcbiAgICAgICAgICAgIChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuaXNTaGlwID09PSBmYWxzZSkgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5pc1NoaXAgPT09IHRydWUgJiYgY2VsbC5oYXNCZWVuSGl0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxsLmdldFN0YXR1cygpLmV2ZXJ5KCh1bml0KSA9PiB1bml0ID09PSAnaGl0JylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIChwb3NpdGlvbi5pc1NoaXAgPT09IGZhbHNlKSB8fFxuICAgICAgICAgICAgLy8gKHBvc2l0aW9uLmlzU2hpcCA9PT0gdHJ1ZSAmJiBwb3NpdGlvbi5oYXNCZWVuSGl0ID09PSB0cnVlKVxuICAgICAgICApXG5cbiAgICBjb25zdCBjcmVhdGVPZmZMaW1pdExvY2F0aW9uID0gKCkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbXB0eUNlbGwsIHsgb2ZmTGltaXRzOiB0cnVlIH0pXG5cbiAgICBjb25zdCBnZXRMb2NhdGlvbiA9IChjb2x1bW4sIHJvdykgPT4gZ2FtZUJvYXJkPy5bY29sdW1uXT8uW3Jvd11cblxuICAgIGNvbnN0IHNldExvY2F0aW9uID0gKGNvbHVtbiwgcm93LCBzaGlwID0gY3JlYXRlT2ZmTGltaXRMb2NhdGlvbigpKSA9PiB7XG4gICAgICAgIGdhbWVCb2FyZFtjb2x1bW5dW3Jvd10gPSBzaGlwXG4gICAgfVxuXG4gICAgY29uc3QgYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMgPSAoY29sdW1uLCByb3csIHNoaXBMZW5ndGgpID0+IHtcbiAgICAgICAgY29uc3QgdG9wID0gW2NvbHVtbiwgcm93IC0gMV1cbiAgICAgICAgY29uc3QgdG9wRWxlbWVudCA9IGdldExvY2F0aW9uKHRvcFswXSwgdG9wWzFdKVxuICAgICAgICBjb25zdCBsZWZ0ID0gW2NvbHVtbiAtIDEsIHJvd11cbiAgICAgICAgY29uc3QgbGVmdEVsZW1lbnQgPSBnZXRMb2NhdGlvbihsZWZ0WzBdLCBsZWZ0WzFdKVxuICAgICAgICBjb25zdCB0b3BSaWdodCA9IFtjb2x1bW4gKyAxLCByb3cgLSAxXVxuICAgICAgICBjb25zdCB0b3BSaWdodEVsZW1lbnQgPSBnZXRMb2NhdGlvbih0b3BSaWdodFswXSwgdG9wUmlnaHRbMV0pXG4gICAgICAgIGNvbnN0IHRvcExlZnQgPSBbY29sdW1uIC0gMSwgcm93IC0gMV1cbiAgICAgICAgY29uc3QgdG9wTGVmdEVsZW1lbnQgPSBnZXRMb2NhdGlvbih0b3BMZWZ0WzBdLCB0b3BMZWZ0WzFdKVxuICAgICAgICBjb25zdCBib3R0b21SaWdodCA9IFtjb2x1bW4gKyAxLCByb3cgKyBzaGlwTGVuZ3RoXVxuICAgICAgICBjb25zdCBib3R0b21SaWdodEVsZW1lbnQgPSBnZXRMb2NhdGlvbihib3R0b21SaWdodFswXSwgYm90dG9tUmlnaHRbMV0pXG4gICAgICAgIGNvbnN0IGxlZnRSaWdodCA9IFtjb2x1bW4gLSAxLCByb3cgKyBzaGlwTGVuZ3RoXVxuICAgICAgICBjb25zdCBsZWZ0UmlnaHRFbGVtZW50ID0gZ2V0TG9jYXRpb24obGVmdFJpZ2h0WzBdLCBsZWZ0UmlnaHRbMV0pXG5cbiAgICAgICAgaWYgKHRvcEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHNldExvY2F0aW9uKHRvcFswXSwgdG9wWzFdLCB0b3BFbGVtZW50KVxuICAgICAgICB9XG4gICAgICAgIGlmIChsZWZ0RWxlbWVudCkge1xuICAgICAgICAgICAgc2V0TG9jYXRpb24obGVmdFswXSwgbGVmdFsxXSwgbGVmdEVsZW1lbnQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvcFJpZ2h0RWxlbWVudCkge1xuICAgICAgICAgICAgc2V0TG9jYXRpb24odG9wUmlnaHRbMF0sIHRvcFJpZ2h0WzFdLCB0b3BSaWdodEVsZW1lbnQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvcExlZnRFbGVtZW50KSB7XG4gICAgICAgICAgICBzZXRMb2NhdGlvbih0b3BMZWZ0WzBdLCB0b3BMZWZ0WzFdLCB0b3BMZWZ0RWxlbWVudClcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm90dG9tUmlnaHRFbGVtZW50KSB7XG4gICAgICAgICAgICBzZXRMb2NhdGlvbihib3R0b21SaWdodFswXSwgYm90dG9tUmlnaHRbMV0sIGJvdHRvbVJpZ2h0RWxlbWVudClcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVmdFJpZ2h0RWxlbWVudCkge1xuICAgICAgICAgICAgc2V0TG9jYXRpb24obGVmdFJpZ2h0WzBdLCBsZWZ0UmlnaHRbMV0sIGxlZnRSaWdodEVsZW1lbnQpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhZGRPZmZMaW1pdEFyZWFGb3JIb3Jpem9udGFsbHlQb3NpdGlvbmVkU2hpcCA9IChcbiAgICAgICAgY29sdW1uLFxuICAgICAgICByb3csXG4gICAgICAgIHNoaXBMZW5ndGhcbiAgICApID0+IHtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBbY29sdW1uICsgc2hpcExlbmd0aCwgcm93XVxuICAgICAgICBjb25zdCByaWdodEVsZW1lbnQgPSBnZXRMb2NhdGlvbihyaWdodFswXSwgcmlnaHRbMV0pXG5cbiAgICAgICAgaWYgKHJpZ2h0RWxlbWVudCkge1xuICAgICAgICAgICAgc2V0TG9jYXRpb24ocmlnaHRbMF0sIHJpZ2h0WzFdLCByaWdodEVsZW1lbnQpXG4gICAgICAgIH1cbiAgICAgICAgYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMoY29sdW1uLCByb3csIHNoaXBMZW5ndGgpXG4gICAgfVxuXG4gICAgY29uc3QgYWRkT2ZmTGltaXRBcmVhRm9yVmVydGljYWxseVBvc2l0aW9uZWRTaGlwID0gKFxuICAgICAgICBjb2x1bW4sXG4gICAgICAgIHJvdyxcbiAgICAgICAgc2hpcExlbmd0aFxuICAgICkgPT4ge1xuICAgICAgICBjb25zdCBib3R0b20gPSBbY29sdW1uICsgc2hpcExlbmd0aCwgcm93XVxuICAgICAgICBjb25zdCBib3R0b21FbGVtZW50ID0gZ2V0TG9jYXRpb24oYm90dG9tWzBdLCBib3R0b21bMV0pXG5cbiAgICAgICAgaWYoYm90dG9tRWxlbWVudCl7XG4gICAgICAgICAgICBzZXRMb2NhdGlvbihib3R0b21bMF0sIGJvdHRvbVsxXSwgYm90dG9tRWxlbWVudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChjb2x1bW4sIHJvdywgZGlyZWN0aW9uLCBzaGlwKSA9PiB7XG4gICAgICAgIGNvbnN0IHNoaXBMZW5ndGggPSBzaGlwLmdldExlbmd0aCgpXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIGlmIChyb3cgKyBzaGlwTGVuZ3RoIDw9IDEwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uLCByb3cgKyBpLCBzaGlwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JWZXJ0aWNhbGx5UG9zaXRpb25lZFNoaXAoXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICBzaGlwTGVuZ3RoXG4gICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgaWYgKGNvbHVtbiArIHNoaXBMZW5ndGggPD0gMTApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBpLCByb3csIHNoaXApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZE9mZkxpbWl0QXJlYUZvckhvcml6b250YWxseVBvc2l0aW9uZWRTaGlwKFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICAgICAgc2hpcExlbmd0aFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IG1ha2VSYW5kb21Db29yZGluYXRlcyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcmFuZG9tRGlyZWN0aW9uID1cbiAgICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpID09PSAwID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJ1xuICAgICAgICBjb25zdCByYW5kb21Db2x1bW4gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgICAgY29uc3QgcmFuZG9tUm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgIHJldHVybiB7IHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93LCByYW5kb21EaXJlY3Rpb24gfVxuICAgIH1cblxuICAgIGNvbnN0IHJhbmRvbWx5UGxhY2VTaGlwcyA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2hpcERldGFpbHMgPSBbXVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93LCByYW5kb21EaXJlY3Rpb24gfSA9XG4gICAgICAgICAgICAgICAgbWFrZVJhbmRvbUNvb3JkaW5hdGVzKClcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBzaGlwc1tpXVxuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnZXRMb2NhdGlvbihyYW5kb21Db2x1bW4sIHJhbmRvbVJvdylcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5pc1NoaXAgPT09IHRydWUgfHxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5vZmZMaW1pdHMgPT09IHRydWUgfHxcbiAgICAgICAgICAgICAgICBwbGFjZVNoaXAocmFuZG9tQ29sdW1uLCByYW5kb21Sb3csIHJhbmRvbURpcmVjdGlvbiwgc2hpcCkgPT09XG4gICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpIC09IDFcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hpcERldGFpbHMucHVzaCh7IHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93LCByYW5kb21EaXJlY3Rpb24gfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2hpcERldGFpbHNcbiAgICB9XG5cbiAgICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGNvbHVtbiwgcm93KSA9PiB7XG4gICAgICAgIGdhbWVCb2FyZFtjb2x1bW5dW3Jvd10uaGFzQmVlbkhpdCA9IHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRMb2NhdGlvbixcbiAgICAgICAgcmVjZWl2ZUF0dGFjayxcbiAgICAgICAgY2hlY2tJZkFsbFNoaXBzSGF2ZVN1bmssXG4gICAgICAgIHBsYWNlU2hpcCxcbiAgICAgICAgcmFuZG9tbHlQbGFjZVNoaXBzLFxuICAgIH1cbn1cblxuY29uc3QgYm9iID0gY3JlYXRlR2FtZUJvYXJkKClcbmJvYi5wbGFjZVNoaXAoMCwgMCwgJ3ZlcnRpY2FsJywgY3JlYXRlU2hpcCgzLCAnYm9icyBzaGlwJykpXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlR2FtZUJvYXJkXG4iLCJjb25zdCBjcmVhdGVTaGlwID0gKGxlbmd0aCwgbmFtZSA9ICdzaGlwJykgPT4ge1xuXG4gICAgY29uc3Qgc3RhdHVzID0gQXJyYXkobGVuZ3RoKS5maWxsKCd1bmhpdCcpXG5cbiAgICBjb25zdCBnZXRMZW5ndGggPSAoKSA9PiBzdGF0dXMubGVuZ3RoXG5cbiAgICBjb25zdCBnZXRTdGF0dXMgPSAoKSA9PiBzdGF0dXNcblxuICAgIGNvbnN0IGhpdCA9IChwb3NpdGlvbikgPT4ge1xuICAgICAgICBpZiAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHN0YXR1c1twb3NpdGlvbl0gPSAnaGl0J1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaXNTdW5rID0gKCkgPT4gc3RhdHVzLmV2ZXJ5KChwb3NpdGlvbikgPT4gcG9zaXRpb24gPT09ICdoaXQnKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZ2V0TGVuZ3RoLFxuICAgICAgICBpc1N1bmssXG4gICAgICAgIGhpdCxcbiAgICAgICAgZ2V0U3RhdHVzLFxuICAgICAgICBpc1NoaXA6IHRydWUsXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVNoaXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgcmVuZGVyUGxheWVyQm9hcmQgZnJvbSAnLi9kb20nXG5pbXBvcnQgY3JlYXRlR2FtZUJvYXJkIGZyb20gJy4vZ2FtZWJvYXJkL2dhbWVib2FyZCdcblxuY29uc3QgcGxheWVyQm9hcmQgPSBjcmVhdGVHYW1lQm9hcmQoKVxucGxheWVyQm9hcmQucmFuZG9tbHlQbGFjZVNoaXBzKClcblxucmVuZGVyUGxheWVyQm9hcmQocGxheWVyQm9hcmQpXG4iLCJjb25zdCByZW5kZXJQbGF5ZXJCb2FyZCA9ICh7IGdldExvY2F0aW9uIH0pID0+IHtcbiAgICBjb25zdCBwbGF5ZXJCb2FyZEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYucGxheWVyLWJvYXJkJylcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdjZWxsJylcbiAgICAgICAgICAgIGlmIChnZXRMb2NhdGlvbihqLCBpKS5pc1NoaXApIHtcbiAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGxheWVyQm9hcmRBcmVhLmFwcGVuZENoaWxkKGNlbGwpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlclBsYXllckJvYXJkXG4iXSwibmFtZXMiOlsiY3JlYXRlU2hpcCIsImNyZWF0ZUdhbWVCb2FyZCIsImVtcHR5Q2VsbCIsImhhc0JlZW5IaXQiLCJpc1NoaXAiLCJvZmZMaW1pdHMiLCJnYW1lQm9hcmQiLCJBcnJheSIsImZpbGwiLCJzdHJ1Y3R1cmVkQ2xvbmUiLCJtYXAiLCJzaGlwcyIsImdldExvY2F0aW9uIiwiY29sdW1uIiwicm93Iiwic2V0TG9jYXRpb24iLCJzaGlwIiwiT2JqZWN0IiwiYXNzaWduIiwiY3JlYXRlT2ZmTGltaXRMb2NhdGlvbiIsInBsYWNlU2hpcCIsImRpcmVjdGlvbiIsInNoaXBMZW5ndGgiLCJnZXRMZW5ndGgiLCJpIiwiYm90dG9tIiwiYm90dG9tRWxlbWVudCIsImFkZE9mZkxpbWl0QXJlYUZvclZlcnRpY2FsbHlQb3NpdGlvbmVkU2hpcCIsInJpZ2h0IiwicmlnaHRFbGVtZW50IiwidG9wIiwidG9wRWxlbWVudCIsImxlZnQiLCJsZWZ0RWxlbWVudCIsInRvcFJpZ2h0IiwidG9wUmlnaHRFbGVtZW50IiwidG9wTGVmdCIsInRvcExlZnRFbGVtZW50IiwiYm90dG9tUmlnaHQiLCJib3R0b21SaWdodEVsZW1lbnQiLCJsZWZ0UmlnaHQiLCJsZWZ0UmlnaHRFbGVtZW50IiwiYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMiLCJhZGRPZmZMaW1pdEFyZWFGb3JIb3Jpem9udGFsbHlQb3NpdGlvbmVkU2hpcCIsIm1ha2VSYW5kb21Db29yZGluYXRlcyIsInJhbmRvbURpcmVjdGlvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmRvbUNvbHVtbiIsInJhbmRvbVJvdyIsInJlY2VpdmVBdHRhY2siLCJjaGVja0lmQWxsU2hpcHNIYXZlU3VuayIsImZsYXQiLCJldmVyeSIsImNlbGwiLCJnZXRTdGF0dXMiLCJ1bml0IiwicmFuZG9tbHlQbGFjZVNoaXBzIiwic2hpcERldGFpbHMiLCJsZW5ndGgiLCJsb2NhdGlvbiIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsInN0YXR1cyIsImlzU3VuayIsInBvc2l0aW9uIiwiaGl0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJwbGF5ZXJCb2FyZCIsInBsYXllckJvYXJkQXJlYSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImoiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiXSwic291cmNlUm9vdCI6IiJ9