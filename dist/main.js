(()=>{var e={653:(e,t,o)=>{const r=o(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1};let t=!1;const o=()=>{const t=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)t[o][r]={...e,column:o,row:r};return t};let n=o();const i=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],a=(e,t)=>n?.[e]?.[t],l=(t,o,r=(()=>Object.assign(e,{offLimits:!0}))())=>{if(void 0===n?.[t]?.[o])return!0;const i=n[t][o];return n[t][o]={...i,...r},!0},c=(e,t)=>{l(e-1,t-1),l(e,t-1)},s=(e,t,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=a(e,t+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}if("horizontal"===o)for(let o=0;o<r;o++){const r=a(e+o,t);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}return!1},h=(e,t,o,r)=>{const i=r.getLength();if(s(a(e,t)))return!1;if("vertical"===o){if(((e,t)=>e>=0&&e+t-1<n.length)(t,i)){for(let o=0;o<i;o+=1)l(e,t+o,{...r,position:o}),l(e+1,t+o),l(e-1,t+o);return((e,t,o)=>{c(e,t),l(e,t+o),l(e+1,t+o),l(e-1,t+o),l(e+1,t-1)})(e,t,i),!0}}else if("horizontal"===o&&((e,t)=>e>=0&&e+t-1<n.length)(e,i)){for(let o=0;o<i;o+=1)l(e+o,t,{...r,position:o}),l(e+o,t+1),l(e+o,t-1);return((e,t,o)=>{c(e,t),l(e+o,t),l(e-1,t+1),l(e+o,t+1),l(e+o,t-1)})(e,t,i),!0}return!1},d=()=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal",t=Math.floor(100*Math.random()),o=(()=>{const e=[...n.flat()];return e.forEach((e=>{!0===e.hasBeenHit?e.availability=!1:e.availability=!0})),e})()[t];return!1===o.availability?d():{elementColumn:o.column,elementRow:o.row,randomDirection:e}};let u=e=>{let t=Math.floor(10*Math.random()),o=Math.floor(10*Math.random()),n=Math.round(Math.random());return(0!==n||(n="horizontal",!1!==h(t,o,n,r(e))))&&(1!==n||(n="vertical",!1!==h(t,o,n,r(e))))&&void 0};return{clearBoard:()=>{n=o()},checkIfLocationIsAShipOrOffLimits:s,checkIfOffLimitZoneWasCorrectlyImplemented:e=>n.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:a,receiveAttack:(e,t)=>{n[e][t].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let e=!0;for(let t=0;t<10;t++)for(let o=0;o<10;o++){const r=a(t,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){e=!1;break}}return e},placeShip:h,randomlyPlaceShips:()=>{const e=[];for(let t=0;t<i.length;t+=1){const o=i[t],{randomColumn:r,randomRow:n,randomDirection:a}=d(o.getLength());h(r,n,a,o)?e.push({randomColumn:r,randomRow:n,randomDirection:a}):t-=1}return e},makeRandomCoordinates:d,randomFleet:()=>{n=o();for(let e=0;e<2;)!1!==u(1)&&e++;for(let e=0;e<2;)!1!==u(2)&&e++;for(let e=0;e<2;)!1!==u(3)&&e++;for(let e=0;e<2;)!1!==u(4)&&e++},getBoard:()=>n,isStartAllowed:{get:function(){return t},set:function(e){t=e}}}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:o,receiveAttack:r})=>{const n=o(e,t);return!1===n.hasBeenHit||n.isShip&&!1===n.getStatus().includes("unhit")?(r(e,t),n.hit?(n.hit(n.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:e=>{e.exports=(e,t="ship")=>{const o=Array(e).fill("unhit");return{getName:()=>t,getLength:()=>o.length,isSunk:()=>o.every((e=>"hit"===e)),hit:t=>{t<e&&(o[t]="hit")},getStatus:()=>o,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=o(653),t=o.n(e),r=o(585),n=o.n(r);let i,a=!1,l=!1,c=[],s=[],h=[],d=[];function u(e,t,o,r){a=e,void 0!==t&&(l=t),void 0!==o&&(c=[o,r]),0==s.length&&void 0!==o?s=[o,r]:0!==s.length&&0==h.length&&void 0!==o&&(h=[o,r])}function p(e,t){return d=[],0!==t&&d.push([e,t-1]),9!==t&&d.push([e,t+1]),0!==e&&d.push([e-1,t]),9!==e&&d.push([e+1,t]),d}function f(e,t,o,r,n,u){let f;if(!0===r&&(c=[],s=[],h=[],d=[],a=!1,l=!1,i=""),!l&&!a)return f=t.randomPos(),g(t,o,f[0],f[1],n,u);if(0!==h.length&&a&&!e){let e;if(s[0]==h[0]-1&&(e=m("down")),s[0]==h[0]+1&&(e=m("up")),s[1]==h[1]-1&&(e=m("right")),s[1]==h[1]+1&&(e=m("left")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return g(t,o,e[0],e[1],n,u)}else if(0!==h.length&&l&&!a){let e;if(c=s,h=[],"up"===i&&(e=m("down")),"down"===i&&(e=m("up")),"right"===i&&(e=m("left")),"left"===i&&(e=m("right")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return g(t,o,e[0],e[1],n,u)}else if(l){0==d.length&&p(c[0],c[1]),0==d.length&&1==l&&p(s[0],s[1]);const e=d.pop();return g(t,o,e[0],e[1],n,u)}}function m(e){return"left"===e?(i="left",[c[0],c[1]-1]):"right"===e?(i="right",[c[0],c[1]+1]):"down"===e?(i="down",[c[0]+1,c[1]]):"up"===e?(i="up",[c[0]-1,c[1]]):void 0}let S=0;function v(e,t){console.log(t);let o=2;const r=document.querySelector(e),i=document.querySelector("body"),a=document.querySelectorAll(".player-board > .cell"),l=r.childNodes;let c,s,h="horizontal";l[0]&&l[0].addEventListener("mouseenter",(()=>s=0)),l[1]&&l[1].addEventListener("mouseenter",(()=>s=-1)),l[2]&&l[2].addEventListener("mouseenter",(()=>s=-2)),l[3]&&l[3].addEventListener("mouseenter",(()=>s=-3)),r.addEventListener("click",(e=>function(e){"horizontal"===h?(h="vertical",e.target.parentNode.classList.toggle("rotated")):(h="horizontal",e.target.parentNode.classList.toggle("rotated"))}(e))),r.addEventListener("dragstart",(e=>{for(let e=0;e<10;e++)t.getBoard()[e].forEach(((e,t)=>{(e.offLimits||e.isShip)&&document.querySelector(`.player-board > .cell[column='${e}'][row='${t}']`).classList.toggle("not-available")}))})),r.addEventListener("dragend",((i,a)=>{if(document.querySelectorAll(".not-available").forEach((e=>e.classList.remove("not-available"))),-1===c)return;let l,d,u=`${c}`;c<10?(l=0,d=c):(u=u.split(""),l=1*u[0],d=1*u[1]),"horizontal"===h&&(d+=s),"v"===h&&(l+=s),d<0||".ship-1"===e&&!1===t.placeShip(l,d,h,n()(1))||".ship-2"===e&&!1===t.placeShip(l,d,h,n()(2))||".ship-3"===e&&!1===t.placeShip(l,d,h,n()(3))||".ship-4"===e&&!1===t.placeShip(l,d,h,n()(4))||(L(t),o-=1,S++,8===S&&t.isStartAllowed.set(!0),r.parentNode.firstChild.textContent=`${o}x`,0===o&&(r.parentNode.style.display="none"))})),a.forEach(((e,t)=>{e.addEventListener("dragover",(e=>{e.preventDefault(),c=t}))})),i.addEventListener("dragenter",(()=>{c=-1}))}async function g(e,t,o,r,n,i){let a=!1;const l=document.querySelector(`.player-board > .cell[column='${o}'][row='${r}']`),c=t.attack(o,r,n);if(console.log(n.getLocation(o,r)),"You have already hit this spot!"===c&&f(!0,e,t,void 0,n,i),"It's a hit!"===c&&(u(!1),l.classList.add("miss")),"You hit a ship!"===c)return u(!0,!0,o,r),l.classList.add("hit"),n.getLocation(o,r).domTargets.push(l),n.getLocation(o,r).isSunk()&&(n.getLocation(o,r).domTargets.forEach((e=>e.classList.add("sunk"))),a=!0,!0===n.checkIfAllShipsHaveSunk())?b(n,i):(await y(1e3),f(!1,e,t,a,n,i))}function y(e){return new Promise((t=>{setTimeout((()=>{t(2)}),e)}))}const L=({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const n=t.querySelector(`.cell:nth-child(${10*r+o+1})`);n.setAttribute("column",o),n.setAttribute("row",r);const i=e(o,r);i.isShip&&(n.classList.add("ship"),n.setAttribute("ship-name",i.getName()))}},b=(e,t)=>{if(e.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",o.addEventListener("click",(()=>{location.reload()})),t.textContent="You lose!"}if(t.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",t.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}};var k=o(61),z=o.n(k);const A=t()(),w=t()(),E=z()(),q=z()();document.querySelector("button.randomize").addEventListener("click",(()=>{(e=>{switch(e.clearBoard(),document.querySelectorAll(".player-board > .cell").forEach((e=>{e.classList.remove("ship"),e.classList.remove("hit"),e.classList.remove("miss")})),Math.floor(4*Math.random())){case 0:e.placeShip(9,1,"vertical",n()(5)),e.placeShip(0,3,"horizontal",n()(3)),e.placeShip(3,6,"horizontal",n()(2)),e.placeShip(6,5,"horizontal",n()(3)),e.placeShip(3,9,"horizontal",n()(4));break;case 1:e.placeShip(0,2,"horizontal",n()(5)),e.placeShip(4,5,"horizontal",n()(3)),e.placeShip(8,7,"horizontal",n()(2)),e.placeShip(5,9,"horizontal",n()(3)),e.placeShip(6,3,"horizontal",n()(4));break;case 2:e.placeShip(5,1,"horizontal",n()(5)),e.placeShip(3,3,"vertical",n()(3)),e.placeShip(0,0,"vertical",n()(2)),e.placeShip(6,5,"horizontal",n()(3)),e.placeShip(5,9,"horizontal",n()(4));break;default:e.placeShip(0,0,"horizontal",n()(5)),e.placeShip(3,4,"horizontal",n()(3)),e.placeShip(6,7,"horizontal",n()(2)),e.placeShip(9,1,"vertical",n()(3)),e.placeShip(5,9,"horizontal",n()(4))}L(e)})(w)})),function(e){function t(e,t){const o=document.querySelector(".player:nth-child(1)"),r=document.createElement("div");r.classList.add("ship-container"),o.appendChild(r);const n=document.createElement("span");n.classList.add(`info-${e}`),n.textContent="2x",r.appendChild(n);const i=document.createElement("div");i.classList.add("ship"),i.classList.add(`ship-${e}`),i.setAttribute("draggable","true"),r.appendChild(i);for(let e=0;e<t;e++){const e=document.createElement("div");e.classList.add("cell"),i.appendChild(e)}}t(1,1),t(2,2),t(3,3),t(4,4);for(let t=1;t<5;t++)v(`.ship-${t}`,e)}(A),w.placeShip(0,0,"horizontal",n()(5)),w.placeShip(3,4,"horizontal",n()(3)),w.placeShip(6,7,"horizontal",n()(2)),w.placeShip(9,1,"vertical",n()(3)),w.placeShip(5,9,"horizontal",n()(4));const M=(()=>{const e={};return{publish:function(t,o){Array.isArray(e[t])&&e[t].forEach((e=>{e(o)}))},subscribe:function t(o,r){Array.isArray(t[o])||(e[o]=[]),e[o].push(r);const n=e[o].length-1;return{unsubscribe(){e[o].splice(n,1)}}}}})();((e,t,o,r,n)=>{const i=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let l=0;l<10;l+=1){const c=i.querySelector(`.cell:nth-child(${10*l+a+1})`);c.setAttribute("column",a),c.setAttribute("row",l),c.addEventListener("click",(()=>{n.publish("click",{cell:c,column:a,row:l,playerBoard:e,enemyBoard:t,player:o,enemy:r})}),{once:!0})}})(A,w,E,q,M),M.subscribe("click",(({cell:e,column:t,row:o,playerBoard:r,enemyBoard:n,player:i,enemy:a})=>{(async(e,t,o,r,n,i)=>{((e,t,o,r)=>{r.attack(e,t,o)})(e,t,o,n),((e,t,o,r)=>{const n=document.querySelector(`.enemy-board > .cell[column='${t}'][row='${o}']`);r.getLocation(t,o)?.isShip&&(r.getLocation(t,o).domTargets.push(n),r.getLocation(t,o).isSunk()&&r.getLocation(t,o).domTargets.forEach((e=>e.classList.add("sunk")))),r.getLocation(t,o).isShip?n.classList.add("hit"):n.classList.add("miss")})(0,e,t,o),await y(700),o.checkIfAllShipsHaveSunk()?b(r,o):f(!1,n,i,void 0,r,o)})(t,o,n,r,i,a)})),L(A)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUtpRCxVQUVuQ3VELEVBQVd0RyxZQUFZSCxFQUFRQyxHQUFLcUUsV0FBV3RDLFNBQVMrRixHQUFNQSxFQUFFRyxVQUFVWSxJQUFJLFdBSXJFckMsRUFBV3RHLFlBQVlILEVBQVFDLEdBQ25DVCxPQUNUOEosRUFBS3BCLFVBQVVZLElBQUksT0FFbkJRLEVBQUtwQixVQUFVWSxJQUFJLFNBWXZCeUMsQ0FBYyxFQUFTdkwsRUFBUUMsRUFBS3dHLFNBQzlCdUMsRUFBTSxLQUNMdkMsRUFBVzFELDBCQUE0QmdHLEVBQWdCdkMsRUFBYUMsR0FBY0wsR0FBTyxFQUFPNkUsRUFBUUMsT0FBT3pLLEVBQVcrRixFQUFhQyxJQXFWOUkrRSxDQUFnQnhMLEVBQVFDLEVBQUt3RyxFQUFZRCxFQUFheUUsRUFBUUMsTUMxVmxFM0MsRUFBa0IvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZWJvYXJkL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9wbGF5ZXIvcGxheWVyLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL3NoaXAvc2hpcC5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9ib3QuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZHJhZy1hbmQtZHJvcC5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1hc3NpZ24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuY29uc3QgY3JlYXRlU2hpcCA9IHJlcXVpcmUoJy4uL3NoaXAvc2hpcCcpXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5jb25zdCBjcmVhdGVHYW1lQm9hcmQgPSAoKSA9PiB7XG4gICAgY29uc3QgZW1wdHlDZWxsID0geyBoYXNCZWVuSGl0OiBmYWxzZSwgaXNTaGlwOiBmYWxzZSwgb2ZmTGltaXRzOiBmYWxzZSB9XG5cbiAgICBsZXQgaXNTdGFydEFsbG93ZWQgPSBmYWxzZVxuICAgIFxuICAgIGNvbnN0IGluaXRpYWxpemVCb2FyZCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZ2FtZUJvYXJkID0gQXJyYXkoMTApLmZpbGwoKS5tYXAoKCkgPT4gQXJyYXkoMTApLmZpbGwoKSlcbiAgICAgICAgZm9yKGxldCBjb2x1bW49IDA7IGNvbHVtbiA8IDEwOyBjb2x1bW4rKyl7XG4gICAgICAgICAgICBmb3IobGV0IHJvdz0gMDsgcm93IDwgMTA7IHJvdysrKXtcbiAgICAgICAgICAgICAgICBnYW1lQm9hcmRbY29sdW1uXVtyb3ddID0gey4uLmVtcHR5Q2VsbCwgY29sdW1uLCByb3d9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdhbWVCb2FyZFxuICAgIFxuICAgIH1cblxuICAgIGxldCBnYW1lQm9hcmQgPSBpbml0aWFsaXplQm9hcmQoKVxuXG4gICAgY29uc3Qgc2hpcHMgPSBbXG4gICAgICAgIGNyZWF0ZVNoaXAoNSwgJ0NhcnJpZXInKSxcbiAgICAgICAgY3JlYXRlU2hpcCg0LCAnQmF0dGxlc2hpcCcpLFxuICAgICAgICBjcmVhdGVTaGlwKDMsICdEZXN0cm95ZXInKSxcbiAgICAgICAgY3JlYXRlU2hpcCgzLCAnU3VibWFyaW5lJyksXG4gICAgICAgIGNyZWF0ZVNoaXAoMiwgJ1BhdHJvbCBCb2F0JyksXG4gICAgXVxuXG5cbiAgICBjb25zdCBjcmVhdGVPZmZMaW1pdExvY2F0aW9uID0gKCkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbXB0eUNlbGwsIHsgb2ZmTGltaXRzOiB0cnVlIH0pXG5cbiAgICBjb25zdCBnZXRMb2NhdGlvbiA9IChjb2x1bW4sIHJvdykgPT4gZ2FtZUJvYXJkPy5bY29sdW1uXT8uW3Jvd11cblxuICAgIGNvbnN0IHNldExvY2F0aW9uID0gKGNvbHVtbiwgcm93LCBzaGlwID0gY3JlYXRlT2ZmTGltaXRMb2NhdGlvbigpKSA9PiB7XG4gICAgICAgIGlmIChnYW1lQm9hcmQ/Lltjb2x1bW5dPy5bcm93XSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZVxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdhbWVCb2FyZFtjb2x1bW5dW3Jvd11cblxuICAgICAgICBnYW1lQm9hcmRbY29sdW1uXVtyb3ddID0gey4uLmxvY2F0aW9uLCAuLi5zaGlwfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICBjb25zdCBjaGVja0lmQWxsU2hpcHNIYXZlU3VuayA9ICgpID0+IHtcblxuICAgICAgICBsZXQgaGF2ZUFsbFNoaXBzU3VuayA9dHJ1ZSAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnZXRMb2NhdGlvbihpLCBqKVxuICAgICAgICBpZihsb2NhdGlvbi5pc1NoaXAgPT09IGZhbHNlKSBjb250aW51ZVxuICAgICAgICBpZihsb2NhdGlvbi5pc1NoaXAgJiYgbG9jYXRpb24uaXNTdW5rKCkgPT09IGZhbHNlKXtcbiAgICAgICAgICAgaGF2ZUFsbFNoaXBzU3VuayA9IGZhbHNlIFxuICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGF2ZUFsbFNoaXBzU3VuayBcbiAgICB9XG5cbiAgICBjb25zdCBhZGRPZmZMaW1pdEFyZWFGb3JTaGlwcyA9IChjb2x1bW4sIHJvdykgPT4ge1xuICAgICAgICAvLyB0b3AtbGVmdFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gLSAxLCByb3cgLSAxKVxuICAgICAgICAvLyB0b3BcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uLCByb3cgLSAxKVxuICAgIH1cblxuICAgIGNvbnN0IGFkZE9mZkxpbWl0QXJlYUZvckhvcml6b250YWxseVBvc2l0aW9uZWRTaGlwID0gKFxuICAgICAgICBjb2x1bW4sXG4gICAgICAgIHJvdyxcbiAgICAgICAgc2hpcExlbmd0aFxuICAgICkgPT4ge1xuICAgICAgICAvLyBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHNoaXAgaXRzZWxmKGllLiBhIGhvcml6b250YWwgc2hpcCdzIGJvdHRvbSBpcyB0byB0aGUgcmlnaHQpXG5cbiAgICAgICAgYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMoY29sdW1uLCByb3cpXG4gICAgICAgIC8vIGJvdHRvbVxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBzaGlwTGVuZ3RoLCByb3cpXG4gICAgICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdyArIDEpXG4gICAgICAgIC8vIGJvdHRvbS1yaWdodFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBzaGlwTGVuZ3RoLCByb3cgKyAxKVxuICAgICAgICAvLyB0b3AtcmlnaHRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgc2hpcExlbmd0aCwgcm93IC0gMSlcbiAgICB9XG5cbiAgICBjb25zdCBhZGRPZmZMaW1pdEFyZWFGb3JWZXJ0aWNhbGx5UG9zaXRpb25lZFNoaXAgPSAoXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgcm93LFxuICAgICAgICBzaGlwTGVuZ3RoXG4gICAgKSA9PiB7XG4gICAgICAgIC8vIHBvc2l0aW9ucyByZWxhdGl2ZSB0byBob3cgdGhlIHVzZXIgc2VlcyBpdChpZS4gYSB2ZXJ0aWNhbCBzaGlwJ3MgYm90dG9tIGlzIHRvIHRoZSBib3R0b20pXG5cbiAgICAgICAgYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMoY29sdW1uLCByb3cpXG4gICAgICAgIC8vIGJvdHRvbVxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4sIHJvdyArIHNoaXBMZW5ndGgpXG4gICAgICAgIC8vIGJvdHRvbS1yaWdodFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyAxLCByb3cgKyBzaGlwTGVuZ3RoKVxuICAgICAgICAvLyBib3R0b20tbGVmdFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gLSAxLCByb3cgKyBzaGlwTGVuZ3RoKVxuICAgICAgICAvLyB0b3AtcmlnaHRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgMSwgcm93IC0gMSlcbiAgICB9XG5cbiAgICBjb25zdCBjaGVja0lmQ29sdW1uQ29vcmRpbmF0ZUlzVmFsaWQgPSAoY29sdW1uLCBzaGlwTGVuZ3RoKSA9PlxuICAgICAgICBjb2x1bW4gPj0gMCAmJiBjb2x1bW4gKyBzaGlwTGVuZ3RoIC0gMSA8IGdhbWVCb2FyZC5sZW5ndGhcblxuICAgIGNvbnN0IGNoZWNrSWZSb3dDb29yZGluYXRlSXNWYWxpZCA9IChyb3csIHNoaXBMZW5ndGgpID0+XG4gICAgICAgIHJvdyA+PSAwICYmIHJvdyArIHNoaXBMZW5ndGggLSAxIDwgZ2FtZUJvYXJkLmxlbmd0aFxuXG5cbiAgICBjb25zdCBjaGVja0lmTG9jYXRpb25Jc0FTaGlwT3JPZmZMaW1pdHMgPSAoXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgcm93LFxuICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgIHNoaXBMZW5ndGhcbiAgICApID0+IHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGNvbHVtbiwgcm93ICsgaSlcbiAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uaXNTaGlwID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5vZmZMaW1pdHMgPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oY29sdW1uICsgaSwgcm93KVxuICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5pc1NoaXAgPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLm9mZkxpbWl0cyA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgICAvLyBtYWtlcyB0aWxlcyBhcm91bmQgc2hpcCBcInJlc2VydmVkXCJcbiAgbGV0IHJlc2VydmVBcm91bmQgPSAocG9zMSwgcG9zMikgPT4ge1xuICAgIGZ1bmN0aW9uIGNlbGwobjEsIG4yKSB7XG4gICAgICBpZiAocG9zMSArIG4xID4gOSB8fCBwb3MxICsgbjEgPCAwKSByZXR1cm47XG4gICAgICBpZiAoZ2FtZUJvYXJkW3BvczEgKyBuMV1bcG9zMiArIG4yXSA9PT0gZmFsc2UpXG4gICAgICAgIGdhbWVCb2FyZFtwb3MxICsgbjFdW3BvczIgKyBuMl0gPSBcInJlc1wiO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNlcnZlQ2VsbChyb3cpIHtcbiAgICAgIGNlbGwocm93LCAtMSk7XG4gICAgICBjZWxsKHJvdywgMCk7XG4gICAgICBjZWxsKHJvdywgMSk7XG4gICAgfVxuICAgIHJlc2VydmVDZWxsKC0xKTtcbiAgICByZXNlcnZlQ2VsbCgwKTtcbiAgICByZXNlcnZlQ2VsbCgxKTtcbiAgfTtcblxuY29uc3QgcGxhY2VTaGlwID0gKGNvbHVtbiwgcm93LCBkaXJlY3Rpb24sIHNoaXApID0+IHtcbiAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IHNoaXAuZ2V0TGVuZ3RoKClcbiAgICAgICAgaWYgKGNoZWNrSWZMb2NhdGlvbklzQVNoaXBPck9mZkxpbWl0cyhnZXRMb2NhdGlvbihjb2x1bW4sIHJvdywgZGlyZWN0aW9uLCBzaGlwTGVuZ3RoKSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgaWYgKGNoZWNrSWZSb3dDb29yZGluYXRlSXNWYWxpZChyb3csIHNoaXBMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uLCByb3cgKyBpLCB7Li4uc2hpcCwgcG9zaXRpb246IGl9KVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyAxLCByb3cgKyBpKVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gLSAxLCByb3cgKyBpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JWZXJ0aWNhbGx5UG9zaXRpb25lZFNoaXAoXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICBzaGlwTGVuZ3RoXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIGlmIChjaGVja0lmQ29sdW1uQ29vcmRpbmF0ZUlzVmFsaWQoY29sdW1uLCBzaGlwTGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIGkgLCByb3csIHsuLi5zaGlwLCBwb3NpdGlvbjogaX0pXG4gICAgICAgICAgICAgICAgICAgIC8vc2V0TG9jYXRpb24oY29sdW1uICsgaSwgcm93LCBzaGlwKVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBpLCByb3cgKyAxKVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBpLCByb3cgLSAxKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JIb3Jpem9udGFsbHlQb3NpdGlvbmVkU2hpcChcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgIHNoaXBMZW5ndGhcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVNwYWNlcyA9ICgpID0+e1xuXG4gICAgICAgIGNvbnN0IGZsYXR0ZW5lZEdhbWVCb2FyZCA9IFsuLi5nYW1lQm9hcmQuZmxhdCgpXVxuXG4gICAgICAgICAgICBmbGF0dGVuZWRHYW1lQm9hcmQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuaGFzQmVlbkhpdCA9PT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYXZhaWxhYmlsaXR5ID0gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hdmFpbGFiaWxpdHkgPXRydWUgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJldHVybiBmbGF0dGVuZWRHYW1lQm9hcmRcblxuICAgICAgICB9XG4gICAgY29uc3QgbWFrZVJhbmRvbUNvb3JkaW5hdGVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCByYW5kb21EaXJlY3Rpb24gPVxuICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMikgPT09IDAgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnXG4gICAgICAgIGNvbnN0IHJhbmRvbUxvY2F0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKVxuICAgICAgICBjb25zdCBmbGF0dGVuZWRHYW1lQm9hcmQgPSBhdmFpbGFibGVTcGFjZXMoKVxuXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZmxhdHRlbmVkR2FtZUJvYXJkW3JhbmRvbUxvY2F0aW9uXVxuXG4gICAgICAgIGlmKGxvY2F0aW9uLmF2YWlsYWJpbGl0eSA9PT0gZmFsc2Upe1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VSYW5kb21Db29yZGluYXRlcygpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbGVtZW50Q29sdW1uID0gbG9jYXRpb24uY29sdW1uXG4gICAgICAgIGNvbnN0IGVsZW1lbnRSb3cgPSBsb2NhdGlvbi5yb3dcblxuXG4gICAgICAgIHJldHVybiB7IGVsZW1lbnRDb2x1bW4sIGVsZW1lbnRSb3csIHJhbmRvbURpcmVjdGlvbiB9XG4gICAgfVxuXG4gIC8vIGNyZWF0ZXMgYSBzaGlwIHdpdGggcmFuZG9tIHBvcyBhbmQgb3JpZW50YXRpb25cbiAgbGV0IHJhbmRvbVNoaXAgPSAobGVuZ3RoKSA9PiB7XG4gICAgbGV0IHBvczEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgbGV0IHBvczIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgbGV0IGRpciA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSk7XG5cbiAgICBpZiAoZGlyID09PSAwKSB7XG4gICAgICBkaXIgPSBcImhvcml6b250YWxcIjtcbiAgICAgIGlmIChwbGFjZVNoaXAocG9zMSwgcG9zMiwgZGlyLCBjcmVhdGVTaGlwKGxlbmd0aCkpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChkaXIgPT09IDEpIHtcbiAgICAgIGRpciA9IFwidmVydGljYWxcIjtcbiAgICAgIGlmIChwbGFjZVNoaXAocG9zMSwgcG9zMiwgZGlyLCBjcmVhdGVTaGlwKGxlbmd0aCkpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICAgIGxldCByYW5kb21GbGVldCA9ICgpID0+IHtcbiAgICAgICAgZ2FtZUJvYXJkID0gaW5pdGlhbGl6ZUJvYXJkKClcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDI7KSB7XG4gICAgICAgICAgICBpZihyYW5kb21TaGlwKDEpID09PSBmYWxzZSkgY29udGludWUgXG4gICAgICAgICAgICBpKytcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAyOykge1xuICAgICAgICAgICAgaWYocmFuZG9tU2hpcCgyKSA9PT0gZmFsc2UpIGNvbnRpbnVlIFxuICAgICAgICAgICAgaSsrXG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDI7KSB7XG4gICAgICAgICAgICBpZihyYW5kb21TaGlwKDMpID09PSBmYWxzZSkgY29udGludWUgXG4gICAgICAgICAgICBpKytcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMjspIHtcbiAgICAgICAgICAgIGlmKHJhbmRvbVNoaXAoNCkgPT09IGZhbHNlKSBjb250aW51ZSBcbiAgICAgICAgICAgIGkrK1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmFuZG9tbHlQbGFjZVNoaXBzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzaGlwRGV0YWlscyA9IFtdXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBzaGlwc1tpXVxuICAgICAgICAgICAgY29uc3QgeyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uIH0gPVxuICAgICAgICAgICAgICAgIG1ha2VSYW5kb21Db29yZGluYXRlcyhzaGlwLmdldExlbmd0aCgpKVxuICAgICAgICAgICAgaWYgKHBsYWNlU2hpcChyYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uLCBzaGlwKSkge1xuICAgICAgICAgICAgICAgIHNoaXBEZXRhaWxzLnB1c2goeyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGkgLT0gMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaGlwRGV0YWlsc1xuICAgIH1cblxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29sdW1uLCByb3cpID0+IHtcbiAgICAgICAgZ2FtZUJvYXJkW2NvbHVtbl1bcm93XS5oYXNCZWVuSGl0ID0gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCA9IChzaGlwTGVuZ3RoKSA9PlxuICAgICAgICBnYW1lQm9hcmQuZmxhdCgpLmZpbHRlcigoZWxlbWVudCkgPT4gZWxlbWVudC5vZmZMaW1pdHMgPT09IHRydWUpXG4gICAgICAgICAgICAubGVuZ3RoID09PVxuICAgICAgICBzaGlwTGVuZ3RoICsgMlxuICAgIC8vIGFkZGluZyBzaGlwTGVuZ3RoIHBsdXMgdHdvIGJlY2F1c2UgZm9yIGV2ZXJ5IGluY3JlYXNlIGluIHRoZSBzaXplIG9mIHNoaXAsIHRoZSB6b25lcyBjb3ZlcmVkIGluY3JlYXNlIGJ5IDIgdW5pdHNcblxuICAgIGNvbnN0IGNsZWFyQm9hcmQgID0gKCkgPT4ge1xuICAgICAgICBnYW1lQm9hcmQgPSBpbml0aWFsaXplQm9hcmQoKVxuICAgIH1cblxuICAgIGNvbnN0IGdldEJvYXJkID0gKCkgPT4gZ2FtZUJvYXJkXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjbGVhckJvYXJkLFxuICAgICAgICBjaGVja0lmTG9jYXRpb25Jc0FTaGlwT3JPZmZMaW1pdHMsXG4gICAgICAgIGNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCxcbiAgICAgICAgZ2V0TG9jYXRpb24sXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIGNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rLFxuICAgICAgICBwbGFjZVNoaXAsXG4gICAgICAgIHJhbmRvbWx5UGxhY2VTaGlwcyxcbiAgICAgICAgbWFrZVJhbmRvbUNvb3JkaW5hdGVzLFxuICAgICAgICByYW5kb21GbGVldCxcbiAgICAgICAgZ2V0Qm9hcmQsXG4gICAgICAgIGlzU3RhcnRBbGxvd2VkIDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNTdGFydEFsbG93ZWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaXNTdGFydEFsbG93ZWQgPSB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVHYW1lQm9hcmQiLCJjb25zdCBjcmVhdGVQbGF5ZXIgPSAobmFtZSA9ICdwbGF5ZXInKSA9PiB7XG4gICAgY29uc3QgZ2V0TmFtZSA9ICgpID0+IG5hbWVcblxuICAgIGNvbnN0IGF0dGFjayA9IChjb2x1bW4sIHJvdywgeyBnZXRMb2NhdGlvbiwgcmVjZWl2ZUF0dGFjayB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oY29sdW1uLCByb3cpXG4gICAgICAgIGlmIChsb2NhdGlvbi5oYXNCZWVuSGl0ID09PSBmYWxzZSB8fCAobG9jYXRpb24uaXNTaGlwICYmIGxvY2F0aW9uLmdldFN0YXR1cygpLmluY2x1ZGVzKCd1bmhpdCcpID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJlY2VpdmVBdHRhY2soY29sdW1uLCByb3cpXG4gICAgICAgICAgICBpZihsb2NhdGlvbi5oaXQpe1xuXG4gICAgICAgICAgICAgICAgbG9jYXRpb24uaGl0KGxvY2F0aW9uLnBvc2l0aW9uKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIllvdSBoaXQgYSBzaGlwIVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJJdCdzIGEgaGl0IVwiXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ1lvdSBoYXZlIGFscmVhZHkgaGl0IHRoaXMgc3BvdCEnXG4gICAgfVxuXG4gICAgICBsZXQgcmFuZG9tUG9zID0gKCkgPT4ge1xuICAgIGxldCBwb3MxID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgIGxldCBwb3MyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgIHJldHVybiBbcG9zMSwgcG9zMl07XG4gIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXROYW1lLFxuICAgICAgICBhdHRhY2ssXG4gICAgICAgIHJhbmRvbVBvcyxcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUGxheWVyXG4iLCJjb25zdCBjcmVhdGVTaGlwID0gKGxlbmd0aCwgbmFtZSA9ICdzaGlwJykgPT4ge1xuXG4gICAgbGV0IGRvbVRhcmdldHMgPSBbXVxuXG4gICAgY29uc3Qgc3RhdHVzID0gQXJyYXkobGVuZ3RoKS5maWxsKCd1bmhpdCcpXG5cbiAgICBjb25zdCBnZXRMZW5ndGggPSAoKSA9PiBzdGF0dXMubGVuZ3RoXG5cbiAgICBjb25zdCBnZXRTdGF0dXMgPSAoKSA9PiBzdGF0dXNcblxuICAgIGNvbnN0IGhpdCA9IChwb3NpdGlvbikgPT4ge1xuICAgICAgICBpZiAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHN0YXR1c1twb3NpdGlvbl0gPSAnaGl0J1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0TmFtZSA9ICgpID0+ICBuYW1lXG5cbiAgICBjb25zdCBpc1N1bmsgPSAoKSA9PiBzdGF0dXMuZXZlcnkoKHBvc2l0aW9uKSA9PiBwb3NpdGlvbiA9PT0gJ2hpdCcpXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXROYW1lLFxuICAgICAgICBnZXRMZW5ndGgsXG4gICAgICAgIGlzU3VuayxcbiAgICAgICAgaGl0LFxuICAgICAgICBnZXRTdGF0dXMsXG4gICAgICAgIGRvbVRhcmdldHMsXG4gICAgICAgIGhhc0JlZW5IaXQ6IGZhbHNlLFxuICAgICAgICBvZmZMaW1pdHM6IHRydWUsXG4gICAgICAgIGlzU2hpcDogdHJ1ZSxcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlU2hpcFxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWVsc2UtcmV0dXJuICovXG5pbXBvcnQge3JlbmRlckF0dGFja1AyIH0gZnJvbSAnLi9kb20nXG5cbmxldCB3YXNIaXQgPSBmYWxzZTtcbmxldCBzdGF0dXMgPSBmYWxzZTtcbmxldCBsYXN0SGl0UG9zID0gW107XG5sZXQgZmlyc3RIaXRQb3MgPSBbXTtcbmxldCBzZWNvbmRIaXRQb3MgPSBbXTtcbmxldCBzdXJyb3VuZGluZ1BvcyA9IFtdO1xubGV0IGF0dGFja0RpcmVjdGlvbjtcblxuZnVuY3Rpb24gc2V0V2FzSGl0KHZhbHVlLCBzdGF0LCBwb3MxLCBwb3MyKSB7XG4gIHdhc0hpdCA9IHZhbHVlO1xuICBpZiAoc3RhdCAhPT0gdW5kZWZpbmVkKSBzdGF0dXMgPSBzdGF0O1xuICBpZiAocG9zMSAhPT0gdW5kZWZpbmVkKSBsYXN0SGl0UG9zID0gW3BvczEsIHBvczJdO1xuICBpZiAoZmlyc3RIaXRQb3MubGVuZ3RoID09IDAgJiYgcG9zMSAhPT0gdW5kZWZpbmVkKSBmaXJzdEhpdFBvcyA9IFtwb3MxLCBwb3MyXTtcbiAgZWxzZSBpZiAoXG4gICAgZmlyc3RIaXRQb3MubGVuZ3RoICE9PSAwICYmXG4gICAgc2Vjb25kSGl0UG9zLmxlbmd0aCA9PSAwICYmXG4gICAgcG9zMSAhPT0gdW5kZWZpbmVkXG4gIClcbiAgICBzZWNvbmRIaXRQb3MgPSBbcG9zMSwgcG9zMl07XG59XG5mdW5jdGlvbiBnZXRXYXNIaXQoKSB7XG4gIHJldHVybiBbd2FzSGl0LCBsYXN0SGl0UG9zLCBzdGF0dXNdO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlclN1cnJvdW5kaW5nUG9zKHBvczEsIHBvczIpIHtcbiAgc3Vycm91bmRpbmdQb3MgPSBbXTtcbiAgaWYgKHBvczIgIT09IDApIHN1cnJvdW5kaW5nUG9zLnB1c2goW3BvczEsIHBvczIgLSAxXSk7XG4gIGlmIChwb3MyICE9PSA5KSBzdXJyb3VuZGluZ1Bvcy5wdXNoKFtwb3MxLCBwb3MyICsgMV0pO1xuICBpZiAocG9zMSAhPT0gMCkgc3Vycm91bmRpbmdQb3MucHVzaChbcG9zMSAtIDEsIHBvczJdKTtcbiAgaWYgKHBvczEgIT09IDkpIHN1cnJvdW5kaW5nUG9zLnB1c2goW3BvczEgKyAxLCBwb3MyXSk7XG4gIHJldHVybiBzdXJyb3VuZGluZ1Bvcztcbn1cblxuZnVuY3Rpb24gYWlQbGF5KHJlcGVhdCwgcDEsIHAyLCBpc1N1bmssIHBsYXllckJvYXJkLCBlbmVteUJvYXJkKSB7XG4gIGxldCBwb3M7IGxldCBwb3MxOyBsZXQgcG9zMjtcbiAgaWYgKGlzU3VuayA9PT0gdHJ1ZSkge1xuICAgIGxhc3RIaXRQb3MgPSBbXTtcbiAgICBmaXJzdEhpdFBvcyA9IFtdO1xuICAgIHNlY29uZEhpdFBvcyA9IFtdO1xuICAgIHN1cnJvdW5kaW5nUG9zID0gW107XG4gICAgd2FzSGl0ID0gZmFsc2U7XG4gICAgc3RhdHVzID0gZmFsc2U7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJcIjtcbiAgfVxuICBpZiAoIXN0YXR1cyAmJiAhd2FzSGl0KSB7XG4gICAgcG9zID0gcDEucmFuZG9tUG9zKCk7XG5cbiAgICByZXR1cm4gcmVuZGVyQXR0YWNrUDIocDEsIHAyLCBwb3NbMF0sIHBvc1sxXSwgcGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpO1xuICB9IGVsc2UgaWYgKHNlY29uZEhpdFBvcy5sZW5ndGggIT09IDAgJiYgd2FzSGl0ICYmICFyZXBlYXQpIHtcbiAgICBsZXQgbmV3UG9zO1xuICAgIGlmIChmaXJzdEhpdFBvc1swXSA9PSBzZWNvbmRIaXRQb3NbMF0gLSAxKSBuZXdQb3MgPSBhdHRhY2tUb3dhcmRzKFwiZG93blwiKTtcbiAgICBpZiAoZmlyc3RIaXRQb3NbMF0gPT0gc2Vjb25kSGl0UG9zWzBdICsgMSkgbmV3UG9zID0gYXR0YWNrVG93YXJkcyhcInVwXCIpO1xuICAgIGlmIChmaXJzdEhpdFBvc1sxXSA9PSBzZWNvbmRIaXRQb3NbMV0gLSAxKSBuZXdQb3MgPSBhdHRhY2tUb3dhcmRzKFwicmlnaHRcIik7XG4gICAgaWYgKGZpcnN0SGl0UG9zWzFdID09IHNlY29uZEhpdFBvc1sxXSArIDEpIG5ld1BvcyA9IGF0dGFja1Rvd2FyZHMoXCJsZWZ0XCIpO1xuICAgIGlmIChuZXdQb3NbMF0gPj0gMCAmJiBuZXdQb3NbMF0gPD0gOSAmJiBuZXdQb3NbMV0gPj0gMCAmJiBuZXdQb3NbMV0gPD0gOSlcbiAgICAgIHJldHVybiByZW5kZXJBdHRhY2tQMihwMSwgcDIsIG5ld1Bvc1swXSwgbmV3UG9zWzFdLCBwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZCk7XG4gIH0gZWxzZSBpZiAoc2Vjb25kSGl0UG9zLmxlbmd0aCAhPT0gMCAmJiBzdGF0dXMgJiYgIXdhc0hpdCkge1xuICAgIGxhc3RIaXRQb3MgPSBmaXJzdEhpdFBvcztcbiAgICBzZWNvbmRIaXRQb3MgPSBbXTtcbiAgICBsZXQgbmV3UG9zO1xuICAgIGlmIChhdHRhY2tEaXJlY3Rpb24gPT09IFwidXBcIikgbmV3UG9zID0gYXR0YWNrVG93YXJkcyhcImRvd25cIik7XG4gICAgaWYgKGF0dGFja0RpcmVjdGlvbiA9PT0gXCJkb3duXCIpIG5ld1BvcyA9IGF0dGFja1Rvd2FyZHMoXCJ1cFwiKTtcbiAgICBpZiAoYXR0YWNrRGlyZWN0aW9uID09PSBcInJpZ2h0XCIpIG5ld1BvcyA9IGF0dGFja1Rvd2FyZHMoXCJsZWZ0XCIpO1xuICAgIGlmIChhdHRhY2tEaXJlY3Rpb24gPT09IFwibGVmdFwiKSBuZXdQb3MgPSBhdHRhY2tUb3dhcmRzKFwicmlnaHRcIik7XG4gICAgaWYgKG5ld1Bvc1swXSA+PSAwICYmIG5ld1Bvc1swXSA8PSA5ICYmIG5ld1Bvc1sxXSA+PSAwICYmIG5ld1Bvc1sxXSA8PSA5KVxuICAgICAgcmV0dXJuIHJlbmRlckF0dGFja1AyKHAxLCBwMiwgbmV3UG9zWzBdLCBuZXdQb3NbMV0sIHBsYXllckJvYXJkLCBlbmVteUJvYXJkKTtcbiAgfSBlbHNlIGlmIChzdGF0dXMpIHtcbiAgICBpZiAoc3Vycm91bmRpbmdQb3MubGVuZ3RoID09IDApXG4gICAgICByZWdpc3RlclN1cnJvdW5kaW5nUG9zKGxhc3RIaXRQb3NbMF0sIGxhc3RIaXRQb3NbMV0pO1xuICAgIGlmIChzdXJyb3VuZGluZ1Bvcy5sZW5ndGggPT0gMCAmJiBzdGF0dXMgPT0gdHJ1ZSlcbiAgICAgIHJlZ2lzdGVyU3Vycm91bmRpbmdQb3MoZmlyc3RIaXRQb3NbMF0sIGZpcnN0SGl0UG9zWzFdKTtcbiAgICBjb25zdCBuZXdQb3MgPSBzdXJyb3VuZGluZ1Bvcy5wb3AoKTtcbiAgICByZXR1cm4gcmVuZGVyQXR0YWNrUDIocDEsIHAyLCBuZXdQb3NbMF0sIG5ld1Bvc1sxXSwgcGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpO1xuICB9XG59XG4vLyBnZXQgcG9zIG9mIGF0dGFjayBiYXNlZCBvbiBkaXJlY3Rpb25cbmZ1bmN0aW9uIGF0dGFja1Rvd2FyZHMoZGlyKSB7XG4gIGlmIChkaXIgPT09IFwibGVmdFwiKSB7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJsZWZ0XCI7XG4gICAgcmV0dXJuIFtsYXN0SGl0UG9zWzBdLCBsYXN0SGl0UG9zWzFdIC0gMV07XG4gIH1cbiAgaWYgKGRpciA9PT0gXCJyaWdodFwiKSB7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJyaWdodFwiO1xuICAgIHJldHVybiBbbGFzdEhpdFBvc1swXSwgbGFzdEhpdFBvc1sxXSArIDFdO1xuICB9XG4gIGlmIChkaXIgPT09IFwiZG93blwiKSB7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJkb3duXCI7XG4gICAgcmV0dXJuIFtsYXN0SGl0UG9zWzBdICsgMSwgbGFzdEhpdFBvc1sxXV07XG4gIH1cbiAgaWYgKGRpciA9PT0gXCJ1cFwiKSB7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJ1cFwiO1xuICAgIHJldHVybiBbbGFzdEhpdFBvc1swXSAtIDEsIGxhc3RIaXRQb3NbMV1dO1xuICB9XG59XG5cbmV4cG9ydCB7IGFpUGxheSwgZ2V0V2FzSGl0LCBzZXRXYXNIaXQsIGxhc3RIaXRQb3MsIHN1cnJvdW5kaW5nUG9zIH07XG5cbiIsImltcG9ydCB7cmVuZGVyUGxheWVyU2hpcHN9IGZyb20gJy4vZG9tJ1xuaW1wb3J0IGNyZWF0ZVNoaXAgZnJvbSAnLi9zaGlwL3NoaXAnXG5cbmxldCB0b3RhbEFtb3VudFNoaXBzID0gMFxuXG5mdW5jdGlvbiBzaGlwRHJhZyhzaGlwTmFtZSwgcGxheWVyQm9hcmQpIHtcbiAgICBjb25zb2xlLmxvZyhwbGF5ZXJCb2FyZClcbiAgICBsZXQgYW1vdW50TGVmdCA9IDJcblxuICAgIGNvbnN0IHNoaXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNoaXBOYW1lKVxuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JylcbiAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wbGF5ZXItYm9hcmQgPiAuY2VsbCcpXG4gICAgY29uc3QgY2hpbGQgPSBzaGlwLmNoaWxkTm9kZXNcbiAgICBsZXQgZHJhZ1NlbGVjdGlvbjtcbiAgICBsZXQgb2Zmc2V0O1xuICAgIGxldCBkaXIgPSBcImhvcml6b250YWxcIlxuXG4gICAgaWYoY2hpbGRbMF0pIGNoaWxkWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiAob2Zmc2V0ID0gMCkpXG4gICAgaWYoY2hpbGRbMV0pIGNoaWxkWzFdLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiAob2Zmc2V0ID0gLTEpKVxuICAgIGlmKGNoaWxkWzJdKSBjaGlsZFsyXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4gKG9mZnNldCA9IC0yKSlcbiAgICBpZihjaGlsZFszXSkgY2hpbGRbM10uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IChvZmZzZXQgPSAtMykpXG5cbiAgICBzaGlwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4gY2hhbmdlRGlyKGUpKVxuXG4gICAgc2hpcC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIChlKSA9PiB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKVxuICAgICAgICAgICAgcGxheWVyQm9hcmQuZ2V0Qm9hcmQoKVtpXS5mb3JFYWNoKChlLCBqKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoZS5vZmZMaW1pdHMgfHwgZS5pc1NoaXApXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLnBsYXllci1ib2FyZCA+IC5jZWxsW2NvbHVtbj0nJHtlfSddW3Jvdz0nJHtqfSddYCkuY2xhc3NMaXN0LnRvZ2dsZShcIm5vdC1hdmFpbGFibGVcIilcbiAgICAgICAgICAgIH0pXG4gICAgfSlcblxuICAgIHNoaXAuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIChlLCBpKSA9PiB7XG5cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ub3QtYXZhaWxhYmxlXCIpLmZvckVhY2goKGUpID0+IGUuY2xhc3NMaXN0LnJlbW92ZShcIm5vdC1hdmFpbGFibGVcIikpXG5cbiAgICAgICAgaWYoZHJhZ1NlbGVjdGlvbiA9PT0gLTEpIHJldHVyblxuXG4gICAgICAgIGxldCBwb3MxO1xuICAgICAgICBsZXQgcG9zMjtcbiAgICAgICAgbGV0IHBvcyA9IGAkeyAgZHJhZ1NlbGVjdGlvbn1gXG5cbiAgICAgICAgaWYoZHJhZ1NlbGVjdGlvbiA8IDEwKSB7XG4gICAgICAgICAgICBwb3MxID0gMDtcbiAgICAgICAgICAgIHBvczIgPSBkcmFnU2VsZWN0aW9uXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3MgPSBwb3Muc3BsaXQoXCJcIilcbiAgICAgICAgICAgIHBvczEgPSBwb3NbMF0gKiAxXG4gICAgICAgICAgICBwb3MyID0gcG9zWzFdICogMVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoZGlyID09PSBcImhvcml6b250YWxcIikgcG9zMiArPSBvZmZzZXRcbiAgICAgICAgaWYoZGlyID09PSBcInZcIikgcG9zMSArPSBvZmZzZXRcblxuICAgICAgICBpZihwb3MyIDwgMCkgcmV0dXJuXG5cbiAgICAgICAgaWYoc2hpcE5hbWUgPT09IFwiLnNoaXAtMVwiKXtcbiAgICAgICAgICAgIGlmKHBsYXllckJvYXJkLnBsYWNlU2hpcChwb3MxLCBwb3MyLCBkaXIsIGNyZWF0ZVNoaXAoMSkpID09PSBmYWxzZSkgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgIGlmKHNoaXBOYW1lID09PSBcIi5zaGlwLTJcIil7XG5cbiAgICAgICAgICAgIGlmKHBsYXllckJvYXJkLnBsYWNlU2hpcChwb3MxLCBwb3MyLCBkaXIsIGNyZWF0ZVNoaXAoMikpID09PSBmYWxzZSkgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYoc2hpcE5hbWUgPT09IFwiLnNoaXAtM1wiKSB7XG5cbiAgICAgICAgICAgIGlmKHBsYXllckJvYXJkLnBsYWNlU2hpcChwb3MxLCBwb3MyLCBkaXIsIGNyZWF0ZVNoaXAoMykpID09PSBmYWxzZSkgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYoc2hpcE5hbWUgPT09IFwiLnNoaXAtNFwiKSB7XG5cbiAgICAgICAgICAgIGlmKHBsYXllckJvYXJkLnBsYWNlU2hpcChwb3MxLCBwb3MyLCBkaXIsIGNyZWF0ZVNoaXAoNCkpID09PSBmYWxzZSkgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJQbGF5ZXJTaGlwcyhwbGF5ZXJCb2FyZClcblxuICAgICAgICBhbW91bnRMZWZ0IC09IDFcbiAgICAgICAgdG90YWxBbW91bnRTaGlwcysrXG5cbiAgICAgICAgaWYodG90YWxBbW91bnRTaGlwcyA9PT0gOCkgcGxheWVyQm9hcmQuaXNTdGFydEFsbG93ZWQuc2V0KHRydWUpXG4gICAgICAgIHNoaXAucGFyZW50Tm9kZS5maXJzdENoaWxkLnRleHRDb250ZW50ID0gYCR7YW1vdW50TGVmdH14YFxuICAgICAgICBpZihhbW91bnRMZWZ0ID09PSAwKSBzaGlwLnBhcmVudE5vZGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgfSlcblxuICAgIGNlbGxzLmZvckVhY2goKGUsIGkpID0+IHtcbiAgICAgICAgZS5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgZHJhZ1NlbGVjdGlvbiA9IGkgXG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdlbnRlclwiLCAoKSA9PiB7XG4gICAgICAgIGRyYWdTZWxlY3Rpb24gPSAtMVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VEaXIoZSkge1xuICAgICAgICBpZihkaXIgPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgICBkaXIgPSBcInZlcnRpY2FsXCJcbiAgICAgICAgICAgIGUudGFyZ2V0LnBhcmVudE5vZGUuY2xhc3NMaXN0LnRvZ2dsZShcInJvdGF0ZWRcIilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpciA9IFwiaG9yaXpvbnRhbFwiO1xuICAgICAgICAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QudG9nZ2xlKFwicm90YXRlZFwiKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQge3NoaXBEcmFnLCB0b3RhbEFtb3VudFNoaXBzfSIsImltcG9ydCBjcmVhdGVHYW1lQm9hcmQgZnJvbSBcIi4vZ2FtZWJvYXJkL2dhbWVib2FyZFwiXG5pbXBvcnQgY3JlYXRlU2hpcCBmcm9tIFwiLi9zaGlwL3NoaXBcIlxuaW1wb3J0IHsgYWlQbGF5LCBnZXRXYXNIaXQsIHNldFdhc0hpdCwgc3Vycm91bmRpbmdQb3MgfSBmcm9tIFwiLi9ib3RcIjtcbmltcG9ydCB7IHNoaXBEcmFnIH0gZnJvbSBcIi4vZHJhZy1hbmQtZHJvcFwiO1xuXG5jb25zdCByZW5kZXJBdHRhY2tzID0gKHBsYXllciwgY29sdW1uLCByb3csIGVuZW15Qm9hcmQpID0+IHtcbiAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgYC4ke3BsYXllcn0tYm9hcmQgPiAuY2VsbFtjb2x1bW49JyR7Y29sdW1ufSddW3Jvdz0nJHtyb3d9J11gXG4gICAgKVxuXG4gICAgaWYoZW5lbXlCb2FyZC5nZXRMb2NhdGlvbihjb2x1bW4sIHJvdyk/LmlzU2hpcCl7XG5cbiAgICAgICAgZW5lbXlCb2FyZC5nZXRMb2NhdGlvbihjb2x1bW4sIHJvdykuZG9tVGFyZ2V0cy5wdXNoKGNlbGwpXG4gICAgICAgIGlmKGVuZW15Qm9hcmQuZ2V0TG9jYXRpb24oY29sdW1uLCByb3cpLmlzU3VuaygpKXtcblxuICAgICAgICAgICAgZW5lbXlCb2FyZC5nZXRMb2NhdGlvbihjb2x1bW4sIHJvdykuZG9tVGFyZ2V0cy5mb3JFYWNoKChlKSA9PiBlLmNsYXNzTGlzdC5hZGQoJ3N1bmsnKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGxvY2F0aW9uID0gZW5lbXlCb2FyZC5nZXRMb2NhdGlvbihjb2x1bW4sIHJvdylcbiAgICBpZiAobG9jYXRpb24uaXNTaGlwKSB7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0JylcbiAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ21pc3MnKVxuICAgIH1cblxufVxuXG5jb25zdCBoYW5kbGVBdHRhY2sgPSAoY29sdW1uLCByb3csIGVuZW15Qm9hcmQsIHBsYXllcikgPT5cbiAgICBwbGF5ZXIuYXR0YWNrKGNvbHVtbiwgcm93LCBlbmVteUJvYXJkKVxuXG5jb25zdCBhdHRhY2tFbmVteUNlbGwgPSBhc3luYyAoY29sdW1uLCByb3csIGVuZW15Qm9hcmQsIHBsYXllckJvYXJkLCBwbGF5ZXIsIGVuZW15KSA9PiB7XG5cblxuICAgIGhhbmRsZUF0dGFjayhjb2x1bW4sIHJvdywgZW5lbXlCb2FyZCwgcGxheWVyKVxuICAgIHJlbmRlckF0dGFja3MoJ2VuZW15JywgY29sdW1uLCByb3csIGVuZW15Qm9hcmQpXG4gICAgYXdhaXQgZGVsYXkoNzAwKVxuICAgIHJldHVybiBlbmVteUJvYXJkLmNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rKCkgPyBjaGVja0lmR2FtZU92ZXIocGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpIDogYWlQbGF5KGZhbHNlLCBwbGF5ZXIsIGVuZW15LCB1bmRlZmluZWQsIHBsYXllckJvYXJkLCBlbmVteUJvYXJkKVxufVxuXG5jb25zdCBpc1NwYWNlQXJvdW5kSGl0ID0gKGNvbHVtbiwgcm93LCBwbGF5ZXJCb2FyZCkgPT4ge1xuXG4gICAgY29uc3QgbmV4dENvbHVtbiA9IHBsYXllckJvYXJkLmdldExvY2F0aW9uKGNvbHVtbiArIDEsIHJvdylcbiAgICBjb25zdCBwcmV2aW91c0NvbHVtbiA9IHBsYXllckJvYXJkLmdldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdylcbiAgICBjb25zdCBuZXh0Um93ID0gcGxheWVyQm9hcmQuZ2V0TG9jYXRpb24oY29sdW1uLCByb3cgKyAxKVxuICAgIGNvbnN0IHByZXZpb3VzUm93ID0gcGxheWVyQm9hcmQuZ2V0TG9jYXRpb24oY29sdW1uLCByb3cgLSAxKVxuXG4gICAgY29uc3Qgc3BhY2VzSGl0ID0gW11cblxuICAgIGlmKG5leHRDb2x1bW4gJiYgIW5leHRDb2x1bW4uaGFzQmVlbkhpdCl7XG4gICAgICAgIHNwYWNlc0hpdC5wdXNoKG5leHRDb2x1bW4pXG4gICAgfVxuICAgIGlmKHByZXZpb3VzQ29sdW1uICYmICFwcmV2aW91c0NvbHVtbi5oYXNCZWVuSGl0KXtcbiAgICAgICAgc3BhY2VzSGl0LnB1c2gocHJldmlvdXNDb2x1bW4pXG4gICAgfVxuICAgIGlmKG5leHRSb3cgJiYgIW5leHRSb3cuaGFzQmVlbkhpdCl7XG4gICAgICAgIHNwYWNlc0hpdC5wdXNoKG5leHRSb3cpXG4gICAgfVxuICAgIGlmKHByZXZpb3VzUm93ICYmICFwcmV2aW91c1Jvdy5oYXNCZWVuSGl0KXtcbiAgICAgICAgc3BhY2VzSGl0LnB1c2gocHJldmlvdXNSb3cpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNwYWNlc0hpdFxuXG59XG5cbmNvbnN0IHJhbmRvbURpcmVjdGlvbkF0dGFjayA9IChjb2x1bW4sIHJvdywgcGxheWVyQm9hcmQpID0+IHtcblxuICAgIGNvbnN0IHNwYWNlc0hpdCA9IGlzU3BhY2VBcm91bmRIaXQoY29sdW1uLCByb3csIHBsYXllckJvYXJkKVxuXG4gICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcGFjZXNIaXQubGVuZ3RoKVxuXG4gICAgaWYoIXNwYWNlc0hpdFtyYW5kb21JbmRleF0pIHJldHVybiByYW5kb21EaXJlY3Rpb25BdHRhY2soY29sdW1uLCByb3cgLCBwbGF5ZXJCb2FyZClcblxuICAgIHJldHVybiBzcGFjZXNIaXRbcmFuZG9tSW5kZXhdXG59XG5cbmNvbnN0IGlzUmFuZG9tQ29sdW1uR3JlYXRlclRoYW5DdXJyZW50Q29sdW1uID0gKGNvbHVtbiwgcmFuZG9tQ29sdW1uKSA9PiBcbiAgICByYW5kb21Db2x1bW4gPiBjb2x1bW5cblxuY29uc3QgaXNSYW5kb21Sb3dHcmVhdGVyVGhhbkN1cnJlbnRDb2x1bW4gPSAocm93LCByYW5kb21Sb3cpID0+IFxuICAgIHJhbmRvbVJvdyA+IHJvd1xuXG5jb25zdCBsaXN0T2ZSYW5kb21Db29yZGluYXRlcyA9IChjb2x1bW4sIHJvdywgcGxheWVyQm9hcmQpID0+IHtcblxuICAgICAgICBjb25zdCBsb2NhdGlvblByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIGxvY2F0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXJCb2FyZC5nZXRMb2NhdGlvbih0aGlzLmNvbHVtbiwgdGhpcy5yb3cpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b3AgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpLCB7XG4gICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICByb3c6IHJvdyAtIDEsXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShsb2NhdGlvblByb3RvdHlwZSksIHtcbiAgICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgICAgIHJvdzogcm93ICsgMSxcbiAgICAgICAgfSlcbiAgICAgICAgY29uc3QgcmlnaHQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpLCB7XG4gICAgICAgICAgICBjb2x1bW46IGNvbHVtbiArIDEsXG4gICAgICAgICAgICByb3csXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGxlZnQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpLCB7XG4gICAgICAgICAgICBjb2x1bW46IGNvbHVtbiAtIDEsXG4gICAgICAgICAgICByb3csXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXVxuXG4gICAgICAgIGRpcmVjdGlvbnMucHVzaCh0b3ApXG4gICAgICAgIGRpcmVjdGlvbnMucHVzaChib3R0b20pXG4gICAgICAgIGRpcmVjdGlvbnMucHVzaChyaWdodClcbiAgICAgICAgZGlyZWN0aW9ucy5wdXNoKGxlZnQpXG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbnNcbn1cblxuLy8gcmVuZGVycyBhdHRhY2sgZm9yIHAyIChBSSlcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJBdHRhY2tQMihwMSwgcDIsIHBvczEsIHBvczIsIHBsYXllckJvYXJkLCBlbmVteUJvYXJkKSB7XG4gIGxldCBpc1N1bmsgPSBmYWxzZTtcbiAgY29uc3QgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIGAucGxheWVyLWJvYXJkID4gLmNlbGxbY29sdW1uPScke3BvczF9J11bcm93PScke3BvczJ9J11gXG4gICAgKVxuXG4gIGNvbnN0IGF0dGFjayA9IHAyLmF0dGFjayhwb3MxLCBwb3MyLCBwbGF5ZXJCb2FyZCk7XG5cbiAgICBjb25zb2xlLmxvZyhwbGF5ZXJCb2FyZC5nZXRMb2NhdGlvbihwb3MxLCBwb3MyKSlcbiAgaWYgKGF0dGFjayA9PT0gXCJZb3UgaGF2ZSBhbHJlYWR5IGhpdCB0aGlzIHNwb3QhXCIpIHtcbiAgICBjb25zdCByZXBlYXQgPSB0cnVlO1xuICAgIGFpUGxheShyZXBlYXQsIHAxLCBwMiwgdW5kZWZpbmVkLCBwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZCk7XG4gIH1cbiAgaWYgKGF0dGFjayA9PT0gXCJJdCdzIGEgaGl0IVwiKSB7XG4gICAgc2V0V2FzSGl0KGZhbHNlKTtcbiAgICBlLmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xuICB9XG4gIGlmIChhdHRhY2sgPT09IFwiWW91IGhpdCBhIHNoaXAhXCIpIHtcbiAgICBzZXRXYXNIaXQodHJ1ZSwgdHJ1ZSwgcG9zMSwgcG9zMik7XG4gICAgZS5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xuICAgIHBsYXllckJvYXJkLmdldExvY2F0aW9uKHBvczEsIHBvczIpLmRvbVRhcmdldHMucHVzaChlKVxuICAgIC8vIGlmIHNoaXAgaXMgc3VuaywgYWRkIFwic3Vua1wiIGNsYXNzXG4gICAgaWYgKHBsYXllckJvYXJkLmdldExvY2F0aW9uKHBvczEsIHBvczIpLmlzU3VuaygpKSB7XG4gICAgICBwbGF5ZXJCb2FyZC5nZXRMb2NhdGlvbihwb3MxLCBwb3MyKS5kb21UYXJnZXRzLmZvckVhY2goKGUpID0+XG4gICAgICAgIGUuY2xhc3NMaXN0LmFkZChcInN1bmtcIilcbiAgICAgICk7XG4gICAgICBpc1N1bmsgPSB0cnVlO1xuICAgICAgaWYgKHBsYXllckJvYXJkLmNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rKCkgPT09IHRydWUpIHJldHVybiBjaGVja0lmR2FtZU92ZXIocGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpO1xuICAgIH1cbiAgICBhd2FpdCBkZWxheSgxMDAwKVxuICAgIHJldHVybiBhaVBsYXkoZmFsc2UsIHAxLCBwMiwgaXNTdW5rLCBwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZCk7XG4gIH1cblxuICAvLyBwMS5pc1R1cm4ocDIpOyAvLyBnaXZlcyB0dXJuIHRvIFAxXG59XG4vLyBodHRwczovL2pzbWFuaWZlc3QuY29tL3RoZS1wdWJsaXNoLXN1YnNjcmliZS1wYXR0ZXJuLWluLWphdmFzY3JpcHQvXG5cbmV4cG9ydCBjb25zdCBwdWJTdWIgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSB7fVxuXG4gICAgZnVuY3Rpb24gcHVibGlzaChldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHN1YnNjcmliZXJzW2V2ZW50TmFtZV0pKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyc1tldmVudE5hbWVdLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayhkYXRhKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3Vic2NyaWJlW2V2ZW50TmFtZV0pKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyc1tldmVudE5hbWVdID0gW11cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyc1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spXG4gICAgICAgIGNvbnN0IGluZGV4ID0gc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5sZW5ndGggLSAxXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXJzW2V2ZW50TmFtZV0uc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHB1Ymxpc2gsXG4gICAgICAgIHN1YnNjcmliZSxcbiAgICB9XG59XG5cbi8vIGNyZWF0ZXMgYSBkZWxheSB0byBiZSB1c2VkIGluIGFuIGFzeW5jIGZ1bmN0aW9uXG5mdW5jdGlvbiBkZWxheShkZWxheUluTXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByZXNvbHZlKDIpO1xuICAgIH0sIGRlbGF5SW5Ncyk7XG4gIH0pO1xufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyUGxheWVyU2hpcHMgPSAoeyBnZXRMb2NhdGlvbiB9KSA9PiB7XG4gICAgY29uc3QgcGxheWVyQm9hcmRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LnBsYXllci1ib2FyZCcpXG5cbiAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCAxMDsgY29sdW1uICs9IDEpIHtcbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsID0gcGxheWVyQm9hcmRBcmVhLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgYC5jZWxsOm50aC1jaGlsZCgke3JvdyAqIDEwICsgY29sdW1uICsgMX0pYFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHVtbicsIGNvbHVtbilcbiAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdyb3cnLCByb3cpXG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGNvbHVtbiwgcm93KVxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uLmlzU2hpcCkge1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnc2hpcCcpXG4gICAgICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3NoaXAtbmFtZScsIGxvY2F0aW9uLmdldE5hbWUoKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgY2hlY2tJZkdhbWVPdmVyID0gKHBsYXllckJvYXJkLCBlbmVteUJvYXJkKSA9PiB7XG4gICAgaWYgKHBsYXllckJvYXJkLmNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rKCkpIHtcbiAgICAgICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwnKVxuICAgICAgICBjb25zdCBtb2RhbFdpbm5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1jb250ZW50ID4gcCcpXG4gICAgICAgIGNvbnN0IHBsYXlBZ2FpbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAnLm1vZGFsLWNvbnRlbnQgPiBidXR0b24nXG4gICAgICAgIClcblxuICAgICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgICAgICBwbGF5QWdhaW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgICB9KVxuXG4gICAgICAgIG1vZGFsV2lubmVyLnRleHRDb250ZW50ID0gJ1lvdSBsb3NlISdcbiAgICB9XG4gICAgaWYgKGVuZW15Qm9hcmQuY2hlY2tJZkFsbFNoaXBzSGF2ZVN1bmsoKSkge1xuICAgICAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbCcpXG4gICAgICAgIGNvbnN0IG1vZGFsV2lubmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWNvbnRlbnQgPiBwJylcbiAgICAgICAgY29uc3QgcGxheUFnYWluQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICcubW9kYWwtY29udGVudCA+IGJ1dHRvbidcbiAgICAgICAgKVxuXG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgICAgIG1vZGFsV2lubmVyLnRleHRDb250ZW50ID0gJ1lvdSB3aW4hJ1xuICAgICAgICBwbGF5QWdhaW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURyYWdBbmREcm9wRmxlZXQocGxheWVyQm9hcmQpIHtcbiAgICByZW5kZXJTaGlwU2VsZWN0KDEsIDEpXG4gICAgcmVuZGVyU2hpcFNlbGVjdCgyLCAyKVxuICAgIHJlbmRlclNoaXBTZWxlY3QoMywgMylcbiAgICByZW5kZXJTaGlwU2VsZWN0KDQsIDQpXG5cbiAgICBmdW5jdGlvbiByZW5kZXJTaGlwU2VsZWN0KGksIGxlbmd0aCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucGxheWVyOm50aC1jaGlsZCgxKWApXG4gICAgICAgIGNvbnN0IHNoaXBDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBzaGlwQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NoaXAtY29udGFpbmVyJylcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNoaXBDb250YWluZXIpXG5cbiAgICAgICAgY29uc3Qgc2hpcEluZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKVxuICAgICAgICBzaGlwSW5mby5jbGFzc0xpc3QuYWRkKGBpbmZvLSR7aX1gKVxuICAgICAgICBzaGlwSW5mby50ZXh0Q29udGVudCA9IFwiMnhcIlxuICAgICAgICBzaGlwQ29udGFpbmVyLmFwcGVuZENoaWxkKHNoaXBJbmZvKVxuXG4gICAgICAgIGNvbnN0IHNoaXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgICAgIHNoaXAuY2xhc3NMaXN0LmFkZChcInNoaXBcIilcbiAgICAgICAgc2hpcC5jbGFzc0xpc3QuYWRkKGBzaGlwLSR7aX1gKVxuICAgICAgICBzaGlwLnNldEF0dHJpYnV0ZShcImRyYWdnYWJsZVwiLCBcInRydWVcIilcbiAgICAgICAgc2hpcENvbnRhaW5lci5hcHBlbmRDaGlsZChzaGlwKVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImNlbGxcIilcbiAgICAgICAgICAgIHNoaXAuYXBwZW5kQ2hpbGQoY2VsbClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvcihsZXQgaSA9IDE7IGkgPCA1OyBpKyspIHNoaXBEcmFnKGAuc2hpcC0ke2l9YCwgcGxheWVyQm9hcmQpXG59XG5cbmV4cG9ydCBjb25zdCBhZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQgPSAoXG4gICAgcGxheWVyQm9hcmQsXG4gICAgZW5lbXlCb2FyZCxcbiAgICBwbGF5ZXIsXG4gICAgZW5lbXksXG4gICAgcHNcbikgPT4ge1xuICAgIGNvbnN0IGVuZW15Qm9hcmRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LmVuZW15LWJvYXJkJylcblxuICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IDEwOyBjb2x1bW4gKz0gMSkge1xuICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgIC8vIENyZWRpdGluZyBmb3JtdWxhIHRvIGNhbGN1bGF0ZSBudGgtY2hpbGQgdXNpbmcgbmVzdGVkIGxvb3A6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg4NzI2NjIvbWF0aC10by1kZXRlcm1pbmUtaXRlbS1pbmRleC1iYXNlZC1vbi1jb2wtcm93LXNlbGVjdGlvbi1pbi1ncmlkXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gZW5lbXlCb2FyZEFyZWEucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICBgLmNlbGw6bnRoLWNoaWxkKCR7cm93ICogMTAgKyBjb2x1bW4gKyAxfSlgXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnY29sdW1uJywgY29sdW1uKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3JvdycsIHJvdylcblxuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcy5wdWJsaXNoKCdjbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJCb2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15Qm9hcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNvbnN0IGNsZWFyQm9hcmRET00gPSAoKSA9PiB7XG4gICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxheWVyLWJvYXJkID4gLmNlbGwnKVxuXG4gICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdzaGlwJylcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdoaXQnKVxuICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ21pc3MnKVxuICAgIH0pXG5cblxuXG59XG5cbmV4cG9ydCBjb25zdCByYW5kb21pemVMaXN0ZW5lciA9IChnYW1lQm9hcmQpID0+IHtcblxuICAgIGdhbWVCb2FyZC5jbGVhckJvYXJkKClcbiAgICBjbGVhckJvYXJkRE9NKClcblxuICAgIGNvbnN0IHJhbmRvbVBvc3NpYmlsaXR5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNClcbiAgICBzd2l0Y2gocmFuZG9tUG9zc2liaWxpdHkpe1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoOSwgMSwgJ3ZlcnRpY2FsJywgY3JlYXRlU2hpcCg1KSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCgwLCAzLCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoMykpXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoMywgNiwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDIpKVxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDYsIDUsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgzKSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCgzLCA5LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNCkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDAsIDIsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCg1KSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCg0LCA1LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoMykpXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoOCwgNywgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDIpKVxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDUsIDksICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgzKSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCg2LCAzLCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNCkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDUsIDEsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCg1KSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCgzLCAzLCAndmVydGljYWwnLCBjcmVhdGVTaGlwKDMpKVxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDAsIDAsICd2ZXJ0aWNhbCcsIGNyZWF0ZVNoaXAoMikpXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoNiwgNSwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDMpKVxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDUsIDksICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCg0KSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCgwLCAwLCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNSkpXG4gICAgICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDMsIDQsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgzKSlcbiAgICAgICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoNiwgNywgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDIpKVxuICAgICAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCg5LCAxLCAndmVydGljYWwnLCBjcmVhdGVTaGlwKDMpKVxuICAgICAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCg1LCA5LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNCkpXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZW5kZXJQbGF5ZXJTaGlwcyhnYW1lQm9hcmQpXG5cbn1cblxuZXhwb3J0IGNvbnN0IGF0dGFjayA9ICh7XG4gICAgY2VsbCxcbiAgICBjb2x1bW4sXG4gICAgcm93LFxuICAgIHBsYXllckJvYXJkLFxuICAgIGVuZW15Qm9hcmQsXG4gICAgcGxheWVyLFxuICAgIGVuZW15LFxufSkgPT4ge1xuICAgIC8vIGh1bWFuIHBsYXllciBhdHRhY2tpbmcgY29tcHV0ZXJcbiAgICBhdHRhY2tFbmVteUNlbGwoY29sdW1uLCByb3csIGVuZW15Qm9hcmQsIHBsYXllckJvYXJkLCBwbGF5ZXIsIGVuZW15KVxuICAgIC8vIGNvbXB1dGVyIGF0dGFja2luZyBodW1hblxuICAgIC8vIGNvbnN0IHsgZWxlbWVudENvbHVtbiwgZWxlbWVudFJvdyB9ID0gcGxheWVyQm9hcmQubWFrZVJhbmRvbUNvb3JkaW5hdGVzKClcbiAgICAvLyByZW5kZXJBdHRhY2tQMihwbGF5ZXIsIGVuZW15LCBlbGVtZW50Q29sdW1uLCBlbGVtZW50Um93LCBwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZClcbiAgICAvLyBhaVBsYXkoZmFsc2UsIHBsYXllciwgZW5lbXksIHVuZGVmaW5lZCwgcGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpXG59XG4iLCJpbXBvcnQgeyBhZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQsIHJlbmRlclBsYXllclNoaXBzLHB1YlN1YiwgcmFuZG9taXplTGlzdGVuZXIsIGF0dGFjaywgY3JlYXRlRHJhZ0FuZERyb3BGbGVldH0gZnJvbSAnLi9kb20nXG5cbmltcG9ydCBjcmVhdGVHYW1lQm9hcmQgZnJvbSAnLi9nYW1lYm9hcmQvZ2FtZWJvYXJkJ1xuaW1wb3J0IGNyZWF0ZVNoaXAgZnJvbSAnLi9zaGlwL3NoaXAnXG5pbXBvcnQgY3JlYXRlUGxheWVyIGZyb20gJy4vcGxheWVyL3BsYXllcidcblxuY29uc3QgcGxheWVyQm9hcmQgPSBjcmVhdGVHYW1lQm9hcmQoKVxuY29uc3QgZW5lbXlCb2FyZCA9IGNyZWF0ZUdhbWVCb2FyZCgpXG5jb25zdCBwbGF5ZXIgPSBjcmVhdGVQbGF5ZXIoKVxuY29uc3QgY29tcHV0ZXIgPSBjcmVhdGVQbGF5ZXIoKVxuXG5jb25zdCByYW5kb21pemVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24ucmFuZG9taXplJylcblxucmFuZG9taXplQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXG4gICAgcmFuZG9taXplTGlzdGVuZXIoZW5lbXlCb2FyZClcbn0pXG5cbmNyZWF0ZURyYWdBbmREcm9wRmxlZXQocGxheWVyQm9hcmQpXG5cbmVuZW15Qm9hcmQucGxhY2VTaGlwKDAsIDAsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCg1KSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDMsIDQsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgzKSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDYsIDcsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgyKSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDksIDEsICd2ZXJ0aWNhbCcsIGNyZWF0ZVNoaXAoMykpXG5lbmVteUJvYXJkLnBsYWNlU2hpcCg1LCA5LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNCkpXG5cbmNvbnN0IHBzID0gcHViU3ViKClcblxuYWRkTGlzdGVuZXJzVG9FbmVteUJvYXJkKHBsYXllckJvYXJkLCBlbmVteUJvYXJkLCBwbGF5ZXIsIGNvbXB1dGVyLCBwcylcblxucHMuc3Vic2NyaWJlKCdjbGljaycsIGF0dGFjaylcblxucmVuZGVyUGxheWVyU2hpcHMocGxheWVyQm9hcmQpIl0sIm5hbWVzIjpbImNyZWF0ZVNoaXAiLCJtb2R1bGUiLCJleHBvcnRzIiwiZW1wdHlDZWxsIiwiaGFzQmVlbkhpdCIsImlzU2hpcCIsIm9mZkxpbWl0cyIsImlzU3RhcnRBbGxvd2VkIiwiaW5pdGlhbGl6ZUJvYXJkIiwiZ2FtZUJvYXJkIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiY29sdW1uIiwicm93Iiwic2hpcHMiLCJnZXRMb2NhdGlvbiIsInNldExvY2F0aW9uIiwic2hpcCIsIk9iamVjdCIsImFzc2lnbiIsImNyZWF0ZU9mZkxpbWl0TG9jYXRpb24iLCJ1bmRlZmluZWQiLCJsb2NhdGlvbiIsImFkZE9mZkxpbWl0QXJlYUZvclNoaXBzIiwiY2hlY2tJZkxvY2F0aW9uSXNBU2hpcE9yT2ZmTGltaXRzIiwiZGlyZWN0aW9uIiwic2hpcExlbmd0aCIsImkiLCJwbGFjZVNoaXAiLCJnZXRMZW5ndGgiLCJsZW5ndGgiLCJjaGVja0lmUm93Q29vcmRpbmF0ZUlzVmFsaWQiLCJwb3NpdGlvbiIsImFkZE9mZkxpbWl0QXJlYUZvclZlcnRpY2FsbHlQb3NpdGlvbmVkU2hpcCIsImNoZWNrSWZDb2x1bW5Db29yZGluYXRlSXNWYWxpZCIsImFkZE9mZkxpbWl0QXJlYUZvckhvcml6b250YWxseVBvc2l0aW9uZWRTaGlwIiwibWFrZVJhbmRvbUNvb3JkaW5hdGVzIiwicmFuZG9tRGlyZWN0aW9uIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZG9tTG9jYXRpb24iLCJmbGF0dGVuZWRHYW1lQm9hcmQiLCJmbGF0IiwiZm9yRWFjaCIsImVsZW1lbnQiLCJhdmFpbGFiaWxpdHkiLCJhdmFpbGFibGVTcGFjZXMiLCJlbGVtZW50Q29sdW1uIiwiZWxlbWVudFJvdyIsInJhbmRvbVNoaXAiLCJwb3MxIiwicG9zMiIsImRpciIsInJvdW5kIiwiY2xlYXJCb2FyZCIsImNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCIsImZpbHRlciIsInJlY2VpdmVBdHRhY2siLCJjaGVja0lmQWxsU2hpcHNIYXZlU3VuayIsImhhdmVBbGxTaGlwc1N1bmsiLCJqIiwiaXNTdW5rIiwicmFuZG9tbHlQbGFjZVNoaXBzIiwic2hpcERldGFpbHMiLCJyYW5kb21Db2x1bW4iLCJyYW5kb21Sb3ciLCJwdXNoIiwicmFuZG9tRmxlZXQiLCJnZXRCb2FyZCIsImdldCIsInNldCIsInZhbHVlIiwibmFtZSIsImdldE5hbWUiLCJhdHRhY2siLCJnZXRTdGF0dXMiLCJpbmNsdWRlcyIsImhpdCIsInJhbmRvbVBvcyIsInN0YXR1cyIsImV2ZXJ5IiwiZG9tVGFyZ2V0cyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXR0YWNrRGlyZWN0aW9uIiwid2FzSGl0IiwibGFzdEhpdFBvcyIsImZpcnN0SGl0UG9zIiwic2Vjb25kSGl0UG9zIiwic3Vycm91bmRpbmdQb3MiLCJzZXRXYXNIaXQiLCJzdGF0IiwicmVnaXN0ZXJTdXJyb3VuZGluZ1BvcyIsImFpUGxheSIsInJlcGVhdCIsInAxIiwicDIiLCJwbGF5ZXJCb2FyZCIsImVuZW15Qm9hcmQiLCJwb3MiLCJyZW5kZXJBdHRhY2tQMiIsIm5ld1BvcyIsImF0dGFja1Rvd2FyZHMiLCJwb3AiLCJ0b3RhbEFtb3VudFNoaXBzIiwic2hpcERyYWciLCJzaGlwTmFtZSIsImNvbnNvbGUiLCJsb2ciLCJhbW91bnRMZWZ0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYm9keSIsImNlbGxzIiwicXVlcnlTZWxlY3RvckFsbCIsImNoaWxkIiwiY2hpbGROb2RlcyIsImRyYWdTZWxlY3Rpb24iLCJvZmZzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInRhcmdldCIsInBhcmVudE5vZGUiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJjaGFuZ2VEaXIiLCJyZW1vdmUiLCJzcGxpdCIsInJlbmRlclBsYXllclNoaXBzIiwiZmlyc3RDaGlsZCIsInRleHRDb250ZW50Iiwic3R5bGUiLCJkaXNwbGF5IiwicHJldmVudERlZmF1bHQiLCJhc3luYyIsImFkZCIsImNoZWNrSWZHYW1lT3ZlciIsImRlbGF5IiwiZGVsYXlJbk1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwicGxheWVyQm9hcmRBcmVhIiwiY2VsbCIsInNldEF0dHJpYnV0ZSIsIm1vZGFsIiwibW9kYWxXaW5uZXIiLCJwbGF5QWdhaW5CdXR0b24iLCJyZWxvYWQiLCJjb21wdXRlciIsInJhbmRvbWl6ZUxpc3RlbmVyIiwicmVuZGVyU2hpcFNlbGVjdCIsImNvbnRhaW5lciIsInNoaXBDb250YWluZXIiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJzaGlwSW5mbyIsImNyZWF0ZURyYWdBbmREcm9wRmxlZXQiLCJwcyIsInN1YnNjcmliZXJzIiwicHVibGlzaCIsImV2ZW50TmFtZSIsImRhdGEiLCJpc0FycmF5IiwiY2FsbGJhY2siLCJzdWJzY3JpYmUiLCJpbmRleCIsInVuc3Vic2NyaWJlIiwic3BsaWNlIiwicHViU3ViIiwicGxheWVyIiwiZW5lbXkiLCJlbmVteUJvYXJkQXJlYSIsIm9uY2UiLCJhZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQiLCJoYW5kbGVBdHRhY2siLCJyZW5kZXJBdHRhY2tzIiwiYXR0YWNrRW5lbXlDZWxsIl0sInNvdXJjZVJvb3QiOiIifQ==