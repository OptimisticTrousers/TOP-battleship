(()=>{var t={653:(t,e,r)=>{const o=r(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=(t,r)=>e?.[t]?.[r],i=(r,o,n=(()=>Object.assign(t,{offLimits:!0}))())=>(void 0===e?.[r]?.[o]||(e[r][o]=n),!0),a=(t,e)=>{i(t-1,e-1),i(t,e-1)},s=(t,r)=>t>=0&&t+r-1<e.length,l=(t,r)=>t>=0&&t+r-1<e.length,c=(t,e,r,o)=>{const n=o.getLength();if("vertical"===r){if(l(e,n)){for(let r=0;r<n;r+=1)i(t,e+r,o),i(t+1,e+r),i(t-1,e+r);return((t,e,r)=>{a(t,e),i(t,e+r),i(t+1,e+r),i(t-1,e+r),i(t+1,e-1)})(t,e,n),!0}}else if("horizontal"===r&&s(t,n)){for(let r=0;r<n;r+=1)i(t+r,e,o),i(t+r,e+1),i(t+r,e-1);return((t,e,r)=>{a(t,e),i(t+r,e),i(t-1,e+1),i(t+r,e+1),i(t+r,e-1)})(t,e,n),!0}return!1},h=t=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal",r=Math.floor(10*Math.random()),o=Math.floor(10*Math.random()),i=n(r,o);return s(r,t)&&l(o,t)?!0!==i.isShip&&!0!==i.offLimits?h(t):{randomColumn:r,randomRow:o,randomDirection:e}:h(t)};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:c,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const o=r[e],{randomColumn:i,randomRow:a,randomDirection:s}=h(o),l=n(i,a);!0===l.isShip||!0===l.offLimits||!1===c(i,a,s,o)?e-=1:t.push({randomColumn:i,randomRow:a,randomDirection:s})}return t},makeRandomCoordinates:h}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:r,receiveAttack:o})=>{const n=r(t,e);return!1===n.hasBeenHit||n.isShip&&n.getStatus().includes("unhit")?(o(t,e),"It's a hit!"):"You have already hit this spot!"}})},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,hasBeenHit:!1,isShip:!0}}}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,r,o)=>o.attack(t,e,r),e=(r,o,n)=>{const{randomColumn:i,randomRow:a}=o.makeRandomCoordinates();return"You have already hit this spot!"===t(i,a,o,n)?e(r,o,n):{randomColumn:i,randomRow:a}};var o=r(653),n=r.n(o),i=r(585),a=r.n(i),s=r(61),l=r.n(s);const c=n()(),h=n()(),u=l()(),d=l()();c.randomlyPlaceShips(),h.placeShip(0,0,"horizontal",a()(5)),h.placeShip(3,4,"horizontal",a()(3)),h.placeShip(6,7,"horizontal",a()(2)),h.placeShip(9,1,"vertical",a()(3)),h.placeShip(5,9,"horizontal",a()(4));const m=(()=>{const t={};return{publish:function(e,r){Array.isArray(t[e])&&t[e].forEach((t=>{t(r)}))},subscribe:function e(r,o){Array.isArray(e[r])||(t[r]=[]),t[r].push(o);const n=t[r].length-1;return{unsubscribe(){t[r].splice(n,1)}}}}})();((t,e,r,o,n)=>{const i=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let s=0;s<10;s+=1){const l=i.querySelector(`.cell:nth-child(${10*s+a+1})`);l.setAttribute("column",a),l.setAttribute("row",s),l.addEventListener("click",(()=>{n.publish("click",{cell:l,column:a,row:s,playerBoard:t,enemyBoard:e,player:r,enemy:o})}),{once:!0})}})(c,h,u,d,m),m.subscribe("click",(({cell:r,column:o,row:n,playerBoard:i,enemyBoard:a,player:s,enemy:l})=>{((e,r,o,n,i)=>{n.getLocation(r,o).isShip?e.classList.add("hit"):e.classList.add("miss"),t(r,o,n,i)})(r,o,n,a,s);const{randomColumn:c,randomRow:h}=e(r,i,l);((t,e)=>{const r=document.querySelector(`.cell[column='${t}'][row='${e}']`);r.classList.contains("ship")?r.classList.add("hit"):r.classList.add("miss")})(c,h)})),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=e.querySelector(`.cell:nth-child(${10*o+r+1})`);n.setAttribute("column",r),n.setAttribute("row",o),t(o,r).isShip&&n.classList.add("ship")}})(c)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,