(()=>{var e={653:(e,t,o)=>{const r=o(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1};let t=!1;const o=()=>{const t=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)t[o][r]={...e,column:o,row:r};return t};let i=o();r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat");const a=(e,t)=>i?.[e]?.[t],n=(t,o,r=(()=>Object.assign(e,{offLimits:!0}))())=>{if(void 0===i?.[t]?.[o])return!0;const a=i[t][o];return i[t][o]={...a,...r},!0},l=(e,t)=>{n(e-1,t-1),n(e,t-1)},c=(e,t,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=a(e,t+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}if("horizontal"===o)for(let o=0;o<r;o++){const r=a(e+o,t);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}return!1},s=(e,t,o,r)=>{if(i[e][t].isShip||i[e][t].offLimits)return!1;const s=r.getLength();if(c(a(e,t)))return!1;if("vertical"===o){if(((e,t)=>e>=0&&e+t-1<i.length)(t,s)){for(let o=0;o<s;o+=1)n(e,t+o,{...r,position:o}),n(e+1,t+o),n(e-1,t+o);return((e,t,o)=>{l(e,t),n(e,t+o),n(e+1,t+o),n(e-1,t+o),console.log(e-1,t+o),n(e+1,t-1)})(e,t,s),!0}}else if("horizontal"===o&&((e,t)=>e>=0&&e+t-1<i.length)(e,s)){for(let o=0;o<s;o+=1)n(e+o,t,{...r,position:o}),n(e+o,t+1),n(e+o,t-1);return((e,t,o)=>{l(e,t),n(e+o,t),n(e-1,t+1),n(e+o,t+1),n(e+o,t-1),n(e-1,t)})(e,t,s),!0}return!1},d=()=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal",t=Math.floor(100*Math.random()),o=(()=>{const e=[...i.flat()];return e.forEach((e=>{!0===e.hasBeenHit?e.availability=!1:e.availability=!0})),e})()[t];return!1===o.availability?d():{elementColumn:o.column,elementRow:o.row,randomDirection:e}};let h=e=>{let t=Math.floor(10*Math.random()),o=Math.floor(10*Math.random()),i=Math.round(Math.random());return(0!==i||(i="horizontal",0!=s(t,o,i,r(e))))&&(1!==i||(i="vertical",0!=s(t,o,i,r(e))))&&void 0};return{clearBoard:()=>{i=o()},checkIfLocationIsAShipOrOffLimits:c,checkIfOffLimitZoneWasCorrectlyImplemented:e=>i.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:a,receiveAttack:(e,t)=>{i[e][t].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let e=!0;for(let t=0;t<10;t++)for(let o=0;o<10;o++){const r=a(t,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){e=!1;break}}return e},placeShip:s,randomlyPlaceShips:()=>{switch(i.clearBoard(),clearBoardDOM(),Math.floor(4*Math.random())){case 0:i.placeShip(9,1,"vertical",r(5)),i.placeShip(0,3,"horizontal",r(3)),i.placeShip(3,6,"horizontal",r(2)),i.placeShip(6,5,"horizontal",r(3)),i.placeShip(3,9,"horizontal",r(4));break;case 1:i.placeShip(0,2,"horizontal",r(5)),i.placeShip(4,5,"horizontal",r(3)),i.placeShip(8,7,"horizontal",r(2)),i.placeShip(5,9,"horizontal",r(3)),i.placeShip(6,3,"horizontal",r(4));break;case 2:i.placeShip(5,1,"horizontal",r(5)),i.placeShip(3,3,"vertical",r(3)),i.placeShip(0,0,"vertical",r(2)),i.placeShip(6,5,"horizontal",r(3)),i.placeShip(5,9,"horizontal",r(4));break;default:i.placeShip(0,0,"horizontal",r(5)),i.placeShip(3,4,"horizontal",r(3)),i.placeShip(6,7,"horizontal",r(2)),i.placeShip(9,1,"vertical",r(3)),i.placeShip(5,9,"horizontal",r(4))}},makeRandomCoordinates:d,checkIfBoardHasBeenFullyPopulated:()=>{const e=i.flat();let t=0;return e.forEach((e=>{e.isShip&&t++})),20===t},randomFleet:()=>{for(let e=0;e<2;)0!=h(1)&&e++;for(let e=0;e<2;)0!=h(2)&&e++;for(let e=0;e<2;)0!=h(3)&&e++;for(let e=0;e<2;)0!=h(4)&&e++;t=!0},gameBoard:i,isStartAllowed:{get:function(){return t},set:function(e){t=e}}}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:o,receiveAttack:r})=>{const i=o(e,t);return!1===i.hasBeenHit||i.isShip&&!1===i.getStatus().includes("unhit")?(r(e,t),i.hit?(i.hit(i.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:e=>{e.exports=(e,t="ship")=>{const o=Array(e).fill("unhit");return{getName:()=>t,getLength:()=>o.length,isSunk:()=>o.every((e=>"hit"===e)),hit:t=>{t<e&&(o[t]="hit")},getStatus:()=>o,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},t={};function o(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=o(653),t=o.n(e),r=o(585),i=o.n(r);let a,n=!1,l=!1,c=[],s=[],d=[],h=[];function u(e,t,o,r){n=e,void 0!==t&&(l=t),void 0!==o&&(c=[o,r]),0==s.length&&void 0!==o?s=[o,r]:0!==s.length&&0==d.length&&void 0!==o&&(d=[o,r])}function p(e,t){return h=[],0!==t&&h.push([e,t-1]),9!==t&&h.push([e,t+1]),0!==e&&h.push([e-1,t]),9!==e&&h.push([e+1,t]),h}function f(e,t,o,r,i,u){let f;if(!0===r&&(c=[],s=[],d=[],h=[],n=!1,l=!1,a=""),!l&&!n)return f=t.randomPos(),v(t,o,f[0],f[1],i,u);if(0!==d.length&&n&&!e){let e;if(s[0]==d[0]-1&&(e=m("down")),s[0]==d[0]+1&&(e=m("up")),s[1]==d[1]-1&&(e=m("right")),s[1]==d[1]+1&&(e=m("left")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return v(t,o,e[0],e[1],i,u)}else if(0!==d.length&&l&&!n){let e;if(c=s,d=[],"up"===a&&(e=m("down")),"down"===a&&(e=m("up")),"right"===a&&(e=m("left")),"left"===a&&(e=m("right")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return v(t,o,e[0],e[1],i,u)}else if(l){0==h.length&&p(c[0],c[1]),0==h.length&&1==l&&p(s[0],s[1]);const e=h.pop();return v(t,o,e[0],e[1],i,u)}}function m(e){return"left"===e?(a="left",[c[0],c[1]-1]):"right"===e?(a="right",[c[0],c[1]+1]):"down"===e?(a="down",[c[0]+1,c[1]]):"up"===e?(a="up",[c[0]-1,c[1]]):void 0}let S=0;function y(e,t){let o=2;const r=document.querySelector(e),a=document.querySelector("body"),n=document.querySelectorAll(".player-board > .cell"),l=r.childNodes;let c,s,d="horizontal";l[0]&&l[0].addEventListener("mouseenter",(()=>s=0)),l[1]&&l[1].addEventListener("mouseenter",(()=>s=-1)),l[2]&&l[2].addEventListener("mouseenter",(()=>s=-2)),l[3]&&l[3].addEventListener("mouseenter",(()=>s=-3)),r.addEventListener("click",(e=>function(e){"horizontal"===d?(d="vertical",e.target.parentNode.classList.toggle("rotated")):(d="horizontal",e.target.parentNode.classList.toggle("rotated"))}(e))),r.addEventListener("dragstart",(e=>{for(let e=0;e<10;e++)t.gameBoard[e].forEach(((e,t)=>{(e.offLimits||e.isShip)&&document.querySelector(`.player-board > .cell[column='${e.column}'][row='${e.row}']`).classList.toggle("not-available")}))})),r.addEventListener("dragend",((a,n)=>{if(document.querySelectorAll(".not-available").forEach((e=>e.classList.remove("not-available"))),-1===c)return;let l,h,u=`${c}`;c<10?(l=0,h=c):(u=u.split(""),l=1*u[0],h=1*u[1]),"horizontal"===d&&(h+=s),"vertical"===d&&(l+=s),h<0||".ship-1"===e&&!1===t.placeShip(h,l,d,i()(1))||".ship-2"===e&&!1===t.placeShip(h,l,d,i()(2))||".ship-3"===e&&!1===t.placeShip(h,l,d,i()(3))||".ship-4"===e&&!1===t.placeShip(h,l,d,i()(4))||(L(t),o-=1,S++,8===S&&t.isStartAllowed.set(!0),r.parentNode.firstChild.textContent=`${o}x`,0===o&&(r.parentNode.style.display="none"),!t.checkIfBoardHasBeenFullyPopulated())||(document.querySelector("body > main > div.player > div:nth-child(4)").style.display="none",document.querySelector(".randomize").style.display="none",t.isStartAllowed.set(!0))})),n.forEach(((e,t)=>{e.addEventListener("dragover",(e=>{e.preventDefault(),c=t}))})),a.addEventListener("dragenter",(()=>{c=-1}))}async function v(e,t,o,r,i,a){let n=!1;const l=document.querySelector(`.player-board > .cell[column='${o}'][row='${r}']`),c=t.attack(o,r,i);if("You have already hit this spot!"===c&&f(!0,e,t,void 0,i,a),"It's a hit!"===c&&(u(!1),l.classList.add("miss")),"You hit a ship!"===c)return u(!0,!0,o,r),l.classList.add("hit"),i.getLocation(o,r).domTargets.push(l),i.getLocation(o,r).isSunk()&&(i.getLocation(o,r).domTargets.forEach((e=>e.classList.add("sunk"))),n=!0,!0===i.checkIfAllShipsHaveSunk())?b(i,a):(await g(1e3),f(!1,e,t,n,i,a))}function g(e){return new Promise((t=>{setTimeout((()=>{t(2)}),e)}))}const L=({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const i=t.querySelector(`.cell:nth-child(${10*r+o+1})`);i.setAttribute("column",o),i.setAttribute("row",r);const a=e(o,r);a.isShip&&(i.classList.add("ship"),i.setAttribute("ship-name",a.getName()))}},b=(e,t)=>{if(e.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",o.addEventListener("click",(()=>{location.reload()})),t.textContent="You lose!"}if(t.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",t.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}};var k=o(61),z=o.n(k);const A=t()(),E=t()(),w=z()(),q=z()();document.querySelector("button.randomize").addEventListener("click",(()=>{A.randomlyPlaceShips(),document.querySelectorAll(".player-board > .cell").forEach((e=>{e.classList.remove("ship"),e.classList.remove("hit"),e.classList.remove("miss")}))})),document.querySelector("button.reset").addEventListener("click",(()=>{location.reload()})),function(e){function t(e,t){const o=document.querySelector("body > main > div.player > div:nth-child(4)"),r=document.createElement("div");r.classList.add("ship-container"),o.appendChild(r);const i=document.createElement("span");i.classList.add(`info-${e}`),i.textContent="2x",r.appendChild(i);const a=document.createElement("div");a.classList.add("ship"),a.classList.add(`ship-${e}`),a.setAttribute("draggable","true"),r.appendChild(a);for(let e=0;e<t;e++){const e=document.createElement("div");e.classList.add("cell"),a.appendChild(e)}}t(1,1),t(2,2),t(3,3),t(4,4);for(let t=1;t<5;t++)y(`.ship-${t}`,e)}(A),E.placeShip(0,0,"horizontal",i()(5)),E.placeShip(3,4,"horizontal",i()(3)),E.placeShip(6,7,"horizontal",i()(2)),E.placeShip(9,1,"vertical",i()(3)),E.placeShip(5,9,"horizontal",i()(4));const B=(()=>{const e={};return{publish:function(t,o){Array.isArray(e[t])&&e[t].forEach((e=>{e(o)}))},subscribe:function t(o,r){Array.isArray(t[o])||(e[o]=[]),e[o].push(r);const i=e[o].length-1;return{unsubscribe(){e[o].splice(i,1)}}}}})();((e,t,o,r,i)=>{const a=document.querySelector("div.enemy-board");for(let n=0;n<10;n+=1)for(let l=0;l<10;l+=1){const c=a.querySelector(`.cell:nth-child(${10*l+n+1})`);c.setAttribute("column",n),c.setAttribute("row",l),c.addEventListener("click",(()=>{!1!==e.isStartAllowed.get()&&i.publish("click",{cell:c,column:n,row:l,playerBoard:e,enemyBoard:t,player:o,enemy:r})}),{once:!0})}})(A,E,w,q,B),B.subscribe("click",(({cell:e,column:t,row:o,playerBoard:r,enemyBoard:i,player:a,enemy:n})=>{(async(e,t,o,r,i,a)=>{((e,t,o,r)=>{r.attack(e,t,o)})(e,t,o,i),((e,t,o,r)=>{const i=document.querySelector(`.enemy-board > .cell[column='${t}'][row='${o}']`);r.getLocation(t,o)?.isShip&&(r.getLocation(t,o).domTargets.push(i),r.getLocation(t,o).isSunk()&&r.getLocation(t,o).domTargets.forEach((e=>e.classList.add("sunk")))),r.getLocation(t,o).isShip?i.classList.add("hit"):i.classList.add("miss")})(0,e,t,o),await g(700),o.checkIfAllShipsHaveSunk()?b(r,o):f(!1,i,a,void 0,r,o)})(t,o,i,r,a,n)})),L(A)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,