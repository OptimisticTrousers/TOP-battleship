(()=>{var t={653:(t,e,a)=>{const o=a(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1};let e=!1;const a=()=>{const e=Array(10).fill().map((()=>Array(10).fill()));for(let a=0;a<10;a+=1)for(let o=0;o<10;o+=1)e[a][o]={...t,column:a,row:o};return e};let r=a();const n=()=>{r=a()},i=(t,e)=>r?.[t]?.[e],l=(e,a,o=(()=>Object.assign(t,{offLimits:!0}))())=>{if(void 0===r?.[e]?.[a])return!0;const n=r[e][a];return r[e][a]={...n,...o},!0},s=(t,e)=>{l(t-1,e-1),l(t,e-1)},c=(t,e,a,o)=>{if("vertical"===a)for(let a=0;a<o;a+=1){const o=i(t,e+a);if(o&&!0===o.isShip&&!0===o.offLimits)return!0}if("horizontal"===a)for(let a=0;a<o;a+=1){const o=i(t+a,e);if(o&&!0===o.isShip&&!0===o.offLimits)return!0}return!1},h=(t,e,a,o)=>{if(r[t][e].isShip||r[t][e].offLimits)return!1;const n=o.getLength();if(c(i(t,e)))return!1;if("vertical"===a){if(((t,e)=>t>=0&&t+e-1<r.length)(e,n)){for(let a=0;a<n;a+=1)l(t,e+a,{...o,position:a}),l(t+1,e+a),l(t-1,e+a);return((t,e,a)=>{s(t,e),l(t,e+a),l(t+1,e+a),l(t-1,e+a),l(t+1,e-1)})(t,e,n),!0}}else if("horizontal"===a&&((t,e)=>t>=0&&t+e-1<r.length)(t,n)){for(let a=0;a<n;a+=1)l(t+a,e,{...o,position:a}),l(t+a,e+1),l(t+a,e-1);return((t,e,a)=>{s(t,e),l(t+a,e),l(t-1,e+1),l(t+a,e+1),l(t+a,e-1),l(t-1,e)})(t,e,n),!0}return!1},d=()=>{const t=Math.floor(100*Math.random()),e=(()=>{const t=[...r.flat()];return t.forEach((t=>{!0===t.hasBeenHit?t.availability=!1:t.availability=!0})),t})()[t];return!1===e.availability?d():[e.column,e.row]},u=t=>{const e=Math.floor(10*Math.random()),a=Math.floor(10*Math.random());let r=Math.round(Math.random());return(0!==r||(r="horizontal",!1!==h(e,a,r,o(t))))&&(1!==r||(r="vertical",!1!==h(e,a,r,o(t))))&&void 0};return{clearBoard:n,checkIfLocationIsAShipOrOffLimits:c,checkIfOffLimitZoneWasCorrectlyImplemented:t=>r.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:i,receiveAttack:(t,e)=>{r[t][e].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let t=!0;for(let e=0;e<10;e+=1)for(let a=0;a<10;a+=1){const o=i(e,a);if(!1!==o.isShip&&o.isShip&&!1===o.isSunk()){t=!1;break}}return t},placeShip:h,randomlyPlaceShips:()=>{switch(n(),Math.floor(10*Math.random())){case 0:h(1,1,"horizontal",o(4)),h(1,4,"horizontal",o(4)),h(7,3,"horizontal",o(3)),h(2,7,"horizonal",o(3)),h(6,7,"horizontal",o(2)),h(5,9,"horizontal",o(2)),h(8,1,"vertical",o(1)),h(9,5,"vertical",o(1));break;case 1:h(0,1,"vertical",o(4)),h(8,1,"vertical",o(4)),h(3,1,"horizontal",o(3)),h(0,7,"vertical",o(3)),h(3,6,"horizontal",o(2)),h(8,7,"horizontal",o(2)),h(4,8,"vertical",o(1)),h(6,7,"vertical",o(1));break;case 2:h(0,1,"horizontal",o(4)),h(0,3,"horizontal",o(4)),h(9,1,"vertical",o(3)),h(2,8,"horizontal",o(3)),h(5,3,"vertical",o(2)),h(0,6,"vertical",o(2)),h(1,6,"vertical",o(1)),h(7,4,"vertical",o(1));break;case 3:h(0,0,"vertical",o(4)),h(9,0,"vertical",o(4)),h(0,5,"vertical",o(3)),h(3,1,"vertical",o(3)),h(5,1,"vertical",o(2)),h(7,1,"vertical",o(2)),h(4,7,"vertical",o(1)),h(8,7,"vertical",o(1));break;case 4:h(2,4,"horizontal",o(4)),h(0,6,"vertical",o(4)),h(2,7,"horizontal",o(3)),h(6,6,"horizontal",o(3)),h(7,1,"horizontal",o(2)),h(6,8,"horizontal",o(2)),h(2,1,"horizontal",o(1)),h(4,1,"horizontal",o(1));break;case 5:h(1,3,"horizontal",o(4)),h(6,2,"vertical",o(4)),h(0,6,"vertical",o(3)),h(8,2,"vertical",o(3)),h(0,0,"horizontal",o(2)),h(2,6,"horizontal",o(2)),h(9,6,"vertical",o(1)),h(5,9,"vertical",o(1));break;case 6:h(0,0,"vertical",o(4)),h(0,6,"vertical",o(4)),h(0,2,"horizontal",o(3)),h(6,1,"horizontal",o(3)),h(8,3,"horizontal",o(2)),h(9,5,"vertical",o(2)),h(9,8,"vertical",o(1)),h(7,9,"vertical",o(1));break;case 7:h(0,1,"vertical",o(4)),h(0,6,"vertical",o(4)),h(2,0,"horizontal",o(3)),h(6,0,"horizontal",o(3)),h(9,2,"vertical",o(2)),h(9,6,"vertical",o(2)),h(9,9,"vertical",o(1)),h(7,9,"vertical",o(1));break;case 8:h(2,0,"vertical",o(4)),h(7,1,"vertical",o(4)),h(2,5,"horizontal",o(3)),h(6,7,"vertical",o(3)),h(1,9,"horizontal",o(2)),h(2,7,"horizontal",o(2)),h(9,6,"vertical",o(1)),h(8,9,"vertical",o(1));break;case 9:h(0,0,"horizontal",o(4)),h(5,2,"vertical",o(1)),h(2,6,"vertical",o(1)),h(0,8,"horizontal",o(3)),h(4,5,"vertical",o(4)),h(7,4,"horizontal",o(2)),h(6,6,"horizontal",o(2)),h(7,8,"horizontal",o(3))}},makeRandomCoordinates:d,checkIfBoardHasBeenFullyPopulated:()=>{const t=r.flat();let e=0;return t.forEach((t=>{t.isShip&&(e+=1)})),20===e},randomFleet:()=>{for(let t=0;t<2;)!1!==u(1)&&(t+=1);for(let t=0;t<2;)!1!==u(2)&&(t+=1);for(let t=0;t<2;)!1!==u(3)&&(t+=1);for(let t=0;t<2;)!1!==u(4)&&(t+=1);e=!0},gameBoard:r,isStartAllowed:{get:()=>e,set(t){e=t}}}}},61:t=>{t.exports=(t="player")=>{let e=!1;return{getName:()=>t,attack:(t,e,{getLocation:a,receiveAttack:o})=>{const r=a(t,e);return!1===r.hasBeenHit||r.isShip&&!1===r.getStatus().includes("unhit")?(o(t,e),r.hit?(r.hit(r.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},turn:{get:()=>e,set(t){e=t}},isTurn:t=>{e=!0,t.turn.set(!1)}}}},585:t=>{t.exports=(t,e="ship")=>{const a=Array(t).fill("unhit");return{getName:()=>e,getLength:()=>a.length,isSunk:()=>a.every((t=>"hit"===t)),hit:e=>{e<t&&(a[e]="hit")},getStatus:()=>a,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},e={};function a(o){var r=e[o];if(void 0!==r)return r.exports;var n=e[o]={exports:{}};return t[o](n,n.exports,a),n.exports}a.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return a.d(e,{a:e}),e},a.d=(t,e)=>{for(var o in e)a.o(e,o)&&!a.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t={};!function t(e,a,o,r){var n=!!(e.Worker&&e.Blob&&e.Promise&&e.OffscreenCanvas&&e.OffscreenCanvasRenderingContext2D&&e.HTMLCanvasElement&&e.HTMLCanvasElement.prototype.transferControlToOffscreen&&e.URL&&e.URL.createObjectURL),i="function"==typeof Path2D&&"function"==typeof DOMMatrix;function l(){}function s(t){var o=a.exports.Promise,r=void 0!==o?o:e.Promise;return"function"==typeof r?new r(t):(t(l,l),null)}var c,h,d,u,f,m,p,v,g,y=(d=Math.floor(1e3/60),u={},f=0,"function"==typeof requestAnimationFrame&&"function"==typeof cancelAnimationFrame?(c=function(t){var e=Math.random();return u[e]=requestAnimationFrame((function a(o){f===o||f+d-1<o?(f=o,delete u[e],t()):u[e]=requestAnimationFrame(a)})),e},h=function(t){u[t]&&cancelAnimationFrame(u[t])}):(c=function(t){return setTimeout(t,d)},h=function(t){return clearTimeout(t)}),{frame:c,cancel:h}),b=(v={},function(){if(m)return m;if(!o&&n){var e=["var CONFETTI, SIZE = {}, module = {};","("+t.toString()+")(this, module, true, SIZE);","onmessage = function(msg) {","  if (msg.data.options) {","    CONFETTI(msg.data.options).then(function () {","      if (msg.data.callback) {","        postMessage({ callback: msg.data.callback });","      }","    });","  } else if (msg.data.reset) {","    CONFETTI && CONFETTI.reset();","  } else if (msg.data.resize) {","    SIZE.width = msg.data.resize.width;","    SIZE.height = msg.data.resize.height;","  } else if (msg.data.canvas) {","    SIZE.width = msg.data.canvas.width;","    SIZE.height = msg.data.canvas.height;","    CONFETTI = module.exports.create(msg.data.canvas);","  }","}"].join("\n");try{m=new Worker(URL.createObjectURL(new Blob([e])))}catch(t){return void 0!==typeof console&&"function"==typeof console.warn&&console.warn("ðŸŽŠ Could not load worker",t),null}!function(t){function e(e,a){t.postMessage({options:e||{},callback:a})}t.init=function(e){var a=e.transferControlToOffscreen();t.postMessage({canvas:a},[a])},t.fire=function(a,o,r){if(p)return e(a,null),p;var n=Math.random().toString(36).slice(2);return p=s((function(o){function i(e){e.data.callback===n&&(delete v[n],t.removeEventListener("message",i),p=null,r(),o())}t.addEventListener("message",i),e(a,n),v[n]=i.bind(null,{data:{callback:n}})}))},t.reset=function(){for(var e in t.postMessage({reset:!0}),v)v[e](),delete v[e]}}(m)}return m}),M={particleCount:50,angle:90,spread:45,startVelocity:45,decay:.9,gravity:1,drift:0,ticks:200,x:.5,y:.5,shapes:["square","circle"],zIndex:100,colors:["#26ccff","#a25afd","#ff5e7e","#88ff5a","#fcff42","#ffa62d","#ff36ff"],disableForReducedMotion:!1,scalar:1};function w(t,e,a){return function(t,e){return e?e(t):t}(t&&null!=t[e]?t[e]:M[e],a)}function S(t){return t<0?0:Math.floor(t)}function x(t){return parseInt(t,16)}function k(t){return t.map(L)}function L(t){var e=String(t).replace(/[^0-9a-f]/gi,"");return e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),{r:x(e.substring(0,2)),g:x(e.substring(2,4)),b:x(e.substring(4,6))}}function z(t){t.width=document.documentElement.clientWidth,t.height=document.documentElement.clientHeight}function E(t){var e=t.getBoundingClientRect();t.width=e.width,t.height=e.height}function C(t,a){var l,c=!t,h=!!w(a||{},"resize"),d=!1,u=w(a,"disableForReducedMotion",Boolean),f=n&&w(a||{},"useWorker")?b():null,m=c?z:E,p=!(!t||!f||!t.__confetti_initialized),v="function"==typeof matchMedia&&matchMedia("(prefers-reduced-motion)").matches;function g(e,a,n){for(var c,h,d,u,f=w(e,"particleCount",S),p=w(e,"angle",Number),v=w(e,"spread",Number),g=w(e,"startVelocity",Number),b=w(e,"decay",Number),M=w(e,"gravity",Number),x=w(e,"drift",Number),L=w(e,"colors",k),z=w(e,"ticks",Number),E=w(e,"shapes"),C=w(e,"scalar"),I=!!w(e,"flat"),A=function(t){var e=w(t,"origin",Object);return e.x=w(e,"x",Number),e.y=w(e,"y",Number),e}(e),T=f,P=[],q=t.width*A.x,B=t.height*A.y;T--;)P.push((void 0,void 0,h=(c={x:q,y:B,angle:p,spread:v,startVelocity:g,color:L[T%L.length],shape:E[(0,u=E.length,Math.floor(Math.random()*(u-0))+0)],ticks:z,decay:b,gravity:M,drift:x,scalar:C,flat:I}).angle*(Math.PI/180),d=c.spread*(Math.PI/180),{x:c.x,y:c.y,wobble:10*Math.random(),wobbleSpeed:Math.min(.11,.1*Math.random()+.05),velocity:.5*c.startVelocity+Math.random()*c.startVelocity,angle2D:-h+(.5*d-Math.random()*d),tiltAngle:(.5*Math.random()+.25)*Math.PI,color:c.color,shape:c.shape,tick:0,totalTicks:c.ticks,decay:c.decay,drift:c.drift,random:Math.random()+2,tiltSin:0,tiltCos:0,wobbleX:0,wobbleY:0,gravity:3*c.gravity,ovalScalar:.6,scalar:c.scalar,flat:c.flat}));return l?l.addFettis(P):(l=function(t,e,a,n,l){var c,h,d=e.slice(),u=t.getContext("2d"),f=s((function(e){function s(){c=h=null,u.clearRect(0,0,n.width,n.height),l(),e()}c=y.frame((function e(){!o||n.width===r.width&&n.height===r.height||(n.width=t.width=r.width,n.height=t.height=r.height),n.width||n.height||(a(t),n.width=t.width,n.height=t.height),u.clearRect(0,0,n.width,n.height),(d=d.filter((function(t){return function(t,e){e.x+=Math.cos(e.angle2D)*e.velocity+e.drift,e.y+=Math.sin(e.angle2D)*e.velocity+e.gravity,e.velocity*=e.decay,e.flat?(e.wobble=0,e.wobbleX=e.x+10*e.scalar,e.wobbleY=e.y+10*e.scalar,e.tiltSin=0,e.tiltCos=0,e.random=1):(e.wobble+=e.wobbleSpeed,e.wobbleX=e.x+10*e.scalar*Math.cos(e.wobble),e.wobbleY=e.y+10*e.scalar*Math.sin(e.wobble),e.tiltAngle+=.1,e.tiltSin=Math.sin(e.tiltAngle),e.tiltCos=Math.cos(e.tiltAngle),e.random=Math.random()+2);var a=e.tick++/e.totalTicks,o=e.x+e.random*e.tiltCos,r=e.y+e.random*e.tiltSin,n=e.wobbleX+e.random*e.tiltCos,l=e.wobbleY+e.random*e.tiltSin;if(t.fillStyle="rgba("+e.color.r+", "+e.color.g+", "+e.color.b+", "+(1-a)+")",t.beginPath(),i&&"path"===e.shape.type&&"string"==typeof e.shape.path&&Array.isArray(e.shape.matrix))t.fill(function(t,e,a,o,r,n,i){var l=new Path2D(t),s=new Path2D;s.addPath(l,new DOMMatrix(e));var c=new Path2D;return c.addPath(s,new DOMMatrix([Math.cos(i)*r,Math.sin(i)*r,-Math.sin(i)*n,Math.cos(i)*n,a,o])),c}(e.shape.path,e.shape.matrix,e.x,e.y,.1*Math.abs(n-o),.1*Math.abs(l-r),Math.PI/10*e.wobble));else if("bitmap"===e.shape.type){var s=Math.PI/10*e.wobble,c=.1*Math.abs(n-o),h=.1*Math.abs(l-r),d=e.shape.bitmap.width*e.scalar,u=e.shape.bitmap.height*e.scalar,f=new DOMMatrix([Math.cos(s)*c,Math.sin(s)*c,-Math.sin(s)*h,Math.cos(s)*h,e.x,e.y]);f.multiplySelf(new DOMMatrix(e.shape.matrix));var m=t.createPattern(e.shape.bitmap,"no-repeat");m.setTransform(f),t.globalAlpha=1-a,t.fillStyle=m,t.fillRect(e.x-d/2,e.y-u/2,d,u),t.globalAlpha=1}else if("circle"===e.shape)t.ellipse?t.ellipse(e.x,e.y,Math.abs(n-o)*e.ovalScalar,Math.abs(l-r)*e.ovalScalar,Math.PI/10*e.wobble,0,2*Math.PI):function(t,e,a,o,r,n,i,l,s){t.save(),t.translate(e,a),t.rotate(n),t.scale(o,r),t.arc(0,0,1,0,l,void 0),t.restore()}(t,e.x,e.y,Math.abs(n-o)*e.ovalScalar,Math.abs(l-r)*e.ovalScalar,Math.PI/10*e.wobble,0,2*Math.PI);else if("star"===e.shape)for(var p=Math.PI/2*3,v=4*e.scalar,g=8*e.scalar,y=e.x,b=e.y,M=5,w=Math.PI/M;M--;)y=e.x+Math.cos(p)*g,b=e.y+Math.sin(p)*g,t.lineTo(y,b),p+=w,y=e.x+Math.cos(p)*v,b=e.y+Math.sin(p)*v,t.lineTo(y,b),p+=w;else t.moveTo(Math.floor(e.x),Math.floor(e.y)),t.lineTo(Math.floor(e.wobbleX),Math.floor(r)),t.lineTo(Math.floor(n),Math.floor(l)),t.lineTo(Math.floor(o),Math.floor(e.wobbleY));return t.closePath(),t.fill(),e.tick<e.totalTicks}(u,t)}))).length?c=y.frame(e):s()})),h=s}));return{addFettis:function(t){return d=d.concat(t),f},canvas:t,promise:f,reset:function(){c&&y.cancel(c),h&&h()}}}(t,P,m,a,n),l.promise)}function M(a){var o=u||w(a,"disableForReducedMotion",Boolean),r=w(a,"zIndex",Number);if(o&&v)return s((function(t){t()}));c&&l?t=l.canvas:c&&!t&&(t=function(t){var e=document.createElement("canvas");return e.style.position="fixed",e.style.top="0px",e.style.left="0px",e.style.pointerEvents="none",e.style.zIndex=t,e}(r),document.body.appendChild(t)),h&&!p&&m(t);var n={width:t.width,height:t.height};function i(){if(f){var e={getBoundingClientRect:function(){if(!c)return t.getBoundingClientRect()}};return m(e),void f.postMessage({resize:{width:e.width,height:e.height}})}n.width=n.height=null}function y(){l=null,h&&(d=!1,e.removeEventListener("resize",i)),c&&t&&(document.body.removeChild(t),t=null,p=!1)}return f&&!p&&f.init(t),p=!0,f&&(t.__confetti_initialized=!0),h&&!d&&(d=!0,e.addEventListener("resize",i,!1)),f?f.fire(a,n,y):g(a,n,y)}return M.reset=function(){f&&f.reset(),l&&l.reset()},M}function I(){return g||(g=C(null,{useWorker:!0,resize:!0})),g}a.exports=function(){return I().apply(this,arguments)},a.exports.reset=function(){I().reset()},a.exports.create=C,a.exports.shapeFromPath=function(t){if(!i)throw new Error("path confetti are not supported in this browser");var e,a;"string"==typeof t?e=t:(e=t.path,a=t.matrix);var o=new Path2D(e),r=document.createElement("canvas").getContext("2d");if(!a){for(var n,l,s=1e3,c=s,h=s,d=0,u=0,f=0;f<s;f+=2)for(var m=0;m<s;m+=2)r.isPointInPath(o,f,m,"nonzero")&&(c=Math.min(c,f),h=Math.min(h,m),d=Math.max(d,f),u=Math.max(u,m));n=d-c,l=u-h;var p=Math.min(10/n,10/l);a=[p,0,0,p,-Math.round(n/2+c)*p,-Math.round(l/2+h)*p]}return{type:"path",path:e,matrix:a}},a.exports.shapeFromText=function(t){var e,a=1,o="#000000",r='"Twemoji Mozilla", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji", "EmojiOne Color", "Android Emoji", "system emoji", sans-serif';"string"==typeof t?e=t:(e=t.text,a="scalar"in t?t.scalar:a,r="fontFamily"in t?t.fontFamily:r,o="color"in t?t.color:o);var n=10*a,i=n+"px "+r,l=new OffscreenCanvas(n,n),s=l.getContext("2d");s.font=i;var c=s.measureText(e),h=Math.floor(c.width),d=Math.floor(c.fontBoundingBoxAscent+c.fontBoundingBoxDescent);(s=(l=new OffscreenCanvas(h,d)).getContext("2d")).font=i,s.fillStyle=o,s.fillText(e,0,n);var u=1/a;return{type:"bitmap",bitmap:l.transferToImageBitmap(),matrix:[u,0,0,u,-h*u/2,-d*u/2]}}}(function(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:this||{}}(),t,!1);const e=t.exports;t.exports.create;let o,r=!1,n=!1,i=[],l=[],s=[],c=[];function h(t){return"left"===t?(o="left",[i[0],i[1]-1]):"right"===t?(o="right",[i[0],i[1]+1]):"down"===t?(o="down",[i[0]+1,i[1]]):"up"===t?(o="up",[i[0]-1,i[1]]):void 0}function d(t,e,a,o){r=t,void 0!==e&&(n=e),void 0!==a&&(i=[a,o]),0===l.length&&void 0!==a?l=[a,o]:0!==l.length&&0===s.length&&void 0!==a&&(s=[a,o])}function u(t,e){return c=[],0!==e&&c.push([t,e-1]),9!==e&&c.push([t,e+1]),0!==t&&c.push([t-1,e]),9!==t&&c.push([t+1,e]),c}function f(t,e,a,d,f,m){let p;if(!0===d&&(i=[],l=[],s=[],c=[],r=!1,n=!1,o=""),!n&&!r)return p=f.makeRandomCoordinates(),M(e,a,p[0],p[1],f,m);if(0!==s.length&&r&&!t){let t;if(l[0]===s[0]-1&&(t=h("down")),l[0]===s[0]+1&&(t=h("up")),l[1]===s[1]-1&&(t=h("right")),l[1]===s[1]+1&&(t=h("left")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return M(e,a,t[0],t[1],f,m)}else if(0!==s.length&&n&&!r){let t;if(i=l,s=[],"up"===o&&(t=h("down")),"down"===o&&(t=h("up")),"right"===o&&(t=h("left")),"left"===o&&(t=h("right")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return M(e,a,t[0],t[1],f,m)}else if(n){0===c.length&&u(i[0],i[1]),0===c.length&&!0===n&&u(l[0],l[1]);const t=c.pop();return M(e,a,t[0],t[1],f,m)}}var m=a(585),p=a.n(m);let v=0;function g(t,e){let a=2;const o=document.querySelector(t),r=document.querySelector("body"),n=document.querySelectorAll(".player-board > .cell"),i=o.childNodes;let l,s,c="horizontal";i[0]&&i[0].addEventListener("mouseenter",(()=>s=0)),i[1]&&i[1].addEventListener("mouseenter",(()=>s=-1)),i[2]&&i[2].addEventListener("mouseenter",(()=>s=-2)),i[3]&&i[3].addEventListener("mouseenter",(()=>s=-3)),o.addEventListener("click",(t=>function(t){"horizontal"===c?(c="vertical",t.target.parentNode.classList.toggle("rotated")):(c="horizontal",t.target.parentNode.classList.toggle("rotated"))}(t))),o.addEventListener("dragstart",(()=>{for(let t=0;t<10;t+=1)e.gameBoard[t].forEach((t=>{(t.offLimits||t.isShip)&&document.querySelector(`.player-board > .cell[column='${t.column}'][row='${t.row}']`).classList.toggle("not-available")}))})),o.addEventListener("dragend",(()=>{if(document.querySelectorAll(".not-available").forEach((t=>t.classList.remove("not-available"))),-1===l)return;let r,n,i=`${l}`;if(l<10?(r=0,n=l):(i=i.split(""),r=1*i[0],n=1*i[1]),"horizontal"===c&&(n+=s),"vertical"===c&&(r+=s),!(n<0||".ship-1"===t&&!1===e.placeShip(n,r,c,p()(1))||".ship-2"===t&&!1===e.placeShip(n,r,c,p()(2))||".ship-3"===t&&!1===e.placeShip(n,r,c,p()(3))||".ship-4"===t&&!1===e.placeShip(n,r,c,p()(4)))&&(w(e),a-=1,v+=1,8===v&&e.isStartAllowed.set(!0),o.parentNode.firstChild.textContent=`${a}x`,0===a&&(o.parentNode.style.display="none"),e.checkIfBoardHasBeenFullyPopulated()&&(document.querySelector(".ships").style.display="none",document.querySelector(".randomize").style.display="none",e.isStartAllowed.set(!0)),a>0)){const t=document.querySelector(".randomize");t&&t.remove()}})),n.forEach(((t,e)=>{t.addEventListener("dragover",(t=>{t.preventDefault(),l=e}))})),r.addEventListener("dragenter",(()=>{l=-1}))}function y(t){return new Promise((e=>{setTimeout((()=>{e(2)}),t)}))}const b=(t,a)=>{if(t.checkIfAllShipsHaveSunk()){const o=document.querySelector(".modal"),r=document.querySelector(".modal-content > p"),n=document.querySelector(".modal-content > button");o.style.display="block",n.addEventListener("click",(()=>{location.reload()})),r.textContent="You lose!"}if(a.checkIfAllShipsHaveSunk()){const i=document.querySelector(".modal"),l=document.querySelector(".modal-content > p"),s=document.querySelector(".modal-content > button"),c=15e3,h=Date.now()+c,d={startVelocity:30,spread:360,ticks:60,zIndex:0};function u(t,e){return Math.random()*(e-t)+t}const f=setInterval((()=>{const t=h-Date.now();if(t<=0)return clearInterval(f);const a=t/c*50;e({...d,particleCount:a,origin:{x:u(.1,.3),y:Math.random()-.2}}),e({...d,particleCount:a,origin:{x:u(.7,.9),y:Math.random()-.2}})}),250);i.style.display="block",l.textContent="You win!",s.addEventListener("click",(()=>{location.reload()}))}};async function M(t,e,a,o,r,n){let i=!1;const l=document.querySelector(`.player-board > .cell[column='${a}'][row='${o}']`),s=e.attack(a,o,r);if("You have already hit this spot!"===s&&f(!0,t,e,void 0,r,n),"It's a hit!"===s&&(d(!1),l.classList.add("miss")),"You hit a ship!"===s)return d(!0,!0,a,o),l.classList.add("hit"),r.getLocation(a,o).domTargets.push(l),r.getLocation(a,o).isSunk()&&(r.getLocation(a,o).domTargets.forEach((t=>t.classList.add("sunk"))),i=!0,!0===r.checkIfAllShipsHaveSunk())?b(r,n):(await y(1e3),f(!1,t,e,i,r,n));t.isTurn(e)}const w=({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let a=0;a<10;a+=1)for(let o=0;o<10;o+=1){const r=e.querySelector(`.cell:nth-child(${10*o+a+1})`);r.setAttribute("column",a),r.setAttribute("row",o);const n=t(a,o);n.isShip&&(r.classList.add("ship"),r.setAttribute("ship-name",n.getName()))}};var S=a(653),x=a.n(S),k=a(61),L=a.n(k);const z=x()(),E=x()(),C=L()("player"),I=L()("computer");C.isTurn(I),function(t){document.querySelector("button.randomize").addEventListener("click",(()=>{document.querySelector(".ships").style.display="none",t.randomlyPlaceShips(),t.isStartAllowed.set(!0),w(t)})),document.querySelector("button.reset").addEventListener("click",(()=>{location.reload()}))}(z),function(t){function e(t,e){const a=document.querySelector(".ships"),o=document.createElement("div");o.classList.add("ship-container"),a.appendChild(o);const r=document.createElement("span");r.classList.add(`info-${t}`),r.textContent="2x",o.appendChild(r);const n=document.createElement("div");n.classList.add("ship"),n.classList.add(`ship-${t}`),n.setAttribute("draggable","true"),o.appendChild(n);for(let t=0;t<e;t+=1){const t=document.createElement("div");t.classList.add("cell"),n.appendChild(t)}}e(1,1),e(2,2),e(3,3),e(4,4);for(let e=1;e<5;e+=1)g(`.ship-${e}`,t)}(z),E.randomlyPlaceShips();const A=(()=>{const t={};return{publish:function(e,a){Array.isArray(t[e])&&t[e].forEach((t=>{t(a)}))},subscribe:function e(a,o){Array.isArray(e[a])||(t[a]=[]),t[a].push(o);const r=t[a].length-1;return{unsubscribe(){t[a].splice(r,1)}}}}})();((t,e,a,o,r)=>{const n=document.querySelector("div.enemy-board");for(let i=0;i<10;i+=1)for(let l=0;l<10;l+=1){const s=n.querySelector(`.cell:nth-child(${10*l+i+1})`);s.setAttribute("column",i),s.setAttribute("row",l),s.addEventListener("click",(()=>{t.isStartAllowed.get()&&a.turn.get()&&r.publish("click",{column:i,row:l,playerBoard:t,enemyBoard:e,player:a,enemy:o})}))}})(z,E,C,I,A),A.subscribe("click",(({column:t,row:e,playerBoard:a,enemyBoard:o,player:r,enemy:n})=>{r.turn.get()&&a.isStartAllowed.get()&&((t,e,a,o,r,n)=>{((t,e,a,o)=>{o.attack(t,e,a)})(t,e,a,r),(async(t,e,a,o,r,n,i)=>{const l=document.querySelector(`.enemy-board > .cell[column='${e}'][row='${a}']`);o.getLocation(e,a)?.isShip?(l.classList.add("hit"),o.getLocation(e,a).domTargets.push(l),o.getLocation(e,a).isSunk()&&o.getLocation(e,a).domTargets.forEach((t=>t.classList.add("sunk")))):(l.classList.add("miss"),n.isTurn(r),await y(700),o.checkIfAllShipsHaveSunk()?b(i,o):f(!1,r,n,void 0,i,o))})(0,t,e,a,r,n,o)})(t,e,o,a,r,n)})),w(z)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,