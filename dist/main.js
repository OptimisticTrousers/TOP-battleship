(()=>{var t={653:(t,e,r)=>{const o=r(585),n=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=()=>Object.assign(t,{offLimits:!0}),i=(t,r)=>e?.[t]?.[r],a=(t,r,o=n())=>{e[t][r]=o},s=(t,r,o)=>{const i=n();e[t][r-1]=i;const a=n();e[t-1][r]=a;const s=n();e[t+1][r-1]=s;const l=n();e[t-1][r-1]=l;const c=n();e[t+1][r+o]=c;const h=n();e[t-1][r+o]=h},l=(t,r,o,i)=>{const l=i.getLength();if("vertical"===o){if(r+l<=10){for(let e=0;e<l;e+=1)a(t,r+e,i);return((t,r,o)=>{const i=n();e[t][r+o]=i,s(t,r,o)})(t,r,l),console.log(e),!0}}else if("horizontal"===o&&t+l<=10){for(let e=0;e<l;e+=1)a(t+e,r,i);return((t,r,o)=>{const i=n();e[t+o][r]=i,s(t,r,o)})(t,r,l),!0}return!1},c=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:i,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:l,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:n,randomDirection:a}=c(),s=r[e],h=i(o,n);!0===h.isShip||!0===h.offLimits||!1===l(o,n,a,s)?e-=1:t.push({randomColumn:o,randomRow:n,randomDirection:a})}return t}}};n().placeShip(1,1,"vertical",o(2,"bobs ship")),t.exports=n},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,isShip:!0}}}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(653);const e=r.n(t)()();e.randomlyPlaceShips(),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=document.createElement("div");n.classList.add("cell"),t(o,r).isShip&&n.classList.add("ship"),e.appendChild(n)}})(e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,