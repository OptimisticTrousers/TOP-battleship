(()=>{var t={653:(t,e,o)=>{const r=o(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=(()=>{const e=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)e[o][r]={...t,column:o,row:r};return e})(),o=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],n=(t,o)=>e?.[t]?.[o],i=(o,r,n=(()=>Object.assign(t,{offLimits:!0}))())=>{if(void 0===e?.[o]?.[r])return!0;const i=e[o][r];return e[o][r]={...i,...n},!0},a=(t,e)=>{i(t-1,e-1),i(t,e-1)},c=(t,e,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=n(t,e+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}if("horizontal"===o)for(let o=0;o<r;o++){const r=n(t+o,e);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}return!1},l=(t,o,r,l)=>{const s=l.getLength();if(c(n(t,o)))return!1;if("vertical"===r){if(((t,o)=>t>=0&&t+o-1<e.length)(o,s)){for(let e=0;e<s;e+=1)i(t,o+e,{...l,position:e}),i(t+1,o+e),i(t-1,o+e);return((t,e,o)=>{a(t,e),i(t,e+o),i(t+1,e+o),i(t-1,e+o),i(t+1,e-1)})(t,o,s),!0}}else if("horizontal"===r&&((t,o)=>t>=0&&t+o-1<e.length)(t,s)){for(let e=0;e<s;e+=1)i(t+e,o,{...l,position:e}),i(t+e,o+1),i(t+e,o-1);return((t,e,o)=>{a(t,e),i(t+o,e),i(t-1,e+1),i(t+o,e+1),i(t+o,e-1)})(t,o,s),!0}return!1},s=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal",o=Math.floor(100*Math.random()),r=(()=>{const t=[...e.flat()];return t.forEach((t=>{!0===t.hasBeenHit?t.availability=!1:t.availability=!0})),t})()[o];return!1===r.availability?s():{elementColumn:r.column,elementRow:r.row,randomDirection:t}};return{checkIfLocationIsAShipOrOffLimits:c,checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,o)=>{e[t][o].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let t=!0;for(let e=0;e<10;e++)for(let o=0;o<10;o++){const r=n(e,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){t=!1;break}}return t},placeShip:l,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<o.length;e+=1){const r=o[e],{randomColumn:n,randomRow:i,randomDirection:a}=s(r.getLength());l(n,i,a,r)?t.push({randomColumn:n,randomRow:i,randomDirection:a}):e-=1}return t},makeRandomCoordinates:s}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:o,receiveAttack:r})=>{const n=o(t,e);return!1===n.hasBeenHit||n.isShip&&!1===n.getStatus().includes("unhit")?(r(t,e),n.hit?(n.hit(n.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"}})},585:t=>{t.exports=(t,e="ship")=>{const o=Array(t).fill("unhit");return{getName:()=>e,getLength:()=>o.length,isSunk:()=>o.every((t=>"hit"===t)),hit:e=>{e<t&&(o[e]="hit")},getStatus:()=>o,hasBeenHit:!1,offLimits:!0,isShip:!0}}}},e={};function o(r){var n=e[r];if(void 0!==n)return n.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,o),i.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,o,r)=>{const n=document.querySelector(`.${t}-board > .cell[column='${e}'][row='${o}']`);r.getLocation(e,o).isShip?n.classList.add("hit"):n.classList.add("miss")},e=(t,e,o,r)=>r.attack(t,e,o),r=(t,e,o)=>{const n=((t,e,o)=>{const r=o.getLocation(t+1,e),n=o.getLocation(t-1,e),i=o.getLocation(t,e+1),a=o.getLocation(t,e-1),c=[];return r&&!r.hasBeenHit&&c.push(r),n&&!n.hasBeenHit&&c.push(n),i&&!i.hasBeenHit&&c.push(i),a&&!a.hasBeenHit&&c.push(a),c})(t,e,o),i=Math.floor(Math.random()*n.length);return n[i]?n[i]:r(t,e,o)},n=(t,e,o)=>{const r={location(){return o.getLocation(this.column,this.row)}},n=Object.assign(Object.create(r),{column:t,row:e-1}),i=Object.assign(Object.create(r),{column:t,row:e+1}),a=Object.assign(Object.create(r),{column:t+1,row:e}),c=Object.assign(Object.create(r),{column:t-1,row:e}),l=[];return l.push(n),l.push(i),l.push(a),l.push(c),l},i=(o,a,c,l,s)=>{const u=o.getLocation(c,l);if("You hit a ship!"===e(c,l,o,a)){const t=r(c,l,o),e=t.column,h=n(c,l,o).filter((t=>void 0!==t.column&&void 0!==t.row)),m=t.row;if(u.isShip&&!1===u.isSunk())switch(Math.floor(Math.random()*h.length)){case 0:i(o,a,h[0].column,h[0].row,u);break;case 1:i(o,a,h[1].column,h[1].row,u);break;case 2:i(o,a,h[2].column,h[2].row,u);break;case 3:i(o,a,h[3].column,h[3].row,u)}setTimeout((()=>{i(o,a,e,m,s)}),700)}else if(u&&!1===u.isShip&&s&&!0===s.isShip){let t,e;s.getLength(),s.column>c&&(e=s.column-(s.column-c)),s.column<c&&(e=s.column+(c-s.column)),s.row>l&&(t=s.row-(s.row-l)),s.row<l&&(t=s.row+(l-s.row)),setTimeout((()=>{!1===s.isSunk()&&i(o,a,e,t,s)}),700)}setTimeout((()=>{t("player",c,l,o)}),700)};var a=o(653),c=o.n(a),l=o(585),s=o.n(l),u=o(61),h=o.n(u);const m=c()(),p=c()(),d=h()(),f=h()();s()(5,"Carrier"),s()(4,"Battleship"),s()(3,"Destroyer"),s()(3,"Submarine"),s()(2,"Patrol Boat"),m.placeShip(0,0,"horizontal",s()(5)),m.placeShip(3,4,"horizontal",s()(3)),m.placeShip(6,7,"horizontal",s()(2)),m.placeShip(9,1,"vertical",s()(3)),m.placeShip(5,9,"horizontal",s()(4)),p.placeShip(0,0,"horizontal",s()(5)),p.placeShip(3,4,"horizontal",s()(3)),p.placeShip(6,7,"horizontal",s()(2)),p.placeShip(9,1,"vertical",s()(3)),p.placeShip(5,9,"horizontal",s()(4));const S=(()=>{const t={};return{publish:function(e,o){Array.isArray(t[e])&&t[e].forEach((t=>{t(o)}))},subscribe:function e(o,r){Array.isArray(e[o])||(t[o]=[]),t[o].push(r);const n=t[o].length-1;return{unsubscribe(){t[o].splice(n,1)}}}}})();((t,e,o,r,n)=>{const i=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let c=0;c<10;c+=1){const l=i.querySelector(`.cell:nth-child(${10*c+a+1})`);l.setAttribute("column",a),l.setAttribute("row",c),l.addEventListener("click",(()=>{n.publish("click",{cell:l,column:a,row:c,playerBoard:t,enemyBoard:e,player:o,enemy:r})}),{once:!0})}})(m,p,d,f,S),S.subscribe("click",(({cell:o,column:r,row:n,playerBoard:a,enemyBoard:c,player:l,enemy:s})=>{((o,r,n,i)=>{e(o,r,n,i),t("enemy",o,r,n)})(r,n,c,l);const{elementColumn:u,elementRow:h}=a.makeRandomCoordinates();i(a,s,u,h),((t,e)=>{if(t.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",o.addEventListener("click",(()=>{location.reload()})),e.textContent="You lose!"}if(e.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",e.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}})(a,c)})),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const n=e.querySelector(`.cell:nth-child(${10*r+o+1})`);n.setAttribute("column",o),n.setAttribute("row",r);const i=t(o,r);i.isShip&&(n.classList.add("ship"),n.setAttribute("ship-name",i.getName()),n.setAttribute("draggable",!0))}})(m)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,