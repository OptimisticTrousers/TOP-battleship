(()=>{var t={653:(t,e,o)=>{const r=o(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=()=>{const e=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)e[o][r]={...t,column:o,row:r};return e};let o=e();const i=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],n=(t,e)=>o?.[t]?.[e];let a=(t,e)=>{function r(r,i){const n=o[t+r][[e+i]];t+r>9||t+r<0||!1===n.isShip&&!1===n.offLimits&&(n.offLimits=!0)}function i(t){r(t,-1),r(t,0),r(t,1)}i(-1),i(0),i(1)},l=(t,e,r,i)=>{if(o[t][e].isShip||o[t][e].offLimits)return!1;let n=i.getLength(),l=0;if("horizontal"===r){if(e+i.length>10)return!1;for(let r=0;r<n;r++)if(o[t][e+r].offLimits||o[t][e+r].isShip)return!1;for(let r=e;r<e+i.length;r++)o[t].splice(r,1,{...i,position:r}),a(t,e+l),l++}if("vertical"===r){if(t+i.length>10)return!1;for(let r=0;r<n;r++)if(o[t+r][e].offLimits||o[t+r][e].isShip)return!1;for(let r=t;r<t+i.length;r++)o[r].splice(e,1,{...i,position:r}),a(t+l,e),l++}};const s=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal",e=Math.floor(100*Math.random()),r=(()=>{const t=[...o.flat()];return t.forEach((t=>{!0===t.hasBeenHit?t.availability=!1:t.availability=!0})),t})()[e];return!1===r.availability?s():{elementColumn:r.column,elementRow:r.row,randomDirection:t}};let c=t=>{let e=Math.floor(10*Math.random()),o=Math.floor(10*Math.random()),i=Math.round(Math.random());return(0!==i||(i="horizontal",!1!==l(e,o,i,r(t))))&&(1!==i||(i="vertical",!1!==l(e,o,i,r(t))))&&void 0};return{clearBoard:()=>{o=e()},checkIfLocationIsAShipOrOffLimits:(t,e,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=n(t,e+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}if("horizontal"===o)for(let o=0;o<r;o++){const r=n(t+o,e);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}return!1},checkIfOffLimitZoneWasCorrectlyImplemented:t=>o.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,e)=>{o[t][e].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let t=!0;for(let e=0;e<10;e++)for(let o=0;o<10;o++){const r=n(e,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){t=!1;break}}return t},placeShip:l,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<i.length;e+=1){const o=i[e],{randomColumn:r,randomRow:n,randomDirection:a}=s(o.getLength());l(r,n,a,o)?t.push({randomColumn:r,randomRow:n,randomDirection:a}):e-=1}return t},makeRandomCoordinates:s,randomFleet:()=>{for(let t=0;t<2;)!1!==c(1)&&t++;for(let t=0;t<2;)!1!==c(2)&&t++;for(let t=0;t<2;)!1!==c(3)&&t++;for(let t=0;t<2;)!1!==c(4)&&t++}}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:o,receiveAttack:r})=>{const i=o(t,e);return!1===i.hasBeenHit||i.isShip&&!1===i.getStatus().includes("unhit")?(r(t,e),i.hit?(i.hit(i.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:t=>{t.exports=(t,e="ship")=>{const o=Array(t).fill("unhit");return{getName:()=>e,getLength:()=>o.length,isSunk:()=>o.every((t=>"hit"===t)),hit:e=>{e<t&&(o[e]="hit")},getStatus:()=>o,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},e={};function o(r){var i=e[r];if(void 0!==i)return i.exports;var n=e[r]={exports:{}};return t[r](n,n.exports,o),n.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=o(653),e=o.n(t),r=o(585),i=o.n(r);let n,a=!1,l=!1,s=[],c=[],u=[],h=[];function d(t,e,o,r){a=t,void 0!==e&&(l=e),void 0!==o&&(s=[o,r]),0==c.length&&void 0!==o?c=[o,r]:0!==c.length&&0==u.length&&void 0!==o&&(u=[o,r])}function f(t,e){return h=[],0!==e&&h.push([t,e-1]),9!==e&&h.push([t,e+1]),0!==t&&h.push([t-1,e]),9!==t&&h.push([t+1,e]),h}function m(t,e,o,r,i,d){let m;if(!0===r&&(s=[],c=[],u=[],h=[],a=!1,l=!1,n=""),!l&&!a)return m=e.randomPos(),S(e,o,m[0],m[1],i,d);if(0!==u.length&&a&&!t){let t;if(c[0]==u[0]-1&&(t=p("down")),c[0]==u[0]+1&&(t=p("up")),c[1]==u[1]-1&&(t=p("right")),c[1]==u[1]+1&&(t=p("left")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return S(e,o,t[0],t[1],i,d)}else if(0!==u.length&&l&&!a){let t;if(s=c,u=[],"up"===n&&(t=p("down")),"down"===n&&(t=p("up")),"right"===n&&(t=p("left")),"left"===n&&(t=p("right")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return S(e,o,t[0],t[1],i,d)}else if(l){0==h.length&&f(s[0],s[1]),0==h.length&&1==l&&f(c[0],c[1]);const t=h.pop();return S(e,o,t[0],t[1],i,d)}}function p(t){return"left"===t?(n="left",[s[0],s[1]-1]):"right"===t?(n="right",[s[0],s[1]+1]):"down"===t?(n="down",[s[0]+1,s[1]]):"up"===t?(n="up",[s[0]-1,s[1]]):void 0}async function S(t,e,o,r,i,n){let a=!1;const l=document.querySelector(`.player-board > .cell[column='${o}'][row='${r}']`),s=e.attack(o,r,i);if(console.log(i.getLocation(o,r)),"You have already hit this spot!"===s&&m(!0,t,e,void 0,i,n),"It's a hit!"===s&&(d(!1),l.classList.add("miss")),"You hit a ship!"===s)return d(!0,!0,o,r),l.classList.add("hit"),i.getLocation(o,r).domTargets.push(l),i.getLocation(o,r).isSunk()&&(i.getLocation(o,r).domTargets.forEach((t=>t.classList.add("sunk"))),a=!0,!0===i.checkIfAllShipsHaveSunk())?g(i,n):(await y(1e3),m(!1,t,e,a,i,n))}function y(t){return new Promise((e=>{setTimeout((()=>{e(2)}),t)}))}const g=(t,e)=>{if(t.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",o.addEventListener("click",(()=>{location.reload()})),e.textContent="You lose!"}if(e.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",e.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}};var v=o(61),L=o.n(v);const k=e()(),b=e()(),w=L()(),A=L()();document.querySelector("button.randomize").addEventListener("click",(()=>{k.randomFleet()})),k.randomFleet(),b.placeShip(0,0,"horizontal",i()(5)),b.placeShip(3,4,"horizontal",i()(3)),b.placeShip(6,7,"horizontal",i()(2)),b.placeShip(9,1,"vertical",i()(3)),b.placeShip(5,9,"horizontal",i()(4));const M=(()=>{const t={};return{publish:function(e,o){Array.isArray(t[e])&&t[e].forEach((t=>{t(o)}))},subscribe:function e(o,r){Array.isArray(e[o])||(t[o]=[]),t[o].push(r);const i=t[o].length-1;return{unsubscribe(){t[o].splice(i,1)}}}}})();((t,e,o,r,i)=>{const n=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let l=0;l<10;l+=1){const s=n.querySelector(`.cell:nth-child(${10*l+a+1})`);s.setAttribute("column",a),s.setAttribute("row",l),s.addEventListener("click",(()=>{i.publish("click",{cell:s,column:a,row:l,playerBoard:t,enemyBoard:e,player:o,enemy:r})}),{once:!0})}})(k,b,w,A,M),M.subscribe("click",(({cell:t,column:e,row:o,playerBoard:r,enemyBoard:i,player:n,enemy:a})=>{(async(t,e,o,r,i,n)=>{((t,e,o,r)=>{r.attack(t,e,o)})(t,e,o,i),((t,e,o,r)=>{const i=document.querySelector(`.enemy-board > .cell[column='${e}'][row='${o}']`);r.getLocation(e,o)?.isShip&&(r.getLocation(e,o).domTargets.push(i),r.getLocation(e,o).isSunk()&&r.getLocation(e,o).domTargets.forEach((t=>t.classList.add("sunk")))),r.getLocation(e,o).isShip?i.classList.add("hit"):i.classList.add("miss")})(0,t,e,o),await y(700),o.checkIfAllShipsHaveSunk()?g(r,o):m(!1,i,n,void 0,r,o)})(e,o,i,r,n,a)})),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const i=e.querySelector(`.cell:nth-child(${10*r+o+1})`);i.setAttribute("column",o),i.setAttribute("row",r);const n=t(o,r);n.isShip&&(i.classList.add("ship"),i.setAttribute("ship-name",n.getName()))}})(k)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,