(()=>{var t={653:(t,e,o)=>{const r=o(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=()=>{const e=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)e[o][r]={...t,column:o,row:r};return e};let o=e();const i=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],n=(t,e)=>o?.[t]?.[e],l=(e,r,i=(()=>Object.assign(t,{offLimits:!0}))())=>{if(void 0===o?.[e]?.[r])return!0;const n=o[e][r];return o[e][r]={...n,...i},!0},a=(t,e)=>{l(t-1,e-1),l(t,e-1)},c=(t,e,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=n(t,e+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}if("horizontal"===o)for(let o=0;o<r;o++){const r=n(t+o,e);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}return!1},s=(t,e,r,i)=>{const s=i.getLength();if(c(n(t,e)))return!1;if("vertical"===r){if(((t,e)=>t>=0&&t+e-1<o.length)(e,s)){for(let o=0;o<s;o+=1)l(t,e+o,{...i,position:o}),l(t+1,e+o),l(t-1,e+o);return((t,e,o)=>{a(t,e),l(t,e+o),l(t+1,e+o),l(t-1,e+o),l(t+1,e-1)})(t,e,s),!0}}else if("horizontal"===r&&((t,e)=>t>=0&&t+e-1<o.length)(t,s)){for(let o=0;o<s;o+=1)l(t+o,e,{...i,position:o}),l(t+o,e+1),l(t+o,e-1);return((t,e,o)=>{a(t,e),l(t+o,e),l(t-1,e+1),l(t+o,e+1),l(t+o,e-1)})(t,e,s),!0}return!1},h=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal",e=Math.floor(100*Math.random()),r=(()=>{const t=[...o.flat()];return t.forEach((t=>{!0===t.hasBeenHit?t.availability=!1:t.availability=!0})),t})()[e];return!1===r.availability?h():{elementColumn:r.column,elementRow:r.row,randomDirection:t}};return{clearBoard:()=>{o=e()},checkIfLocationIsAShipOrOffLimits:c,checkIfOffLimitZoneWasCorrectlyImplemented:t=>o.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,e)=>{o[t][e].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let t=!0;for(let e=0;e<10;e++)for(let o=0;o<10;o++){const r=n(e,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){t=!1;break}}return t},placeShip:s,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<i.length;e+=1){const o=i[e],{randomColumn:r,randomRow:n,randomDirection:l}=h(o.getLength());s(r,n,l,o)?t.push({randomColumn:r,randomRow:n,randomDirection:l}):e-=1}return t},makeRandomCoordinates:h}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:o,receiveAttack:r})=>{const i=o(t,e);return!1===i.hasBeenHit||i.isShip&&!1===i.getStatus().includes("unhit")?(r(t,e),i.hit?(i.hit(i.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:t=>{t.exports=(t,e="ship")=>{const o=Array(t).fill("unhit");return{getName:()=>e,getLength:()=>o.length,isSunk:()=>o.every((t=>"hit"===t)),hit:e=>{e<t&&(o[e]="hit")},getStatus:()=>o,hasBeenHit:!1,offLimits:!0,isShip:!0}}}},e={};function o(r){var i=e[r];if(void 0!==i)return i.exports;var n=e[r]={exports:{}};return t[r](n,n.exports,o),n.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=o(653),e=o.n(t),r=o(585),i=o.n(r);let n,l=!1,a=!1,c=[],s=[],h=[],u=[];function p(t,e,o,r){l=t,void 0!==e&&(a=e),void 0!==o&&(c=[o,r]),0==s.length&&void 0!==o?s=[o,r]:0!==s.length&&0==h.length&&void 0!==o&&(h=[o,r])}function d(t,e){return u=[],0!==e&&u.push([t,e-1]),9!==e&&u.push([t,e+1]),0!==t&&u.push([t-1,e]),9!==t&&u.push([t+1,e]),u}function f(t,e,o,r,i,p){let f;if(!0===r&&(c=[],s=[],h=[],u=[],l=!1,a=!1,n=""),!a&&!l)return f=e.randomPos(),S(e,o,f[0],f[1],i,p);if(0!==h.length&&l&&!t){let t;if(s[0]==h[0]-1&&(t=m("down")),s[0]==h[0]+1&&(t=m("up")),s[1]==h[1]-1&&(t=m("right")),s[1]==h[1]+1&&(t=m("left")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return S(e,o,t[0],t[1],i,p)}else if(0!==h.length&&a&&!l){let t;if(c=s,h=[],"up"===n&&(t=m("down")),"down"===n&&(t=m("up")),"right"===n&&(t=m("left")),"left"===n&&(t=m("right")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return S(e,o,t[0],t[1])}else if(a){0==u.length&&d(c[0],c[1]),0==u.length&&1==a&&d(s[0],s[1]);const t=u.pop();return S(e,o,t[0],t[1],i,p)}}function m(t){return"left"===t?(n="left",[c[0],c[1]-1]):"right"===t?(n="right",[c[0],c[1]+1]):"down"===t?(n="down",[c[0]+1,c[1]]):"up"===t?(n="up",[c[0]-1,c[1]]):void 0}function S(t,e,o,r,i,n){let l=!1,a=document.querySelector(`.player-board > .cell[column='${o}'][row='${r}']`);console.log(o,r),console.log(t,e);let c=e.attack(o,r,i);if("You hit a ship!"===c&&f(!0,t,e,void 0,i,n),"It's a hit!"===c&&(p(!1),a.classList.add("miss")),"You have already hit this spot!"===c)return p(!0,!0,o,r),a.classList.add("hit"),i.getLocation(o,r).isSunk()&&(l=!0,!0===t.checkIfAllShipsHaveSunk())?v(i,n):f(!1,t,e,l,i,n)}const y=({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const i=e.querySelector(`.cell:nth-child(${10*r+o+1})`);i.setAttribute("column",o),i.setAttribute("row",r);const n=t(o,r);n.isShip&&(i.classList.add("ship"),i.setAttribute("ship-name",n.getName()))}},v=(t,e)=>{if(t.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",o.addEventListener("click",(()=>{location.reload()})),e.textContent="You lose!"}if(e.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",e.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}},g=t=>{switch(t.clearBoard(),document.querySelectorAll(".player-board > .cell").forEach((t=>{t.classList.remove("ship"),t.classList.remove("hit"),t.classList.remove("miss")})),Math.floor(4*Math.random())){case 0:t.placeShip(9,1,"vertical",i()(5)),t.placeShip(0,3,"horizontal",i()(3)),t.placeShip(3,6,"horizontal",i()(2)),t.placeShip(6,5,"horizontal",i()(3)),t.placeShip(3,9,"horizontal",i()(4));break;case 1:t.placeShip(0,2,"horizontal",i()(5)),t.placeShip(4,5,"horizontal",i()(3)),t.placeShip(8,7,"horizontal",i()(2)),t.placeShip(5,9,"horizontal",i()(3)),t.placeShip(6,3,"horizontal",i()(4));break;case 2:t.placeShip(5,1,"horizontal",i()(5)),t.placeShip(3,3,"vertical",i()(3)),t.placeShip(0,0,"vertical",i()(2)),t.placeShip(6,5,"horizontal",i()(3)),t.placeShip(5,9,"horizontal",i()(4));break;default:t.placeShip(0,0,"horizontal",i()(5)),t.placeShip(3,4,"horizontal",i()(3)),t.placeShip(6,7,"horizontal",i()(2)),t.placeShip(9,1,"vertical",i()(3)),t.placeShip(5,9,"horizontal",i()(4))}y(t)};var b=o(61),k=o.n(b);const L=e()(),z=e()(),w=k()(),A=k()();document.querySelector("button.randomize").addEventListener("click",(()=>{g(L)})),g(L),z.placeShip(0,0,"horizontal",i()(5)),z.placeShip(3,4,"horizontal",i()(3)),z.placeShip(6,7,"horizontal",i()(2)),z.placeShip(9,1,"vertical",i()(3)),z.placeShip(5,9,"horizontal",i()(4));const q=(()=>{const t={};return{publish:function(e,o){Array.isArray(t[e])&&t[e].forEach((t=>{t(o)}))},subscribe:function e(o,r){Array.isArray(e[o])||(t[o]=[]),t[o].push(r);const i=t[o].length-1;return{unsubscribe(){t[o].splice(i,1)}}}}})();((t,e,o,r,i)=>{const n=document.querySelector("div.enemy-board");for(let l=0;l<10;l+=1)for(let a=0;a<10;a+=1){const c=n.querySelector(`.cell:nth-child(${10*a+l+1})`);c.setAttribute("column",l),c.setAttribute("row",a),c.addEventListener("click",(()=>{i.publish("click",{cell:c,column:l,row:a,playerBoard:t,enemyBoard:e,player:o,enemy:r})}),{once:!0})}})(L,z,w,A,q),q.subscribe("click",(({cell:t,column:e,row:o,playerBoard:r,enemyBoard:i,player:n,enemy:l})=>{((t,e,o,r,i,n)=>{((t,e,o,r)=>{r.attack(t,e,o)})(t,e,o,i),((t,e,o,r)=>{const i=document.querySelector(`.enemy-board > .cell[column='${e}'][row='${o}']`);r.getLocation(e,o).isShip?i.classList.add("hit"):i.classList.add("miss")})(0,t,e,o)})(e,o,i,0,n);const{elementColumn:a,elementRow:c}=r.makeRandomCoordinates();S(n,l,a,c,r,i),v(r,i)})),y(L)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,