(()=>{var e={653:(e,t,o)=>{const r=o(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1},t=(()=>{const t=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)t[o][r]={...e,column:o,row:r};return t})(),o=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],n=(e,o)=>t?.[e]?.[o],l=(o,r,n=(()=>Object.assign(e,{offLimits:!0}))())=>{if(void 0===t?.[o]?.[r])return!0;const l=t[o][r];return t[o][r]={...l,...n},!0},i=(e,t)=>{l(e-1,t-1),l(e,t-1)},a=(e,o,r,a)=>{const c=a.getLength();if(n(e,o),"vertical"===r){if(((e,o)=>e>=0&&e+o-1<t.length)(o,c)){for(let t=0;t<c;t+=1)l(e,o+t,{...a,position:t}),l(e+1,o+t),l(e-1,o+t);return((e,t,o)=>{i(e,t),l(e,t+o),l(e+1,t+o),l(e-1,t+o),l(e+1,t-1)})(e,o,c),!0}}else if("horizontal"===r&&((e,o)=>e>=0&&e+o-1<t.length)(e,c)){for(let t=0;t<c;t+=1)l(e+t,o,{...a,position:t}),l(e+t,o+1),l(e+t,o-1);return((e,t,o)=>{i(e,t),l(e+o,t),l(e-1,t+1),l(e+o,t+1),l(e+o,t-1)})(e,o,c),!0}return!1},c=()=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal",o=Math.floor(100*Math.random()),r=(()=>{const e=[...t.flat()];return e.forEach((e=>{!0===e.hasBeenHit?e.availability=!1:e.availability=!0})),e})()[o];return!1===r.availability?c():{elementColumn:r.column,elementRow:r.row,randomDirection:e}};return{checkIfOffLimitZoneWasCorrectlyImplemented:e=>t.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:n,receiveAttack:(e,o)=>{t[e][o].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let e=!0;for(let t=0;t<10;t++)for(let o=0;o<10;o++){const r=n(t,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){e=!1;break}}return e},placeShip:a,randomlyPlaceShips:()=>{const e=[];for(let t=0;t<o.length;t+=1){const r=o[t],{randomColumn:n,randomRow:l,randomDirection:i}=c(r.getLength());a(n,l,i,r)?e.push({randomColumn:n,randomRow:l,randomDirection:i}):t-=1}return e},makeRandomCoordinates:c}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:o,receiveAttack:r})=>{const n=o(e,t);return!1===n.hasBeenHit||n.isShip&&!1===n.getStatus().includes("unhit")?(r(e,t),n.hit&&n.hit(n.position),"It's a hit!"):"You have already hit this spot!"}})},585:e=>{e.exports=(e,t="ship")=>{const o=Array(e).fill("unhit");return{getName:()=>t,getLength:()=>o.length,isSunk:()=>o.every((e=>"hit"===e)),hit:t=>{t<e&&(o[t]="hit")},getStatus:()=>o,hasBeenHit:!1,offLimits:!0,isShip:!0}}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var l=t[r]={exports:{}};return e[r](l,l.exports,o),l.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=(e,t,o,r)=>{const n=document.querySelector(`.${e}-board > .cell[column='${t}'][row='${o}']`);r.getLocation(t,o).isShip?n.classList.add("hit"):n.classList.add("miss")},t=(e,t,o,r)=>r.attack(e,t,o),r=e=>{const t=document.querySelector(".player-board");e.forEach((e=>{e.addEventListener("dragstart",(()=>{e.classList.add("dragging")})),e.addEventListener("dragend",(()=>{e.classList.remove("dragging")}))})),t.addEventListener("dragover",(e=>{e.preventDefault();const o=(r=t,n=e.clientY,[...r.querySelectorAll(".cell:not(.dragging)")].reduce(((e,t)=>{const o=t.getBoundingClientRect(),r=n-o.top-o.height/2;return r<0&&r>e.offset?{offset:r,element:t}:e}),{offset:Number.NEGATIVE_INFINITY}).element);var r,n;const l=document.querySelector(".dragging");null===o?t.appendChild(l):t.insertBefore(l,o)}))};var n=o(653),l=o.n(n),i=o(585),a=o.n(i),c=o(61),s=o.n(c);const u=l()(),d=l()(),h=s()(),m=s()(),p=[a()(5,"Carrier"),a()(4,"Battleship"),a()(3,"Destroyer"),a()(3,"Submarine"),a()(2,"Patrol Boat")];u.placeShip(0,0,"horizontal",p[0]),u.placeShip(3,4,"horizontal",p[1]),u.placeShip(6,7,"horizontal",p[2]),u.placeShip(9,1,"vertical",p[3]),u.placeShip(5,9,"horizontal",p[4]),d.placeShip(0,0,"horizontal",a()(5)),d.placeShip(3,4,"horizontal",a()(3)),d.placeShip(6,7,"horizontal",a()(2)),d.placeShip(9,1,"vertical",a()(3)),d.placeShip(5,9,"horizontal",a()(4));const f=(()=>{const e={};return{publish:function(t,o){Array.isArray(e[t])&&e[t].forEach((e=>{e(o)}))},subscribe:function t(o,r){Array.isArray(t[o])||(e[o]=[]),e[o].push(r);const n=e[o].length-1;return{unsubscribe(){e[o].splice(n,1)}}}}})();((e,t,o,r,n)=>{const l=document.querySelector("div.enemy-board");for(let i=0;i<10;i+=1)for(let a=0;a<10;a+=1){const c=l.querySelector(`.cell:nth-child(${10*a+i+1})`);c.setAttribute("column",i),c.setAttribute("row",a),c.addEventListener("click",(()=>{n.publish("click",{cell:c,column:i,row:a,playerBoard:e,enemyBoard:t,player:o,enemy:r})}),{once:!0})}})(u,d,h,m,f),f.subscribe("click",(({cell:o,column:r,row:n,playerBoard:l,enemyBoard:i,player:a,enemy:c})=>{((o,r,n,l)=>{t(o,r,n,l),e("enemy",o,r,n)})(r,n,i,a),((o,r)=>{const{elementColumn:n,elementRow:l}=o.makeRandomCoordinates();t(n,l,o,r),e("player",n,l,o)})(l,c),((e,t)=>{if(e.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",o.addEventListener("click",(()=>{location.reload()})),t.textContent="You win!"}if(t.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",t.textContent="You lose!",o.addEventListener("click",(()=>{location.reload()}))}})(l,i)})),(({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const n=t.querySelector(`.cell:nth-child(${10*r+o+1})`);n.setAttribute("column",o),n.setAttribute("row",r);const l=e(o,r);l.isShip&&(n.classList.add("ship"),n.setAttribute("ship-name",l.getName()),n.setAttribute("draggable",!0))}(()=>{const e=document.querySelectorAll('.cell[ship-name="Patrol Boat"]');r(e);const t=document.querySelectorAll('.cell[ship-name="Submarine"]');r(t);const o=document.querySelectorAll('.cell[ship-name="Carrier"]');r(o);const n=document.querySelectorAll('.cell[ship-name="Battleship"]');r(n);const l=document.querySelectorAll('.cell[ship-name="Destroyer"]');r(l)})()})(u)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,