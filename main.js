(()=>{var t={653:(t,e,o)=>{const r=o(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),o=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],i=(t,o)=>e?.[t]?.[o],a=(o,r,i=(()=>Object.assign(t,{offLimits:!0}))())=>(void 0===e?.[o]?.[r]||(e[o][r]=i),!0),n=(t,e)=>{a(t-1,e-1),a(t,e-1)},s=(t,o,r,i)=>{const s=i.getLength();if("vertical"===r){if(o>=0&&o+s-1<e.length){for(let e=0;e<s;e+=1)a(t,o+e,i),a(t+1,o+e),a(t-1,o+e);return((t,e,o)=>{n(t,e),a(t,e+o),a(t+1,e+o),a(t-1,e+o),a(t+1,e-1)})(t,o,s),!0}}else if("horizontal"===r&&t>=0&&t+s-1<e.length){for(let e=0;e<s;e+=1)a(t+e,o,i),a(t+e,o+1),a(t+e,o-1);return((t,e,o)=>{n(t,e),a(t+o,e),a(t-1,e+1),a(t+o,e+1),a(t+o,e-1)})(t,o,s),!0}return!1},l=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:i,receiveAttack:(t,o)=>{e[t][o].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:s,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<o.length;e+=1){const{randomColumn:r,randomRow:a,randomDirection:n}=l(),c=o[e],h=i(r,a);!0===h.isShip||!0===h.offLimits||!1===s(r,a,n,c)?e-=1:t.push({randomColumn:r,randomRow:a,randomDirection:n})}return t},makeRandomCoordinates:l}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:o,receiveAttack:r})=>void 0===o(t,e).hasBeenHit?(r(t,e),"It's a hit!"):"You have already hit this spot!"})},585:t=>{t.exports=(t,e="ship")=>{const o=Array(t).fill("unhit");return{name:e,getLength:()=>o.length,isSunk:()=>o.every((t=>"hit"===t)),hit:e=>{e<t&&(o[e]="hit")},getStatus:()=>o,isShip:!0}}}},e={};function o(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={exports:{}};return t[r](a,a.exports,o),a.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,o,r)=>{r.attack(t,e,o)},e=(e,o,r,i,a)=>{i.getLocation(o,r).isShip?(e.classList.add("hit"),t(o,r,i,a)):e.classList.add("miss")},r=(e,o,r)=>{const{randomColumn:i,randomRow:a}=o.makeRandomCoordinates();return((e,o,r,i,a)=>{i.getLocation(o,r).isShip?(e.classList.add("hit"),t(o,r,i,a)):e.classList.add("miss")})(e,i,a,o,r),{randomColumn:i,randomRow:a}},i=(t,e,o)=>{const r=document.querySelector(`.cell[column='${e}'][row='${o}']`);r.classList.contains("ship")?r.classList.add("hit"):r.classList.add("miss")};var a=o(653),n=o.n(a),s=o(585),l=o.n(s),c=o(61),h=o.n(c);const d=n()(),m=n()(),u=h()(),p=h()();d.randomlyPlaceShips(),m.placeShip(0,0,"horizontal",l()(5)),m.placeShip(3,4,"horizontal",l()(3)),m.placeShip(6,7,"horizontal",l()(2)),m.placeShip(9,1,"vertical",l()(3)),m.placeShip(5,9,"horizontal",l()(4)),((t,o,a,n)=>{const s=document.querySelector("div.enemy-board");for(let l=0;l<10;l+=1)for(let c=0;c<10;c+=1){const h=s.querySelector(`.cell:nth-child(${10*c+l+1})`);h.setAttribute("column",l),h.setAttribute("row",c),h.addEventListener("click",(()=>{e(h,l,c,o,a);const{randomColumn:s,randomRow:d}=r(h,t,n);i(0,s,d)}),{once:!0})}})(d,m,u,p),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const i=e.querySelector(`.cell:nth-child(${10*r+o+1})`);i.setAttribute("column",o),i.setAttribute("row",r),t(r,o).isShip&&i.classList.add("ship")}})(d)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,