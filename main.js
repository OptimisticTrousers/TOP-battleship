(()=>{var t={653:(t,e,r)=>{const o=r(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],a=(t,r)=>e?.[t]?.[r],i=(r,o,a=(()=>Object.assign(t,{offLimits:!0}))())=>(void 0===e?.[r]?.[o]||(e[r][o]=a),!0),n=(t,e)=>{i(t-1,e-1),i(t,e-1)},l=(t,r,o,a)=>{const l=a.getLength();if("vertical"===o){if(r>=0&&r+l-1<e.length){for(let e=0;e<l;e+=1)i(t,r+e,a),i(t+1,r+e),i(t-1,r+e);return((t,e,r)=>{n(t,e),i(t,e+r),i(t+1,e+r),i(t-1,e+r),i(t+1,e-1)})(t,r,l),!0}}else if("horizontal"===o&&t>=0&&t+l-1<e.length){for(let e=0;e<l;e+=1)i(t+e,r,a),i(t+e,r+1),i(t+e,r-1);return((t,e,r)=>{n(t,e),i(t+r,e),i(t-1,e+1),i(t+r,e+1),i(t+r,e-1)})(t,r,l),!0}return!1},s=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:a,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:l,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:i,randomDirection:n}=s(),c=r[e],h=a(o,i);!0===h.isShip||!0===h.offLimits||!1===l(o,i,n,c)?e-=1:t.push({randomColumn:o,randomRow:i,randomDirection:n})}return t},makeRandomCoordinates:s}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:r,receiveAttack:o})=>void 0===r(t,e).hasBeenHit?(o(t,e),"It's a hit!"):"You have already hit this spot!"})},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,isShip:!0}}}},e={};function r(o){var a=e[o];if(void 0!==a)return a.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,r,o,a)=>{o.getLocation(e,r).isShip&&(t.classList.add("hit"),((t,e,r,o)=>{o.attack(t,e,r)})(e,r,o,a))};var e=r(653),o=r.n(e),a=r(585),i=r.n(a),n=r(61),l=r.n(n);const s=o()(),c=o()(),h=l()(),d=l()();s.randomlyPlaceShips(),c.placeShip(0,0,"horizontal",i()(5)),c.placeShip(3,4,"horizontal",i()(3)),c.placeShip(6,7,"horizontal",i()(2)),c.placeShip(9,1,"vertical",i()(3)),c.placeShip(5,9,"horizontal",i()(4)),((e,r)=>{const o=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let i=0;i<10;i+=1){const n=o.querySelector(`.cell:nth-child(${10*i+a+1})`);n.setAttribute("column",a),n.setAttribute("row",i),n.addEventListener("click",(()=>{t(n,a,i,e,r)}))}})(c,h),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const a=e.querySelector(`.cell:nth-child(${10*o+r+1})`);a.setAttribute("column",r),a.setAttribute("row",o),t(o,r).isShip&&a.classList.add("ship")}})(s);const{randomColumn:u,randomRow:m}=c.makeRandomCoordinates();var p,f;d.attack(u,m,s),p=u,f=m,document.querySelector(`.cell[column='${p}'][row='${f}']`).classList.add("hit")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,