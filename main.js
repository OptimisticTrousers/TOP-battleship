(()=>{var e={653:(e,t,a)=>{const i=a(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1};let t=!1;const a=()=>{const t=Array(10).fill().map((()=>Array(10).fill()));for(let a=0;a<10;a++)for(let i=0;i<10;i++)t[a][i]={...e,column:a,row:i};return t};let l=a();i(5,"Carrier"),i(4,"Battleship"),i(3,"Destroyer"),i(3,"Submarine"),i(2,"Patrol Boat");const o=(e,t)=>l?.[e]?.[t],r=(t,a,i=(()=>Object.assign(e,{offLimits:!0}))())=>{if(void 0===l?.[t]?.[a])return!0;const o=l[t][a];return l[t][a]={...o,...i},!0},c=(e,t)=>{r(e-1,t-1),r(e,t-1)},n=(e,t,a,i)=>{if("vertical"===a)for(let a=0;a<i;a++){const i=o(e,t+a);if(i&&!0===i.isShip&&!0===i.offLimits)return!0}if("horizontal"===a)for(let a=0;a<i;a++){const i=o(e+a,t);if(i&&!0===i.isShip&&!0===i.offLimits)return!0}return!1},p=(e,t,a,i)=>{if(l[e][t].isShip||l[e][t].offLimits)return!1;const p=i.getLength();if(n(o(e,t)))return!1;if("vertical"===a){if(((e,t)=>e>=0&&e+t-1<l.length)(t,p)){for(let a=0;a<p;a+=1)r(e,t+a,{...i,position:a}),r(e+1,t+a),r(e-1,t+a);return((e,t,a)=>{c(e,t),r(e,t+a),r(e+1,t+a),r(e-1,t+a),console.log(e-1,t+a),r(e+1,t-1)})(e,t,p),!0}}else if("horizontal"===a&&((e,t)=>e>=0&&e+t-1<l.length)(e,p)){for(let a=0;a<p;a+=1)r(e+a,t,{...i,position:a}),r(e+a,t+1),r(e+a,t-1);return((e,t,a)=>{c(e,t),r(e+a,t),r(e-1,t+1),r(e+a,t+1),r(e+a,t-1),r(e-1,t)})(e,t,p),!0}return!1},h=()=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal",t=Math.floor(100*Math.random()),a=(()=>{const e=[...l.flat()];return e.forEach((e=>{!0===e.hasBeenHit?e.availability=!1:e.availability=!0})),e})()[t];return!1===a.availability?h():{elementColumn:a.column,elementRow:a.row,randomDirection:e}};let s=e=>{let t=Math.floor(10*Math.random()),a=Math.floor(10*Math.random()),l=Math.round(Math.random());return(0!==l||(l="horizontal",0!=p(t,a,l,i(e))))&&(1!==l||(l="vertical",0!=p(t,a,l,i(e))))&&void 0};return{clearBoard:()=>{l=a()},checkIfLocationIsAShipOrOffLimits:n,checkIfOffLimitZoneWasCorrectlyImplemented:e=>l.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:o,receiveAttack:(e,t)=>{l[e][t].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let e=!0;for(let t=0;t<10;t++)for(let a=0;a<10;a++){const i=o(t,a);if(!1!==i.isShip&&i.isShip&&!1===i.isSunk()){e=!1;break}}return e},placeShip:p,randomlyPlaceShips:()=>{switch(l.clearBoard(),clearBoardDOM(),Math.floor(4*Math.random())){case 0:l.placeShip(1,1,"horizontal",i(4)),l.placeShip(1,4,"horizontal",i(4)),l.placeShip(7,3,"horizontal",i(3)),l.placeShip(2,7,"horizonal",i(3)),l.placeShip(6,7,"horizontal",i(2)),l.placeShip(5,9,"horizontal",i(2)),l.placeShip(8,1,"vertical",i(1)),l.placeShip(9,5,"vertical",i(1));break;case 1:l.placeShip(0,1,"vertical",i(4)),l.placeShip(8,1,"vertical",i(4)),l.placeShip(3,1,"horizontal",i(3)),l.placeShip(0,7,"vertical",i(3)),l.placeShip(3,6,"horizontal",i(2)),l.placeShip(8,7,"horizontal",i(2)),l.placeShip(4,8,"vertical",i(1)),l.placeShip(6,7,"vertical",i(1));break;case 2:l.placeShip(0,1,"horizontal",i(4)),l.placeShip(0,3,"horizontal",i(4)),l.placeShip(9,1,"vertical",i(3)),l.placeShip(2,8,"horizontal",i(3)),l.placeShip(5,3,"vertical",i(2)),l.placeShip(0,6,"vertical",i(2)),l.placeShip(1,6,"vertical",i(1)),l.placeShip(7,4,"vertical",i(1));break;case 3:l.placeShip(0,0,"vertical",i(4)),l.placeShip(9,0,"vertical",i(4)),l.placeShip(0,5,"vertical",i(3)),l.placeShip(3,1,"vertical",i(3)),l.placeShip(5,1,"vertical",i(2)),l.placeShip(7,1,"vertical",i(2)),l.placeShip(4,7,"vertical",i(1)),l.placeShip(8,7,"vertical",i(1));break;case 4:l.placeShip(2,4,"horizontal",i(4)),l.placeShip(0,6,"vertical",i(4)),l.placeShip(2,7,"horizontal",i(3)),l.placeShip(6,6,"horizontal",i(3)),l.placeShip(7,1,"horizontal",i(2)),l.placeShip(6,8,"horizontal",i(2)),l.placeShip(2,1,"horizontal",i(1)),l.placeShip(4,1,"horizontal",i(1));break;case 5:l.placeShip(1,3,"horizontal",i(4)),l.placeShip(6,2,"vertical",i(4)),l.placeShip(0,6,"vertical",i(3)),l.placeShip(8,2,"vertical",i(3)),l.placeShip(0,0,"horizontal",i(2)),l.placeShip(2,6,"horizontal",i(2)),l.placeShip(9,6,"vertical",i(1)),l.placeShip(5,9,"vertical",i(1));break;case 6:l.placeShip(0,0,"vertical",i(4)),l.placeShip(0,6,"vertical",i(4)),l.placeShip(0,2,"horizontal",i(3)),l.placeShip(6,1,"horizontal",i(3)),l.placeShip(8,3,"horizontal",i(2)),l.placeShip(9,5,"vertical",i(2)),l.placeShip(9,8,"vertical",i(1)),l.placeShip(7,9,"vertical",i(1));break;case 7:l.placeShip(0,1,"vertical",i(4)),l.placeShip(0,6,"vertical",i(4)),l.placeShip(2,0,"horizontal",i(3)),l.placeShip(6,0,"horizontal",i(3)),l.placeShip(9,2,"vertical",i(2)),l.placeShip(9,6,"vertical",i(2)),l.placeShip(9,9,"vertical",i(1)),l.placeShip(7,9,"vertical",i(1));break;case 8:l.placeShip(2,0,"vertical",i(4)),l.placeShip(7,1,"vertical",i(4)),l.placeShip(2,5,"horizontal",i(3)),l.placeShip(6,7,"vertical",i(3)),l.placeShip(1,9,"horizontal",i(2)),l.placeShip(2,7,"horizontal",i(2)),l.placeShip(9,6,"vertical",i(1)),l.placeShip(8,9,"vertical",i(1));break;case 9:l.placeShip(0,0,"horizontal",i(4)),l.placeShip(5,2,"vertical",i(1)),l.placeShip(2,6,"vertical",i(1)),l.placeShip(0,8,"horizontal",i(3)),l.placeShip(4,5,"vertical",i(4)),l.placeShip(7,4,"horizontal",i(2)),l.placeShip(6,6,"horizontal",i(2)),l.placeShip(7,8,"horizontal",i(3))}},makeRandomCoordinates:h,checkIfBoardHasBeenFullyPopulated:()=>{const e=l.flat();let t=0;return e.forEach((e=>{e.isShip&&t++})),20===t},randomFleet:()=>{for(let e=0;e<2;)0!=s(1)&&e++;for(let e=0;e<2;)0!=s(2)&&e++;for(let e=0;e<2;)0!=s(3)&&e++;for(let e=0;e<2;)0!=s(4)&&e++;t=!0},gameBoard:l,isStartAllowed:{get:function(){return t},set:function(e){t=e}}}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:a,receiveAttack:i})=>{const l=a(e,t);return!1===l.hasBeenHit||l.isShip&&!1===l.getStatus().includes("unhit")?(i(e,t),l.hit?(l.hit(l.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:e=>{e.exports=(e,t="ship")=>{const a=Array(e).fill("unhit");return{getName:()=>t,getLength:()=>a.length,isSunk:()=>a.every((e=>"hit"===e)),hit:t=>{t<e&&(a[t]="hit")},getStatus:()=>a,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},t={};function a(i){var l=t[i];if(void 0!==l)return l.exports;var o=t[i]={exports:{}};return e[i](o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var i in t)a.o(t,i)&&!a.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=a(653),t=a.n(e),i=a(585),l=a.n(i);let o,r=!1,c=!1,n=[],p=[],h=[],s=[];function d(e,t,a,i){r=e,void 0!==t&&(c=t),void 0!==a&&(n=[a,i]),0==p.length&&void 0!==a?p=[a,i]:0!==p.length&&0==h.length&&void 0!==a&&(h=[a,i])}function u(e,t){return s=[],0!==t&&s.push([e,t-1]),9!==t&&s.push([e,t+1]),0!==e&&s.push([e-1,t]),9!==e&&s.push([e+1,t]),s}function S(e,t,a,i,l,d){let S;if(!0===i&&(n=[],p=[],h=[],s=[],r=!1,c=!1,o=""),!c&&!r)return S=t.randomPos(),y(t,a,S[0],S[1],l,d);if(0!==h.length&&r&&!e){let e;if(p[0]==h[0]-1&&(e=f("down")),p[0]==h[0]+1&&(e=f("up")),p[1]==h[1]-1&&(e=f("right")),p[1]==h[1]+1&&(e=f("left")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return y(t,a,e[0],e[1],l,d)}else if(0!==h.length&&c&&!r){let e;if(n=p,h=[],"up"===o&&(e=f("down")),"down"===o&&(e=f("up")),"right"===o&&(e=f("left")),"left"===o&&(e=f("right")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return y(t,a,e[0],e[1],l,d)}else if(c){0==s.length&&u(n[0],n[1]),0==s.length&&1==c&&u(p[0],p[1]);const e=s.pop();return y(t,a,e[0],e[1],l,d)}}function f(e){return"left"===e?(o="left",[n[0],n[1]-1]):"right"===e?(o="right",[n[0],n[1]+1]):"down"===e?(o="down",[n[0]+1,n[1]]):"up"===e?(o="up",[n[0]-1,n[1]]):void 0}let v=0;function m(e,t){let a=2;const i=document.querySelector(e),o=document.querySelector("body"),r=document.querySelectorAll(".player-board > .cell"),c=i.childNodes;let n,p,h="horizontal";c[0]&&c[0].addEventListener("mouseenter",(()=>p=0)),c[1]&&c[1].addEventListener("mouseenter",(()=>p=-1)),c[2]&&c[2].addEventListener("mouseenter",(()=>p=-2)),c[3]&&c[3].addEventListener("mouseenter",(()=>p=-3)),i.addEventListener("click",(e=>function(e){"horizontal"===h?(h="vertical",e.target.parentNode.classList.toggle("rotated")):(h="horizontal",e.target.parentNode.classList.toggle("rotated"))}(e))),i.addEventListener("dragstart",(e=>{for(let e=0;e<10;e++)t.gameBoard[e].forEach(((e,t)=>{(e.offLimits||e.isShip)&&document.querySelector(`.player-board > .cell[column='${e.column}'][row='${e.row}']`).classList.toggle("not-available")}))})),i.addEventListener("dragend",((o,r)=>{if(document.querySelectorAll(".not-available").forEach((e=>e.classList.remove("not-available"))),-1===n)return;let c,s,d=`${n}`;n<10?(c=0,s=n):(d=d.split(""),c=1*d[0],s=1*d[1]),"horizontal"===h&&(s+=p),"vertical"===h&&(c+=p),s<0||".ship-1"===e&&!1===t.placeShip(s,c,h,l()(1))||".ship-2"===e&&!1===t.placeShip(s,c,h,l()(2))||".ship-3"===e&&!1===t.placeShip(s,c,h,l()(3))||".ship-4"===e&&!1===t.placeShip(s,c,h,l()(4))||(L(t),a-=1,v++,8===v&&t.isStartAllowed.set(!0),i.parentNode.firstChild.textContent=`${a}x`,0===a&&(i.parentNode.style.display="none"),!t.checkIfBoardHasBeenFullyPopulated())||(document.querySelector("body > main > div.player > div:nth-child(4)").style.display="none",document.querySelector(".randomize").style.display="none",t.isStartAllowed.set(!0))})),r.forEach(((e,t)=>{e.addEventListener("dragover",(e=>{e.preventDefault(),n=t}))})),o.addEventListener("dragenter",(()=>{n=-1}))}async function y(e,t,a,i,l,o){let r=!1;const c=document.querySelector(`.player-board > .cell[column='${a}'][row='${i}']`),n=t.attack(a,i,l);if("You have already hit this spot!"===n&&S(!0,e,t,void 0,l,o),"It's a hit!"===n&&(d(!1),c.classList.add("miss")),"You hit a ship!"===n)return d(!0,!0,a,i),c.classList.add("hit"),l.getLocation(a,i).domTargets.push(c),l.getLocation(a,i).isSunk()&&(l.getLocation(a,i).domTargets.forEach((e=>e.classList.add("sunk"))),r=!0,!0===l.checkIfAllShipsHaveSunk())?b(l,o):(await g(1e3),S(!1,e,t,r,l,o))}function g(e){return new Promise((t=>{setTimeout((()=>{t(2)}),e)}))}const L=({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let a=0;a<10;a+=1)for(let i=0;i<10;i+=1){const l=t.querySelector(`.cell:nth-child(${10*i+a+1})`);l.setAttribute("column",a),l.setAttribute("row",i);const o=e(a,i);o.isShip&&(l.classList.add("ship"),l.setAttribute("ship-name",o.getName()))}},b=(e,t)=>{if(e.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),a=document.querySelector(".modal-content > button");e.style.display="block",a.addEventListener("click",(()=>{location.reload()})),t.textContent="You lose!"}if(t.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),a=document.querySelector(".modal-content > button");e.style.display="block",t.textContent="You win!",a.addEventListener("click",(()=>{location.reload()}))}};var z=a(61),k=a.n(z);const A=t()(),E=t()(),w=k()(),q=k()();document.querySelector("button.randomize").addEventListener("click",(()=>{A.randomlyPlaceShips(),document.querySelectorAll(".player-board > .cell").forEach((e=>{e.classList.remove("ship"),e.classList.remove("hit"),e.classList.remove("miss")}))})),document.querySelector("button.reset").addEventListener("click",(()=>{location.reload()})),function(e){function t(e,t){const a=document.querySelector("body > main > div.player > div:nth-child(4)"),i=document.createElement("div");i.classList.add("ship-container"),a.appendChild(i);const l=document.createElement("span");l.classList.add(`info-${e}`),l.textContent="2x",i.appendChild(l);const o=document.createElement("div");o.classList.add("ship"),o.classList.add(`ship-${e}`),o.setAttribute("draggable","true"),i.appendChild(o);for(let e=0;e<t;e++){const e=document.createElement("div");e.classList.add("cell"),o.appendChild(e)}}t(1,1),t(2,2),t(3,3),t(4,4);for(let t=1;t<5;t++)m(`.ship-${t}`,e)}(A),E.placeShip(0,0,"horizontal",l()(5)),E.placeShip(3,4,"horizontal",l()(3)),E.placeShip(6,7,"horizontal",l()(2)),E.placeShip(9,1,"vertical",l()(3)),E.placeShip(5,9,"horizontal",l()(4));const B=(()=>{const e={};return{publish:function(t,a){Array.isArray(e[t])&&e[t].forEach((e=>{e(a)}))},subscribe:function t(a,i){Array.isArray(t[a])||(e[a]=[]),e[a].push(i);const l=e[a].length-1;return{unsubscribe(){e[a].splice(l,1)}}}}})();((e,t,a,i,l)=>{const o=document.querySelector("div.enemy-board");for(let r=0;r<10;r+=1)for(let c=0;c<10;c+=1){const n=o.querySelector(`.cell:nth-child(${10*c+r+1})`);n.setAttribute("column",r),n.setAttribute("row",c),n.addEventListener("click",(()=>{!1!==e.isStartAllowed.get()&&l.publish("click",{cell:n,column:r,row:c,playerBoard:e,enemyBoard:t,player:a,enemy:i})}),{once:!0})}})(A,E,w,q,B),B.subscribe("click",(({cell:e,column:t,row:a,playerBoard:i,enemyBoard:l,player:o,enemy:r})=>{(async(e,t,a,i,l,o)=>{((e,t,a,i)=>{i.attack(e,t,a)})(e,t,a,l),((e,t,a,i)=>{const l=document.querySelector(`.enemy-board > .cell[column='${t}'][row='${a}']`);i.getLocation(t,a)?.isShip&&(i.getLocation(t,a).domTargets.push(l),i.getLocation(t,a).isSunk()&&i.getLocation(t,a).domTargets.forEach((e=>e.classList.add("sunk")))),i.getLocation(t,a).isShip?l.classList.add("hit"):l.classList.add("miss")})(0,e,t,a),await g(700),a.checkIfAllShipsHaveSunk()?b(i,a):S(!1,l,o,void 0,i,a)})(t,a,l,i,o,r)})),L(A)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,