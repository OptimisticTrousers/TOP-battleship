(()=>{var t={653:(t,e,r)=>{const o=r(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=(t,r)=>e?.[t]?.[r],a=(r,o,n=(()=>Object.assign(t,{offLimits:!0}))())=>(void 0===e?.[r]?.[o]||(e[r][o]=n),!0),i=(t,e)=>{a(t-1,e-1),a(t,e-1)},s=(t,r,o,n)=>{const s=n.getLength();if("vertical"===o){if(r>=0&&r+s-1<e.length){for(let e=0;e<s;e+=1)a(t,r+e,n),a(t+1,r+e),a(t-1,r+e);return((t,e,r)=>{i(t,e),a(t,e+r),a(t+1,e+r),a(t-1,e+r),a(t+1,e-1)})(t,r,s),!0}}else if("horizontal"===o&&t>=0&&t+s-1<e.length){for(let e=0;e<s;e+=1)a(t+e,r,n),a(t+e,r+1),a(t+e,r-1);return((t,e,r)=>{i(t,e),a(t+r,e),a(t-1,e+1),a(t+r,e+1),a(t+r,e-1)})(t,r,s),!0}return!1},l=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:s,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:a,randomDirection:i}=l(),c=r[e],h=n(o,a);!0===h.isShip||!0===h.offLimits||!1===s(o,a,i,c)?e-=1:t.push({randomColumn:o,randomRow:a,randomDirection:i})}return t},makeRandomCoordinates:l}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:r,receiveAttack:o})=>void 0===r(t,e).hasBeenHit?(o(t,e),"It's a hit!"):"You have already hit this spot!"})},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,isShip:!0}}}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,r),a.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,r,o)=>{o.attack(t,e,r)};var e=r(653),o=r.n(e),n=r(585),a=r.n(n),i=r(61),s=r.n(i);const l=o()(),c=o()(),h=s()(),d=s()();l.randomlyPlaceShips(),c.placeShip(0,0,"horizontal",a()(5)),c.placeShip(3,4,"horizontal",a()(3)),c.placeShip(6,7,"horizontal",a()(2)),c.placeShip(9,1,"vertical",a()(3)),c.placeShip(5,9,"horizontal",a()(4));const u=(()=>{const t={};return{publish:function(e,r){Array.isArray(t[e])&&t[e].forEach((t=>{t(r)}))},subscribe:function e(r,o){Array.isArray(e[r])||(t[r]=[]),t[r].push(o);const n=t[r].length-1;return{unsubscribe(){t[r].splice(n,1)}}}}})();((t,e,r,o,n)=>{const a=document.querySelector("div.enemy-board");for(let i=0;i<10;i+=1)for(let s=0;s<10;s+=1){const l=a.querySelector(`.cell:nth-child(${10*s+i+1})`);l.setAttribute("column",i),l.setAttribute("row",s),l.addEventListener("click",(()=>{n.publish("click",{cell:l,column:i,row:s,playerBoard:t,enemyBoard:e,player:r,enemy:o})}),{once:!0})}})(l,c,h,d,u),u.subscribe("click",(({cell:e,column:r,row:o,playerBoard:n,enemyBoard:a,player:i,enemy:s})=>{((e,r,o,n,a)=>{n.getLocation(r,o).isShip?(e.classList.add("hit"),t(r,o,n,a)):e.classList.add("miss")})(e,r,o,a,i);const{randomColumn:l,randomRow:c}=((e,r,o)=>{const{randomColumn:n,randomRow:a}=r.makeRandomCoordinates();return r.getLocation(n,a).isShip?(e.classList.add("hit"),t(n,a,r,o)):e.classList.add("miss"),{randomColumn:n,randomRow:a}})(e,n,s);((t,e)=>{const r=document.querySelector(`.cell[column='${t}'][row='${e}']`);r.classList.contains("ship")?r.classList.add("hit"):r.classList.add("miss")})(l,c)})),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=e.querySelector(`.cell:nth-child(${10*o+r+1})`);n.setAttribute("column",r),n.setAttribute("row",o),t(o,r).isShip&&n.classList.add("ship")}})(l)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvcGxheWVyL3BsYXllci5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9zaGlwL3NoaXAuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZG9tLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuY29uc3QgY3JlYXRlU2hpcCA9IHJlcXVpcmUoJy4uL3NoaXAvc2hpcCcpXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5jb25zdCBjcmVhdGVHYW1lQm9hcmQgPSAoKSA9PiB7XG4gICAgY29uc3QgZW1wdHlDZWxsID0geyBoYXNCZWVuSGl0OiBmYWxzZSwgaXNTaGlwOiBmYWxzZSwgb2ZmTGltaXRzOiBmYWxzZSB9XG4gICAgY29uc3QgZ2FtZUJvYXJkID0gQXJyYXkoMTApXG4gICAgICAgIC5maWxsKHN0cnVjdHVyZWRDbG9uZShlbXB0eUNlbGwpKVxuICAgICAgICAubWFwKCgpID0+IEFycmF5KDEwKS5maWxsKHN0cnVjdHVyZWRDbG9uZShlbXB0eUNlbGwpKSlcblxuICAgIGNvbnN0IHNoaXBzID0gW1xuICAgICAgICBjcmVhdGVTaGlwKDUsICdDYXJyaWVyJyksXG4gICAgICAgIGNyZWF0ZVNoaXAoNCwgJ0JhdHRsZXNoaXAnKSxcbiAgICAgICAgY3JlYXRlU2hpcCgzLCAnRGVzdHJveWVyJyksXG4gICAgICAgIGNyZWF0ZVNoaXAoMywgJ1N1Ym1hcmluZScpLFxuICAgICAgICBjcmVhdGVTaGlwKDIsICdQYXRyb2wgQm9hdCcpLFxuICAgIF1cblxuICAgIGNvbnN0IGNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rID0gKCkgPT5cbiAgICAgICAgZ2FtZUJvYXJkLmZsYXQoKS5ldmVyeShcbiAgICAgICAgICAgIChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuaXNTaGlwID09PSBmYWxzZSkgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5pc1NoaXAgPT09IHRydWUgJiYgY2VsbC5oYXNCZWVuSGl0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxsLmdldFN0YXR1cygpLmV2ZXJ5KCh1bml0KSA9PiB1bml0ID09PSAnaGl0JylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIChwb3NpdGlvbi5pc1NoaXAgPT09IGZhbHNlKSB8fFxuICAgICAgICAgICAgLy8gKHBvc2l0aW9uLmlzU2hpcCA9PT0gdHJ1ZSAmJiBwb3NpdGlvbi5oYXNCZWVuSGl0ID09PSB0cnVlKVxuICAgICAgICApXG5cbiAgICBjb25zdCBjcmVhdGVPZmZMaW1pdExvY2F0aW9uID0gKCkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbXB0eUNlbGwsIHsgb2ZmTGltaXRzOiB0cnVlIH0pXG5cbiAgICBjb25zdCBnZXRMb2NhdGlvbiA9IChjb2x1bW4sIHJvdykgPT4gZ2FtZUJvYXJkPy5bY29sdW1uXT8uW3Jvd11cblxuICAgIGNvbnN0IHNldExvY2F0aW9uID0gKGNvbHVtbiwgcm93LCBzaGlwID0gY3JlYXRlT2ZmTGltaXRMb2NhdGlvbigpKSA9PiB7XG4gICAgICAgIGlmIChnYW1lQm9hcmQ/Lltjb2x1bW5dPy5bcm93XSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZVxuICAgICAgICBnYW1lQm9hcmRbY29sdW1uXVtyb3ddID0gc2hpcFxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGFkZE9mZkxpbWl0QXJlYUZvclNoaXBzID0gKGNvbHVtbiwgcm93KSA9PiB7XG4gICAgICAgIC8vIHRvcC1sZWZ0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdyAtIDEpXG4gICAgICAgIC8vIHRvcFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4sIHJvdyAtIDEpXG4gICAgfVxuXG4gICAgY29uc3QgYWRkT2ZmTGltaXRBcmVhRm9ySG9yaXpvbnRhbGx5UG9zaXRpb25lZFNoaXAgPSAoXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgcm93LFxuICAgICAgICBzaGlwTGVuZ3RoXG4gICAgKSA9PiB7XG4gICAgICAgIC8vIHBvc2l0aW9ucyByZWxhdGl2ZSB0byB0aGUgc2hpcCBpdHNlbGYoaWUuIGEgaG9yaXpvbnRhbCBzaGlwJ3MgYm90dG9tIGlzIHRvIHRoZSByaWdodClcblxuICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JTaGlwcyhjb2x1bW4sIHJvdylcbiAgICAgICAgLy8gYm90dG9tXG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIHNoaXBMZW5ndGgsIHJvdylcbiAgICAgICAgLy8gYm90dG9tLWxlZnRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uIC0gMSwgcm93ICsgMSlcbiAgICAgICAgLy8gYm90dG9tLXJpZ2h0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIHNoaXBMZW5ndGgsIHJvdyArIDEpXG4gICAgICAgIC8vIHRvcC1yaWdodFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBzaGlwTGVuZ3RoLCByb3cgLSAxKVxuICAgIH1cblxuICAgIGNvbnN0IGFkZE9mZkxpbWl0QXJlYUZvclZlcnRpY2FsbHlQb3NpdGlvbmVkU2hpcCA9IChcbiAgICAgICAgY29sdW1uLFxuICAgICAgICByb3csXG4gICAgICAgIHNoaXBMZW5ndGhcbiAgICApID0+IHtcbiAgICAgICAgLy8gcG9zaXRpb25zIHJlbGF0aXZlIHRvIGhvdyB0aGUgdXNlciBzZWVzIGl0KGllLiBhIHZlcnRpY2FsIHNoaXAncyBib3R0b20gaXMgdG8gdGhlIGJvdHRvbSlcblxuICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JTaGlwcyhjb2x1bW4sIHJvdylcbiAgICAgICAgLy8gYm90dG9tXG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiwgcm93ICsgc2hpcExlbmd0aClcbiAgICAgICAgLy8gYm90dG9tLXJpZ2h0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIDEsIHJvdyArIHNoaXBMZW5ndGgpXG4gICAgICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdyArIHNoaXBMZW5ndGgpXG4gICAgICAgIC8vIHRvcC1yaWdodFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyAxLCByb3cgLSAxKVxuICAgIH1cblxuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChjb2x1bW4sIHJvdywgZGlyZWN0aW9uLCBzaGlwKSA9PiB7XG4gICAgICAgIGNvbnN0IHNoaXBMZW5ndGggPSBzaGlwLmdldExlbmd0aCgpXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIGlmIChyb3cgPj0gMCAmJiByb3cgKyBzaGlwTGVuZ3RoIC0gMSA8IGdhbWVCb2FyZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4sIHJvdyArIGksIHNoaXApXG4gICAgICAgICAgICAgICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIDEsIHJvdyArIGkpXG4gICAgICAgICAgICAgICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdyArIGkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZE9mZkxpbWl0QXJlYUZvclZlcnRpY2FsbHlQb3NpdGlvbmVkU2hpcChcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgIHNoaXBMZW5ndGhcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgICAgaWYgKGNvbHVtbiA+PSAwICYmIGNvbHVtbiArIHNoaXBMZW5ndGggLSAxIDwgZ2FtZUJvYXJkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIGksIHJvdywgc2hpcClcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgaSwgcm93ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgaSwgcm93IC0gMSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkT2ZmTGltaXRBcmVhRm9ySG9yaXpvbnRhbGx5UG9zaXRpb25lZFNoaXAoXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICBzaGlwTGVuZ3RoXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgY29uc3QgbWFrZVJhbmRvbUNvb3JkaW5hdGVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCByYW5kb21EaXJlY3Rpb24gPVxuICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMikgPT09IDAgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnXG4gICAgICAgIGNvbnN0IHJhbmRvbUNvbHVtbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICBjb25zdCByYW5kb21Sb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgICAgcmV0dXJuIHsgcmFuZG9tQ29sdW1uLCByYW5kb21Sb3csIHJhbmRvbURpcmVjdGlvbiB9XG4gICAgfVxuXG4gICAgY29uc3QgcmFuZG9tbHlQbGFjZVNoaXBzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzaGlwRGV0YWlscyA9IFtdXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmFuZG9tQ29sdW1uLCByYW5kb21Sb3csIHJhbmRvbURpcmVjdGlvbiB9ID1cbiAgICAgICAgICAgICAgICBtYWtlUmFuZG9tQ29vcmRpbmF0ZXMoKVxuICAgICAgICAgICAgY29uc3Qgc2hpcCA9IHNoaXBzW2ldXG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93KVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmlzU2hpcCA9PT0gdHJ1ZSB8fFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLm9mZkxpbWl0cyA9PT0gdHJ1ZSB8fFxuICAgICAgICAgICAgICAgIHBsYWNlU2hpcChyYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uLCBzaGlwKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGkgLT0gMVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaGlwRGV0YWlscy5wdXNoKHsgcmFuZG9tQ29sdW1uLCByYW5kb21Sb3csIHJhbmRvbURpcmVjdGlvbiB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaGlwRGV0YWlsc1xuICAgIH1cblxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29sdW1uLCByb3cpID0+IHtcbiAgICAgICAgZ2FtZUJvYXJkW2NvbHVtbl1bcm93XS5oYXNCZWVuSGl0ID0gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCA9IChzaGlwTGVuZ3RoKSA9PlxuICAgICAgICBnYW1lQm9hcmQuZmxhdCgpLmZpbHRlcigoZWxlbWVudCkgPT4gZWxlbWVudC5vZmZMaW1pdHMgPT09IHRydWUpXG4gICAgICAgICAgICAubGVuZ3RoID09PVxuICAgICAgICBzaGlwTGVuZ3RoICsgMlxuICAgIC8vIGFkZGluZyBzaGlwTGVuZ3RoIHBsdXMgdHdvIGJlY2F1c2UgZm9yIGV2ZXJ5IGluY3JlYXNlIGluIHRoZSBzaXplIG9mIHNoaXAsIHRoZSB6b25lcyBjb3ZlcmVkIGluY3JlYXNlIGJ5IDIgdW5pdHNcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCxcbiAgICAgICAgZ2V0TG9jYXRpb24sXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIGNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rLFxuICAgICAgICBwbGFjZVNoaXAsXG4gICAgICAgIHJhbmRvbWx5UGxhY2VTaGlwcyxcbiAgICAgICAgbWFrZVJhbmRvbUNvb3JkaW5hdGVzLFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVHYW1lQm9hcmRcbiIsImNvbnN0IGNyZWF0ZVBsYXllciA9IChuYW1lID0gJ3BsYXllcicpID0+IHtcbiAgICBjb25zdCBnZXROYW1lID0gKCkgPT4gbmFtZVxuXG4gICAgY29uc3QgYXR0YWNrID0gKGNvbHVtbiwgcm93LCB7IGdldExvY2F0aW9uLCByZWNlaXZlQXR0YWNrIH0pID0+IHtcbiAgICAgICAgaWYgKGdldExvY2F0aW9uKGNvbHVtbiwgcm93KS5oYXNCZWVuSGl0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlY2VpdmVBdHRhY2soY29sdW1uLCByb3cpXG4gICAgICAgICAgICByZXR1cm4gXCJJdCdzIGEgaGl0IVwiXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ1lvdSBoYXZlIGFscmVhZHkgaGl0IHRoaXMgc3BvdCEnXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0TmFtZSxcbiAgICAgICAgYXR0YWNrLFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVQbGF5ZXJcbiIsImNvbnN0IGNyZWF0ZVNoaXAgPSAobGVuZ3RoLCBuYW1lID0gJ3NoaXAnKSA9PiB7XG5cbiAgICBjb25zdCBzdGF0dXMgPSBBcnJheShsZW5ndGgpLmZpbGwoJ3VuaGl0JylcblxuICAgIGNvbnN0IGdldExlbmd0aCA9ICgpID0+IHN0YXR1cy5sZW5ndGhcblxuICAgIGNvbnN0IGdldFN0YXR1cyA9ICgpID0+IHN0YXR1c1xuXG4gICAgY29uc3QgaGl0ID0gKHBvc2l0aW9uKSA9PiB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgICAgICAgICAgc3RhdHVzW3Bvc2l0aW9uXSA9ICdoaXQnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpc1N1bmsgPSAoKSA9PiBzdGF0dXMuZXZlcnkoKHBvc2l0aW9uKSA9PiBwb3NpdGlvbiA9PT0gJ2hpdCcpXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBnZXRMZW5ndGgsXG4gICAgICAgIGlzU3VuayxcbiAgICAgICAgaGl0LFxuICAgICAgICBnZXRTdGF0dXMsXG4gICAgICAgIGlzU2hpcDogdHJ1ZSxcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlU2hpcFxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImNvbnN0IGhhbmRsZUF0dGFjayA9IChjb2x1bW4sIHJvdywgZW5lbXlCb2FyZCwgcGxheWVyKSA9PiB7XG4gICAgcGxheWVyLmF0dGFjayhjb2x1bW4sIHJvdywgZW5lbXlCb2FyZClcbn1cblxuY29uc3QgYXR0YWNrRW5lbXlDZWxsID0gKGNlbGwsIGNvbHVtbiwgcm93LCBlbmVteUJvYXJkLCBwbGF5ZXIpID0+IHtcbiAgICBjb25zdCBjZWxsTG9jYXRpb24gPSBlbmVteUJvYXJkLmdldExvY2F0aW9uKGNvbHVtbiwgcm93KVxuICAgIGlmIChjZWxsTG9jYXRpb24uaXNTaGlwKSB7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0JylcbiAgICAgICAgaGFuZGxlQXR0YWNrKGNvbHVtbiwgcm93LCBlbmVteUJvYXJkLCBwbGF5ZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdtaXNzJylcbiAgICB9XG59XG5cbmNvbnN0IGF0dGFja1BsYXllckNlbGwgPSAoY2VsbCwgcGxheWVyQm9hcmQsIGVuZW15KSA9PiB7XG4gICAgY29uc3QgeyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdyB9ID0gcGxheWVyQm9hcmQubWFrZVJhbmRvbUNvb3JkaW5hdGVzKClcbiAgICBjb25zdCBjZWxsTG9jYXRpb24gPSBwbGF5ZXJCb2FyZC5nZXRMb2NhdGlvbihyYW5kb21Db2x1bW4sIHJhbmRvbVJvdylcbiAgICBpZiAoY2VsbExvY2F0aW9uLmlzU2hpcCkge1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2hpdCcpXG4gICAgICAgIGhhbmRsZUF0dGFjayhyYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcGxheWVyQm9hcmQsIGVuZW15KVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnbWlzcycpXG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcmFuZG9tQ29sdW1uLCByYW5kb21Sb3cgfVxufVxuXG5jb25zdCByZW5kZXJFbmVteUF0YWNrcyA9IChjb2x1bW4sIHJvdykgPT4ge1xuICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBgLmNlbGxbY29sdW1uPScke2NvbHVtbn0nXVtyb3c9JyR7cm93fSddYFxuICAgIClcbiAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ3NoaXAnKSkge1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2hpdCcpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdtaXNzJylcbiAgICB9XG59XG5cbi8vIGh0dHBzOi8vanNtYW5pZmVzdC5jb20vdGhlLXB1Ymxpc2gtc3Vic2NyaWJlLXBhdHRlcm4taW4tamF2YXNjcmlwdC9cblxuZXhwb3J0IGNvbnN0IHB1YlN1YiA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IHt9XG5cbiAgICBmdW5jdGlvbiBwdWJsaXNoKGV2ZW50TmFtZSwgZGF0YSkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3Vic2NyaWJlcnNbZXZlbnROYW1lXSkpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXJzW2V2ZW50TmFtZV0uZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpXG4gICAgICAgIH0pXG4gICAgfVxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzdWJzY3JpYmVbZXZlbnROYW1lXSkpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzW2V2ZW50TmFtZV0gPSBbXVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXJzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgY29uc3QgaW5kZXggPSBzdWJzY3JpYmVyc1tldmVudE5hbWVdLmxlbmd0aCAtIDFcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHVibGlzaCxcbiAgICAgICAgc3Vic2NyaWJlLFxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlclBsYXllclNoaXBzID0gKHsgZ2V0TG9jYXRpb24gfSkgPT4ge1xuICAgIGNvbnN0IHBsYXllckJvYXJkQXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5wbGF5ZXItYm9hcmQnKVxuXG4gICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgMTA7IGNvbHVtbiArPSAxKSB7XG4gICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IDEwOyByb3cgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY2VsbCA9IHBsYXllckJvYXJkQXJlYS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgIGAuY2VsbDpudGgtY2hpbGQoJHtyb3cgKiAxMCArIGNvbHVtbiArIDF9KWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdjb2x1bW4nLCBjb2x1bW4pXG4gICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgncm93Jywgcm93KVxuICAgICAgICAgICAgaWYgKGdldExvY2F0aW9uKHJvdywgY29sdW1uKS5pc1NoaXApIHtcbiAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgYWRkTGlzdGVuZXJzVG9FbmVteUJvYXJkID0gKFxuICAgIHBsYXllckJvYXJkLFxuICAgIGVuZW15Qm9hcmQsXG4gICAgcGxheWVyLFxuICAgIGVuZW15LFxuICAgIHBzXG4pID0+IHtcbiAgICBjb25zdCBlbmVteUJvYXJkQXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5lbmVteS1ib2FyZCcpXG5cbiAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCAxMDsgY29sdW1uICs9IDEpIHtcbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICAvLyBDcmVkaXRpbmcgZm9ybXVsYSB0byBjYWxjdWxhdGUgbnRoLWNoaWxkIHVzaW5nIG5lc3RlZCBsb29wOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84ODcyNjYyL21hdGgtdG8tZGV0ZXJtaW5lLWl0ZW0taW5kZXgtYmFzZWQtb24tY29sLXJvdy1zZWxlY3Rpb24taW4tZ3JpZFxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGVuZW15Qm9hcmRBcmVhLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgYC5jZWxsOm50aC1jaGlsZCgke3JvdyAqIDEwICsgY29sdW1uICsgMX0pYFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHVtbicsIGNvbHVtbilcbiAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdyb3cnLCByb3cpXG5cbiAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHMucHVibGlzaCgnY2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyQm9hcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteUJvYXJkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXksXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IG9uY2U6IHRydWUgfVxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgYXR0YWNrID0gKHtcbiAgICBjZWxsLFxuICAgIGNvbHVtbixcbiAgICByb3csXG4gICAgcGxheWVyQm9hcmQsXG4gICAgZW5lbXlCb2FyZCxcbiAgICBwbGF5ZXIsXG4gICAgZW5lbXksXG59KSA9PiB7XG4gICAgLy8gaHVtYW4gcGxheWVyIGF0dGFja2luZyBjb21wdXRlclxuICAgIGF0dGFja0VuZW15Q2VsbChjZWxsLCBjb2x1bW4sIHJvdywgZW5lbXlCb2FyZCwgcGxheWVyKVxuICAgIC8vIGNvbXB1dGVyIGF0dGFja2luZyBodW1hblxuICAgIGNvbnN0IHsgcmFuZG9tQ29sdW1uLCByYW5kb21Sb3cgfSA9IGF0dGFja1BsYXllckNlbGwoXG4gICAgICAgIGNlbGwsXG4gICAgICAgIHBsYXllckJvYXJkLFxuICAgICAgICBlbmVteVxuICAgIClcbiAgICByZW5kZXJFbmVteUF0YWNrcyhyYW5kb21Db2x1bW4sIHJhbmRvbVJvdylcbn0iLCJpbXBvcnQgeyBhZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQsIHJlbmRlclBsYXllclNoaXBzLHB1YlN1YiwgYXR0YWNrfSBmcm9tICcuL2RvbSdcblxuaW1wb3J0IGNyZWF0ZUdhbWVCb2FyZCBmcm9tICcuL2dhbWVib2FyZC9nYW1lYm9hcmQnXG5pbXBvcnQgY3JlYXRlU2hpcCBmcm9tICcuL3NoaXAvc2hpcCdcbmltcG9ydCBjcmVhdGVQbGF5ZXIgZnJvbSAnLi9wbGF5ZXIvcGxheWVyJ1xuXG5jb25zdCBwbGF5ZXJCb2FyZCA9IGNyZWF0ZUdhbWVCb2FyZCgpXG5jb25zdCBlbmVteUJvYXJkID0gY3JlYXRlR2FtZUJvYXJkKClcblxuY29uc3QgcGxheWVyID0gY3JlYXRlUGxheWVyKClcblxuY29uc3QgY29tcHV0ZXIgPSBjcmVhdGVQbGF5ZXIoKVxuXG5wbGF5ZXJCb2FyZC5yYW5kb21seVBsYWNlU2hpcHMoKVxuZW5lbXlCb2FyZC5wbGFjZVNoaXAoMCwgMCwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDUpKVxuZW5lbXlCb2FyZC5wbGFjZVNoaXAoMywgNCwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDMpKVxuZW5lbXlCb2FyZC5wbGFjZVNoaXAoNiwgNywgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDIpKVxuZW5lbXlCb2FyZC5wbGFjZVNoaXAoOSwgMSwgJ3ZlcnRpY2FsJywgY3JlYXRlU2hpcCgzKSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDUsIDksICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCg0KSlcblxuY29uc3QgcHMgPSBwdWJTdWIoKVxuXG5hZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQocGxheWVyQm9hcmQsIGVuZW15Qm9hcmQsIHBsYXllciwgY29tcHV0ZXIsIHBzKVxuXG5wcy5zdWJzY3JpYmUoJ2NsaWNrJywgYXR0YWNrKVxuXG5cbnJlbmRlclBsYXllclNoaXBzKHBsYXllckJvYXJkKSJdLCJuYW1lcyI6WyJjcmVhdGVTaGlwIiwibW9kdWxlIiwiZXhwb3J0cyIsImVtcHR5Q2VsbCIsImhhc0JlZW5IaXQiLCJpc1NoaXAiLCJvZmZMaW1pdHMiLCJnYW1lQm9hcmQiLCJBcnJheSIsImZpbGwiLCJzdHJ1Y3R1cmVkQ2xvbmUiLCJtYXAiLCJzaGlwcyIsImdldExvY2F0aW9uIiwiY29sdW1uIiwicm93Iiwic2V0TG9jYXRpb24iLCJzaGlwIiwiT2JqZWN0IiwiYXNzaWduIiwiY3JlYXRlT2ZmTGltaXRMb2NhdGlvbiIsInVuZGVmaW5lZCIsImFkZE9mZkxpbWl0QXJlYUZvclNoaXBzIiwicGxhY2VTaGlwIiwiZGlyZWN0aW9uIiwic2hpcExlbmd0aCIsImdldExlbmd0aCIsImxlbmd0aCIsImkiLCJhZGRPZmZMaW1pdEFyZWFGb3JWZXJ0aWNhbGx5UG9zaXRpb25lZFNoaXAiLCJhZGRPZmZMaW1pdEFyZWFGb3JIb3Jpem9udGFsbHlQb3NpdGlvbmVkU2hpcCIsIm1ha2VSYW5kb21Db29yZGluYXRlcyIsInJhbmRvbURpcmVjdGlvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmRvbUNvbHVtbiIsInJhbmRvbVJvdyIsImNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCIsImZsYXQiLCJmaWx0ZXIiLCJlbGVtZW50IiwicmVjZWl2ZUF0dGFjayIsImNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rIiwiZXZlcnkiLCJjZWxsIiwiZ2V0U3RhdHVzIiwidW5pdCIsInJhbmRvbWx5UGxhY2VTaGlwcyIsInNoaXBEZXRhaWxzIiwibG9jYXRpb24iLCJwdXNoIiwibmFtZSIsImdldE5hbWUiLCJhdHRhY2siLCJzdGF0dXMiLCJpc1N1bmsiLCJwb3NpdGlvbiIsImhpdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaGFuZGxlQXR0YWNrIiwiZW5lbXlCb2FyZCIsInBsYXllciIsInBsYXllckJvYXJkIiwiY29tcHV0ZXIiLCJwcyIsInN1YnNjcmliZXJzIiwicHVibGlzaCIsImV2ZW50TmFtZSIsImRhdGEiLCJpc0FycmF5IiwiZm9yRWFjaCIsImNhbGxiYWNrIiwic3Vic2NyaWJlIiwiaW5kZXgiLCJ1bnN1YnNjcmliZSIsInNwbGljZSIsInB1YlN1YiIsImVuZW15IiwiZW5lbXlCb2FyZEFyZWEiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsImFkZExpc3RlbmVyc1RvRW5lbXlCb2FyZCIsImNsYXNzTGlzdCIsImFkZCIsImF0dGFja0VuZW15Q2VsbCIsImF0dGFja1BsYXllckNlbGwiLCJjb250YWlucyIsInJlbmRlckVuZW15QXRhY2tzIiwicGxheWVyQm9hcmRBcmVhIiwicmVuZGVyUGxheWVyU2hpcHMiXSwic291cmNlUm9vdCI6IiJ9