(()=>{var t={653:(t,r,e)=>{const o=e(585),n=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},r=Array(10).fill(JSON.parse(JSON.stringify(t))).map((()=>Array(10).fill(JSON.parse(JSON.stringify(t))))),e=[o(5),o(4),o(3),o(3),o(2)],n=(t,e)=>r?.[t]?.[e],i=(t,e,o)=>{r[t][e]=o},a=(t,r,e,o)=>{const n=o.getLength();if("vertical"===e){if(r+n<=10){for(let e=0;e<n;e+=1)i(t,r+e,o);return!0}}else if("horizontal"===e&&t+n<=10){for(let e=0;e<n;e+=1)i(t+e,r,o);return!0}return!1},s=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{getLocation:n,receiveAttack:(t,e)=>{r[t][e].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>r.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:a,randomlyPlaceShips:()=>{const t=[];for(let r=0;r<e.length;r+=1){const{randomColumn:o,randomRow:i,randomDirection:l}=s(),c=e[r],h=n(o,i);!0===h.isShip||!0===h.offLimits||!1===a(o,i,l,c)?r-=1:t.push({randomColumn:o,randomRow:i,randomDirection:l})}return t}}};n().placeShip(0,0,"horizontal",o(3)),t.exports=n},585:t=>{t.exports=t=>{const r=Array(t).fill("unhit");return{getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,isShip:!0}}}},r={};function e(o){var n=r[o];if(void 0!==n)return n.exports;var i=r[o]={exports:{}};return t[o](i,i.exports,e),i.exports}e.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return e.d(r,{a:r}),r},e.d=(t,r)=>{for(var o in r)e.o(r,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},e.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),(()=>{"use strict";var t=e(653);const r=e.n(t)()();r.randomlyPlaceShips(),(({getLocation:t})=>{const r=document.querySelector("div.player-board");for(let e=0;e<10;e+=1)for(let o=0;o<10;o+=1){const n=document.createElement("div");n.classList.add("cell"),t(o,e).isShip&&n.classList.add("ship"),r.appendChild(n)}})(r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,