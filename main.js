(()=>{var t={653:(t,e,r)=>{const o=r(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1};let e=!1;const r=()=>{const e=Array(10).fill().map((()=>Array(10).fill()));for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1)e[r][o]={...t,column:r,row:o};return e};let i=r();const a=()=>{i=r()},n=(t,e)=>i?.[t]?.[e],l=(e,r,o=(()=>Object.assign(t,{offLimits:!0}))())=>{if(void 0===i?.[e]?.[r])return!0;const a=i[e][r];return i[e][r]={...a,...o},!0},c=(t,e)=>{l(t-1,e-1),l(t,e-1)},s=(t,e,r,o)=>{if("vertical"===r)for(let r=0;r<o;r+=1){const o=n(t,e+r);if(o&&!0===o.isShip&&!0===o.offLimits)return!0}if("horizontal"===r)for(let r=0;r<o;r+=1){const o=n(t+r,e);if(o&&!0===o.isShip&&!0===o.offLimits)return!0}return!1},d=(t,e,r,o)=>{if(i[t][e].isShip||i[t][e].offLimits)return!1;const a=o.getLength();if(s(n(t,e)))return!1;if("vertical"===r){if(((t,e)=>t>=0&&t+e-1<i.length)(e,a)){for(let r=0;r<a;r+=1)l(t,e+r,{...o,position:r}),l(t+1,e+r),l(t-1,e+r);return((t,e,r)=>{c(t,e),l(t,e+r),l(t+1,e+r),l(t-1,e+r),l(t+1,e-1)})(t,e,a),!0}}else if("horizontal"===r&&((t,e)=>t>=0&&t+e-1<i.length)(t,a)){for(let r=0;r<a;r+=1)l(t+r,e,{...o,position:r}),l(t+r,e+1),l(t+r,e-1);return((t,e,r)=>{c(t,e),l(t+r,e),l(t-1,e+1),l(t+r,e+1),l(t+r,e-1),l(t-1,e)})(t,e,a),!0}return!1},u=()=>{const t=Math.floor(100*Math.random()),e=(()=>{const t=[...i.flat()];return t.forEach((t=>{!0===t.hasBeenHit?t.availability=!1:t.availability=!0})),t})()[t];return!1===e.availability?u():[e.column,e.row]},h=t=>{const e=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());let i=Math.round(Math.random());return(0!==i||(i="horizontal",!1!==d(e,r,i,o(t))))&&(1!==i||(i="vertical",!1!==d(e,r,i,o(t))))&&void 0};return{clearBoard:a,checkIfLocationIsAShipOrOffLimits:s,checkIfOffLimitZoneWasCorrectlyImplemented:t=>i.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,e)=>{i[t][e].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let t=!0;for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const o=n(e,r);if(!1!==o.isShip&&o.isShip&&!1===o.isSunk()){t=!1;break}}return t},placeShip:d,randomlyPlaceShips:()=>{switch(a(),Math.floor(10*Math.random())){case 0:d(1,1,"horizontal",o(4)),d(1,4,"horizontal",o(4)),d(7,3,"horizontal",o(3)),d(2,7,"horizonal",o(3)),d(6,7,"horizontal",o(2)),d(5,9,"horizontal",o(2)),d(8,1,"vertical",o(1)),d(9,5,"vertical",o(1));break;case 1:d(0,1,"vertical",o(4)),d(8,1,"vertical",o(4)),d(3,1,"horizontal",o(3)),d(0,7,"vertical",o(3)),d(3,6,"horizontal",o(2)),d(8,7,"horizontal",o(2)),d(4,8,"vertical",o(1)),d(6,7,"vertical",o(1));break;case 2:d(0,1,"horizontal",o(4)),d(0,3,"horizontal",o(4)),d(9,1,"vertical",o(3)),d(2,8,"horizontal",o(3)),d(5,3,"vertical",o(2)),d(0,6,"vertical",o(2)),d(1,6,"vertical",o(1)),d(7,4,"vertical",o(1));break;case 3:d(0,0,"vertical",o(4)),d(9,0,"vertical",o(4)),d(0,5,"vertical",o(3)),d(3,1,"vertical",o(3)),d(5,1,"vertical",o(2)),d(7,1,"vertical",o(2)),d(4,7,"vertical",o(1)),d(8,7,"vertical",o(1));break;case 4:d(2,4,"horizontal",o(4)),d(0,6,"vertical",o(4)),d(2,7,"horizontal",o(3)),d(6,6,"horizontal",o(3)),d(7,1,"horizontal",o(2)),d(6,8,"horizontal",o(2)),d(2,1,"horizontal",o(1)),d(4,1,"horizontal",o(1));break;case 5:d(1,3,"horizontal",o(4)),d(6,2,"vertical",o(4)),d(0,6,"vertical",o(3)),d(8,2,"vertical",o(3)),d(0,0,"horizontal",o(2)),d(2,6,"horizontal",o(2)),d(9,6,"vertical",o(1)),d(5,9,"vertical",o(1));break;case 6:d(0,0,"vertical",o(4)),d(0,6,"vertical",o(4)),d(0,2,"horizontal",o(3)),d(6,1,"horizontal",o(3)),d(8,3,"horizontal",o(2)),d(9,5,"vertical",o(2)),d(9,8,"vertical",o(1)),d(7,9,"vertical",o(1));break;case 7:d(0,1,"vertical",o(4)),d(0,6,"vertical",o(4)),d(2,0,"horizontal",o(3)),d(6,0,"horizontal",o(3)),d(9,2,"vertical",o(2)),d(9,6,"vertical",o(2)),d(9,9,"vertical",o(1)),d(7,9,"vertical",o(1));break;case 8:d(2,0,"vertical",o(4)),d(7,1,"vertical",o(4)),d(2,5,"horizontal",o(3)),d(6,7,"vertical",o(3)),d(1,9,"horizontal",o(2)),d(2,7,"horizontal",o(2)),d(9,6,"vertical",o(1)),d(8,9,"vertical",o(1));break;case 9:d(0,0,"horizontal",o(4)),d(5,2,"vertical",o(1)),d(2,6,"vertical",o(1)),d(0,8,"horizontal",o(3)),d(4,5,"vertical",o(4)),d(7,4,"horizontal",o(2)),d(6,6,"horizontal",o(2)),d(7,8,"horizontal",o(3))}},makeRandomCoordinates:u,checkIfBoardHasBeenFullyPopulated:()=>{const t=i.flat();let e=0;return t.forEach((t=>{t.isShip&&(e+=1)})),20===e},randomFleet:()=>{for(let t=0;t<2;)!1!==h(1)&&(t+=1);for(let t=0;t<2;)!1!==h(2)&&(t+=1);for(let t=0;t<2;)!1!==h(3)&&(t+=1);for(let t=0;t<2;)!1!==h(4)&&(t+=1);e=!0},gameBoard:i,isStartAllowed:{get:()=>e,set(t){e=t}}}}},61:t=>{t.exports=(t="player")=>{let e=!1;return{getName:()=>t,attack:(t,e,{getLocation:r,receiveAttack:o})=>{const i=r(t,e);return!1===i.hasBeenHit||i.isShip&&!1===i.getStatus().includes("unhit")?(o(t,e),i.hit?(i.hit(i.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},turn:{get:()=>e,set(t){e=t}},isTurn:t=>{e=!0,t.turn.set(!1)}}}},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{getName:()=>e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},e={};function r(o){var i=e[o];if(void 0!==i)return i.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,r),a.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";let t,e=!1,o=!1,i=[],a=[],n=[],l=[];function c(e){return"left"===e?(t="left",[i[0],i[1]-1]):"right"===e?(t="right",[i[0],i[1]+1]):"down"===e?(t="down",[i[0]+1,i[1]]):"up"===e?(t="up",[i[0]-1,i[1]]):void 0}function s(t,r,l,c){e=t,void 0!==r&&(o=r),void 0!==l&&(i=[l,c]),0===a.length&&void 0!==l?a=[l,c]:0!==a.length&&0===n.length&&void 0!==l&&(n=[l,c])}function d(t,e){return l=[],0!==e&&l.push([t,e-1]),9!==e&&l.push([t,e+1]),0!==t&&l.push([t-1,e]),9!==t&&l.push([t+1,e]),l}function u(r,s,u,h,p,f){let v;if(!0===h&&(i=[],a=[],n=[],l=[],e=!1,o=!1,t=""),!o&&!e)return v=p.makeRandomCoordinates(),S(s,u,v[0],v[1],p,f);if(0!==n.length&&e&&!r){let t;if(a[0]===n[0]-1&&(t=c("down")),a[0]===n[0]+1&&(t=c("up")),a[1]===n[1]-1&&(t=c("right")),a[1]===n[1]+1&&(t=c("left")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return S(s,u,t[0],t[1],p,f)}else if(0!==n.length&&o&&!e){let e;if(i=a,n=[],"up"===t&&(e=c("down")),"down"===t&&(e=c("up")),"right"===t&&(e=c("left")),"left"===t&&(e=c("right")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return S(s,u,e[0],e[1],p,f)}else if(o){0===l.length&&d(i[0],i[1]),0===l.length&&!0===o&&d(a[0],a[1]);const t=l.pop();return S(s,u,t[0],t[1],p,f)}}var h=r(585),p=r.n(h);let f=0;function v(t,e){let r=2;const o=document.querySelector(t),i=document.querySelector("body"),a=document.querySelectorAll(".player-board > .cell"),n=o.childNodes;let l,c,s="horizontal";n[0]&&n[0].addEventListener("mouseenter",(()=>c=0)),n[1]&&n[1].addEventListener("mouseenter",(()=>c=-1)),n[2]&&n[2].addEventListener("mouseenter",(()=>c=-2)),n[3]&&n[3].addEventListener("mouseenter",(()=>c=-3)),o.addEventListener("click",(t=>function(t){"horizontal"===s?(s="vertical",t.target.parentNode.classList.toggle("rotated")):(s="horizontal",t.target.parentNode.classList.toggle("rotated"))}(t))),o.addEventListener("dragstart",(()=>{for(let t=0;t<10;t+=1)e.gameBoard[t].forEach((t=>{(t.offLimits||t.isShip)&&document.querySelector(`.player-board > .cell[column='${t.column}'][row='${t.row}']`).classList.toggle("not-available")}))})),o.addEventListener("dragend",(()=>{if(document.querySelectorAll(".not-available").forEach((t=>t.classList.remove("not-available"))),-1===l)return;let i,a,n=`${l}`;l<10?(i=0,a=l):(n=n.split(""),i=1*n[0],a=1*n[1]),"horizontal"===s&&(a+=c),"vertical"===s&&(i+=c),a<0||".ship-1"===t&&!1===e.placeShip(a,i,s,p()(1))||".ship-2"===t&&!1===e.placeShip(a,i,s,p()(2))||".ship-3"===t&&!1===e.placeShip(a,i,s,p()(3))||".ship-4"===t&&!1===e.placeShip(a,i,s,p()(4))||(g(e),r-=1,f+=1,8===f&&e.isStartAllowed.set(!0),o.parentNode.firstChild.textContent=`${r}x`,0===r&&(o.parentNode.style.display="none"),!e.checkIfBoardHasBeenFullyPopulated())||(document.querySelector("body > main > div.player > div:nth-child(4)").style.display="none",document.querySelector(".randomize").style.display="none",e.isStartAllowed.set(!0))})),a.forEach(((t,e)=>{t.addEventListener("dragover",(t=>{t.preventDefault(),l=e}))})),i.addEventListener("dragenter",(()=>{l=-1}))}function m(t){return new Promise((e=>{setTimeout((()=>{e(2)}),t)}))}const y=(t,e)=>{if(t.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),r=document.querySelector(".modal-content > button");t.style.display="block",r.addEventListener("click",(()=>{location.reload()})),e.textContent="You lose!"}if(e.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),r=document.querySelector(".modal-content > button");t.style.display="block",e.textContent="You win!",r.addEventListener("click",(()=>{location.reload()}))}};async function S(t,e,r,o,i,a){let n=!1;const l=document.querySelector(`.player-board > .cell[column='${r}'][row='${o}']`),c=e.attack(r,o,i);if("You have already hit this spot!"===c&&u(!0,t,e,void 0,i,a),"It's a hit!"===c&&(s(!1),l.classList.add("miss")),"You hit a ship!"===c)return s(!0,!0,r,o),l.classList.add("hit"),i.getLocation(r,o).domTargets.push(l),i.getLocation(r,o).isSunk()&&(i.getLocation(r,o).domTargets.forEach((t=>t.classList.add("sunk"))),n=!0,!0===i.checkIfAllShipsHaveSunk())?y(i,a):(await m(1e3),u(!1,t,e,n,i,a));t.isTurn(e)}const g=({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const i=e.querySelector(`.cell:nth-child(${10*o+r+1})`);i.setAttribute("column",r),i.setAttribute("row",o);const a=t(r,o);a.isShip&&(i.classList.add("ship"),i.setAttribute("ship-name",a.getName()))}};var L=r(653),b=r.n(L),k=r(61),z=r.n(k);const A=b()(),E=b()(),w=z()("player"),q=z()("computer");w.isTurn(q),function(t){document.querySelector("button.randomize").addEventListener("click",(()=>{document.querySelector(".player > div:nth-child(4)").style.display="none",t.randomlyPlaceShips(),t.isStartAllowed.set(!0),g(t)})),document.querySelector("button.reset").addEventListener("click",(()=>{location.reload()}))}(A),function(t){function e(t,e){const r=document.querySelector("body > main > div.player > div:nth-child(4)"),o=document.createElement("div");o.classList.add("ship-container"),r.appendChild(o);const i=document.createElement("span");i.classList.add(`info-${t}`),i.textContent="2x",o.appendChild(i);const a=document.createElement("div");a.classList.add("ship"),a.classList.add(`ship-${t}`),a.setAttribute("draggable","true"),o.appendChild(a);for(let t=0;t<e;t+=1){const t=document.createElement("div");t.classList.add("cell"),a.appendChild(t)}}e(1,1),e(2,2),e(3,3),e(4,4);for(let e=1;e<5;e+=1)v(`.ship-${e}`,t)}(A),E.randomlyPlaceShips();const B=(()=>{const t={};return{publish:function(e,r){Array.isArray(t[e])&&t[e].forEach((t=>{t(r)}))},subscribe:function e(r,o){Array.isArray(e[r])||(t[r]=[]),t[r].push(o);const i=t[r].length-1;return{unsubscribe(){t[r].splice(i,1)}}}}})();((t,e,r,o,i)=>{const a=document.querySelector("div.enemy-board");for(let n=0;n<10;n+=1)for(let l=0;l<10;l+=1){const c=a.querySelector(`.cell:nth-child(${10*l+n+1})`);c.setAttribute("column",n),c.setAttribute("row",l),c.addEventListener("click",(()=>{i.publish("click",{column:n,row:l,playerBoard:t,enemyBoard:e,player:r,enemy:o})}),{once:!0})}})(A,E,w,q,B),B.subscribe("click",(({column:t,row:e,playerBoard:r,enemyBoard:o,player:i,enemy:a})=>{((t,e,r,o,i,a)=>{((t,e,r,o)=>{o.attack(t,e,r)})(t,e,r,i),(async(t,e,r,o,i,a,n)=>{const l=document.querySelector(`.enemy-board > .cell[column='${e}'][row='${r}']`);o.getLocation(e,r)?.isShip?(l.classList.add("hit"),o.getLocation(e,r).domTargets.push(l),o.getLocation(e,r).isSunk()&&o.getLocation(e,r).domTargets.forEach((t=>t.classList.add("sunk")))):(l.classList.add("miss"),a.isTurn(i),await m(700),o.checkIfAllShipsHaveSunk()?y(n,o):u(!1,i,a,void 0,n,o))})(0,t,e,r,i,a,o)})(t,e,o,r,i,a)})),g(A)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,