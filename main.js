(()=>{var t={653:(t,o,e)=>{const r=e(585),i=()=>{const t=Array(10).fill({hasBeenHit:!1,isShip:!1,offLimits:!1}).map((()=>Array(10).fill({hasBeenHit:!1,isShip:!1,offLimits:!1}))),o=[r(5),r(4),r(3),r(3),r(2)],e=(o,e)=>t[o][e],i=(o,e,r)=>{const i=t[o][e-1],n=t[o-1][e],a=t[o+1][e-1],s=t[o-1][e-1],l=t[o+1][e+r],f=t[o-1][e+r];i&&(i.offLimits=!0),n&&(n.offLimits=!0),a&&(a.offLimits=!0),s&&(s.offLimits=!0),l&&(l.offLimits=!0),f&&(f.offLimits=!0)},n=(o,e,r,n)=>{const a=n.getLength();if("vertical"===r){if(e+a<=10){for(let r=0;r<a;r+=1)t[o][e+r]=n;return((o,e,r)=>{const n=t[o][e+r];i(o,e,r),n&&(n.offLimits=!0)})(o,e,a),!0}}else if("horizontal"===r&&o+a<=10){for(let r=0;r<a;r+=1)t[o+r][e]=n;return((o,e,r)=>{const n=t[o+r][e];i(o,e,r),n&&(n.offLimits=!0)})(o,e,a),!0}return!1},a=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{getShotLocation:e,receiveAttack:(o,e)=>{t[o][e].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>t.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:n,randomlyPlaceShips:()=>{const t=[];for(let r=0;r<o.length;r+=1){const{randomColumn:i,randomRow:s,randomDirection:l}=a(),f=o[r],c=e(i,s);!0===c.isShip&&!0===c.offLimits&&!1===n(i,s,l,f)?r-=1:t.push({randomColumn:i,randomRow:s,randomDirection:l})}return t}}};i().randomlyPlaceShips(),t.exports=i},585:t=>{t.exports=t=>{const o=Array(t).fill("unhit");return{getLength:()=>o.length,isSunk:()=>o.every((t=>"hit"===t)),hit:e=>{e<t&&(o[e]="hit")},getStatus:()=>o,isShip:!0}}}},o={};function e(r){var i=o[r];if(void 0!==i)return i.exports;var n=o[r]={exports:{}};return t[r](n,n.exports,e),n.exports}e.n=t=>{var o=t&&t.__esModule?()=>t.default:()=>t;return e.d(o,{a:o}),o},e.d=(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},e.o=(t,o)=>Object.prototype.hasOwnProperty.call(t,o),(()=>{"use strict";var t=e(653);const o=e.n(t)()();o.randomlyPlaceShips(),(t=>{const o=document.querySelector("div.player-board");for(let e=0;e<10;e+=1)for(let r=0;r<10;r+=1){const i=document.createElement("div");i.classList.add("cell"),t.getShotLocation(e,r).isShip&&i.classList.add("ship"),o.appendChild(i)}})(o)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,