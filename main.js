(()=>{var e={653:(e,t,a)=>{const i=a(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1};let t=!1;const a=()=>{const t=Array(10).fill().map((()=>Array(10).fill()));for(let a=0;a<10;a++)for(let i=0;i<10;i++)t[a][i]={...e,column:a,row:i};return t};let l=a();i(5,"Carrier"),i(4,"Battleship"),i(3,"Destroyer"),i(3,"Submarine"),i(2,"Patrol Boat");const r=(e,t)=>l?.[e]?.[t],o=(t,a,i=(()=>Object.assign(e,{offLimits:!0}))())=>{if(void 0===l?.[t]?.[a])return!0;const r=l[t][a];return l[t][a]={...r,...i},!0},c=(e,t)=>{o(e-1,t-1),o(e,t-1)},n=(e,t,a,i)=>{if("vertical"===a)for(let a=0;a<i;a++){const i=r(e,t+a);if(i&&!0===i.isShip&&!0===i.offLimits)return!0}if("horizontal"===a)for(let a=0;a<i;a++){const i=r(e+a,t);if(i&&!0===i.isShip&&!0===i.offLimits)return!0}return!1},h=(e,t,a,i)=>{if(l[e][t].isShip||l[e][t].offLimits)return!1;const h=i.getLength();if(n(r(e,t)))return!1;if("vertical"===a){if(((e,t)=>e>=0&&e+t-1<l.length)(t,h)){for(let a=0;a<h;a+=1)o(e,t+a,{...i,position:a}),o(e+1,t+a),o(e-1,t+a);return((e,t,a)=>{c(e,t),o(e,t+a),o(e+1,t+a),o(e-1,t+a),console.log(e-1,t+a),o(e+1,t-1)})(e,t,h),!0}}else if("horizontal"===a&&((e,t)=>e>=0&&e+t-1<l.length)(e,h)){for(let a=0;a<h;a+=1)o(e+a,t,{...i,position:a}),o(e+a,t+1),o(e+a,t-1);return((e,t,a)=>{c(e,t),o(e+a,t),o(e-1,t+1),o(e+a,t+1),o(e+a,t-1),o(e-1,t)})(e,t,h),!0}return!1},s=()=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal",t=Math.floor(100*Math.random()),a=(()=>{const e=[...l.flat()];return e.forEach((e=>{!0===e.hasBeenHit?e.availability=!1:e.availability=!0})),e})()[t];return!1===a.availability?s():{elementColumn:a.column,elementRow:a.row,randomDirection:e}},p=e=>{const t=Math.floor(10*Math.random()),a=Math.floor(10*Math.random());let l=Math.round(Math.random());return(0!==l||(l="horizontal",0!=h(t,a,l,i(e))))&&(1!==l||(l="vertical",0!=h(t,a,l,i(e))))&&void 0},d=()=>{l=a()};return{clearBoard:d,checkIfLocationIsAShipOrOffLimits:n,checkIfOffLimitZoneWasCorrectlyImplemented:e=>l.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:r,receiveAttack:(e,t)=>{l[e][t].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let e=!0;for(let t=0;t<10;t++)for(let a=0;a<10;a++){const i=r(t,a);if(!1!==i.isShip&&i.isShip&&!1===i.isSunk()){e=!1;break}}return e},placeShip:h,randomlyPlaceShips:()=>{switch(d(),Math.floor(10*Math.random())){case 0:h(1,1,"horizontal",i(4)),h(1,4,"horizontal",i(4)),h(7,3,"horizontal",i(3)),h(2,7,"horizonal",i(3)),h(6,7,"horizontal",i(2)),h(5,9,"horizontal",i(2)),h(8,1,"vertical",i(1)),h(9,5,"vertical",i(1));break;case 1:h(0,1,"vertical",i(4)),h(8,1,"vertical",i(4)),h(3,1,"horizontal",i(3)),h(0,7,"vertical",i(3)),h(3,6,"horizontal",i(2)),h(8,7,"horizontal",i(2)),h(4,8,"vertical",i(1)),h(6,7,"vertical",i(1));break;case 2:h(0,1,"horizontal",i(4)),h(0,3,"horizontal",i(4)),h(9,1,"vertical",i(3)),h(2,8,"horizontal",i(3)),h(5,3,"vertical",i(2)),h(0,6,"vertical",i(2)),h(1,6,"vertical",i(1)),h(7,4,"vertical",i(1));break;case 3:h(0,0,"vertical",i(4)),h(9,0,"vertical",i(4)),h(0,5,"vertical",i(3)),h(3,1,"vertical",i(3)),h(5,1,"vertical",i(2)),h(7,1,"vertical",i(2)),h(4,7,"vertical",i(1)),h(8,7,"vertical",i(1));break;case 4:h(2,4,"horizontal",i(4)),h(0,6,"vertical",i(4)),h(2,7,"horizontal",i(3)),h(6,6,"horizontal",i(3)),h(7,1,"horizontal",i(2)),h(6,8,"horizontal",i(2)),h(2,1,"horizontal",i(1)),h(4,1,"horizontal",i(1));break;case 5:h(1,3,"horizontal",i(4)),h(6,2,"vertical",i(4)),h(0,6,"vertical",i(3)),h(8,2,"vertical",i(3)),h(0,0,"horizontal",i(2)),h(2,6,"horizontal",i(2)),h(9,6,"vertical",i(1)),h(5,9,"vertical",i(1));break;case 6:h(0,0,"vertical",i(4)),h(0,6,"vertical",i(4)),h(0,2,"horizontal",i(3)),h(6,1,"horizontal",i(3)),h(8,3,"horizontal",i(2)),h(9,5,"vertical",i(2)),h(9,8,"vertical",i(1)),h(7,9,"vertical",i(1));break;case 7:h(0,1,"vertical",i(4)),h(0,6,"vertical",i(4)),h(2,0,"horizontal",i(3)),h(6,0,"horizontal",i(3)),h(9,2,"vertical",i(2)),h(9,6,"vertical",i(2)),h(9,9,"vertical",i(1)),h(7,9,"vertical",i(1));break;case 8:h(2,0,"vertical",i(4)),h(7,1,"vertical",i(4)),h(2,5,"horizontal",i(3)),h(6,7,"vertical",i(3)),h(1,9,"horizontal",i(2)),h(2,7,"horizontal",i(2)),h(9,6,"vertical",i(1)),h(8,9,"vertical",i(1));break;case 9:h(0,0,"horizontal",i(4)),h(5,2,"vertical",i(1)),h(2,6,"vertical",i(1)),h(0,8,"horizontal",i(3)),h(4,5,"vertical",i(4)),h(7,4,"horizontal",i(2)),h(6,6,"horizontal",i(2)),h(7,8,"horizontal",i(3))}},makeRandomCoordinates:s,checkIfBoardHasBeenFullyPopulated:()=>{const e=l.flat();let t=0;return e.forEach((e=>{e.isShip&&t++})),20===t},randomFleet:()=>{for(let e=0;e<2;)0!=p(1)&&e++;for(let e=0;e<2;)0!=p(2)&&e++;for(let e=0;e<2;)0!=p(3)&&e++;for(let e=0;e<2;)0!=p(4)&&e++;t=!0},gameBoard:l,isStartAllowed:{get:()=>t,set(e){t=e}}}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:a,receiveAttack:i})=>{const l=a(e,t);return!1===l.hasBeenHit||l.isShip&&!1===l.getStatus().includes("unhit")?(i(e,t),l.hit?(l.hit(l.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:e=>{e.exports=(e,t="ship")=>{const a=Array(e).fill("unhit");return{getName:()=>t,getLength:()=>a.length,isSunk:()=>a.every((e=>"hit"===e)),hit:t=>{t<e&&(a[t]="hit")},getStatus:()=>a,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},t={};function a(i){var l=t[i];if(void 0!==l)return l.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,a),r.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var i in t)a.o(t,i)&&!a.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=a(653),t=a.n(e),i=a(585),l=a.n(i);let r,o=!1,c=!1,n=[],h=[],s=[],p=[];function d(e,t,a,i){o=e,void 0!==t&&(c=t),void 0!==a&&(n=[a,i]),0==h.length&&void 0!==a?h=[a,i]:0!==h.length&&0==s.length&&void 0!==a&&(s=[a,i])}function u(e,t){return p=[],0!==t&&p.push([e,t-1]),9!==t&&p.push([e,t+1]),0!==e&&p.push([e-1,t]),9!==e&&p.push([e+1,t]),p}function v(e,t,a,i,l,d){let v;if(!0===i&&(n=[],h=[],s=[],p=[],o=!1,c=!1,r=""),!c&&!o)return v=t.randomPos(),z(t,a,v[0],v[1],l,d);if(0!==s.length&&o&&!e){let e;if(h[0]==s[0]-1&&(e=S("down")),h[0]==s[0]+1&&(e=S("up")),h[1]==s[1]-1&&(e=S("right")),h[1]==s[1]+1&&(e=S("left")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return z(t,a,e[0],e[1],l,d)}else if(0!==s.length&&c&&!o){let e;if(n=h,s=[],"up"===r&&(e=S("down")),"down"===r&&(e=S("up")),"right"===r&&(e=S("left")),"left"===r&&(e=S("right")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return z(t,a,e[0],e[1],l,d)}else if(c){0==p.length&&u(n[0],n[1]),0==p.length&&1==c&&u(h[0],h[1]);const e=p.pop();return z(t,a,e[0],e[1],l,d)}}function S(e){return"left"===e?(r="left",[n[0],n[1]-1]):"right"===e?(r="right",[n[0],n[1]+1]):"down"===e?(r="down",[n[0]+1,n[1]]):"up"===e?(r="up",[n[0]-1,n[1]]):void 0}let f=0;function m(e,t){let a=2;const i=document.querySelector(e),r=document.querySelector("body"),o=document.querySelectorAll(".player-board > .cell"),c=i.childNodes;let n,h,s="horizontal";c[0]&&c[0].addEventListener("mouseenter",(()=>h=0)),c[1]&&c[1].addEventListener("mouseenter",(()=>h=-1)),c[2]&&c[2].addEventListener("mouseenter",(()=>h=-2)),c[3]&&c[3].addEventListener("mouseenter",(()=>h=-3)),i.addEventListener("click",(e=>function(e){"horizontal"===s?(s="vertical",e.target.parentNode.classList.toggle("rotated")):(s="horizontal",e.target.parentNode.classList.toggle("rotated"))}(e))),i.addEventListener("dragstart",(e=>{for(let e=0;e<10;e++)t.gameBoard[e].forEach(((e,t)=>{(e.offLimits||e.isShip)&&document.querySelector(`.player-board > .cell[column='${e.column}'][row='${e.row}']`).classList.toggle("not-available")}))})),i.addEventListener("dragend",((r,o)=>{if(document.querySelectorAll(".not-available").forEach((e=>e.classList.remove("not-available"))),-1===n)return;let c,p,d=`${n}`;n<10?(c=0,p=n):(d=d.split(""),c=1*d[0],p=1*d[1]),"horizontal"===s&&(p+=h),"vertical"===s&&(c+=h),p<0||".ship-1"===e&&!1===t.placeShip(p,c,s,l()(1))||".ship-2"===e&&!1===t.placeShip(p,c,s,l()(2))||".ship-3"===e&&!1===t.placeShip(p,c,s,l()(3))||".ship-4"===e&&!1===t.placeShip(p,c,s,l()(4))||(g(t),a-=1,f++,8===f&&t.isStartAllowed.set(!0),i.parentNode.firstChild.textContent=`${a}x`,0===a&&(i.parentNode.style.display="none"),!t.checkIfBoardHasBeenFullyPopulated())||(document.querySelector("body > main > div.player > div:nth-child(4)").style.display="none",document.querySelector(".randomize").style.display="none",t.isStartAllowed.set(!0))})),o.forEach(((e,t)=>{e.addEventListener("dragover",(e=>{e.preventDefault(),n=t}))})),r.addEventListener("dragenter",(()=>{n=-1}))}async function z(e,t,a,i,l,r){let o=!1;const c=document.querySelector(`.player-board > .cell[column='${a}'][row='${i}']`),n=t.attack(a,i,l);if("You have already hit this spot!"===n&&v(!0,e,t,void 0,l,r),"It's a hit!"===n&&(d(!1),c.classList.add("miss")),"You hit a ship!"===n)return d(!0,!0,a,i),c.classList.add("hit"),l.getLocation(a,i).domTargets.push(c),l.getLocation(a,i).isSunk()&&(l.getLocation(a,i).domTargets.forEach((e=>e.classList.add("sunk"))),o=!0,!0===l.checkIfAllShipsHaveSunk())?b(l,r):(await y(1e3),v(!1,e,t,o,l,r))}function y(e){return new Promise((t=>{setTimeout((()=>{t(2)}),e)}))}const g=({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let a=0;a<10;a+=1)for(let i=0;i<10;i+=1){const l=t.querySelector(`.cell:nth-child(${10*i+a+1})`);l.setAttribute("column",a),l.setAttribute("row",i);const r=e(a,i);r.isShip&&(l.classList.add("ship"),l.setAttribute("ship-name",r.getName()))}},b=(e,t)=>{if(e.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),a=document.querySelector(".modal-content > button");e.style.display="block",a.addEventListener("click",(()=>{location.reload()})),t.textContent="You lose!"}if(t.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),a=document.querySelector(".modal-content > button");e.style.display="block",t.textContent="You win!",a.addEventListener("click",(()=>{location.reload()}))}},L=e=>{switch(e.clearBoard(),document.querySelectorAll(".player-board > .cell").forEach((e=>{e.classList.remove("ship"),e.classList.remove("hit"),e.classList.remove("miss")})),Math.floor(10*Math.random())){case 0:e.placeShip(1,1,"horizontal",l()(4)),e.placeShip(1,4,"horizontal",l()(4)),e.placeShip(7,3,"horizontal",l()(3)),e.placeShip(2,7,"horizonal",l()(3)),e.placeShip(6,7,"horizontal",l()(2)),e.placeShip(5,9,"horizontal",l()(2)),e.placeShip(8,1,"vertical",l()(1)),e.placeShip(9,5,"vertical",l()(1));break;case 1:e.placeShip(0,1,"vertical",l()(4)),e.placeShip(8,1,"vertical",l()(4)),e.placeShip(3,1,"horizontal",l()(3)),e.placeShip(0,7,"vertical",l()(3)),e.placeShip(3,6,"horizontal",l()(2)),e.placeShip(8,7,"horizontal",l()(2)),e.placeShip(4,8,"vertical",l()(1)),e.placeShip(6,7,"vertical",l()(1));break;case 2:e.placeShip(0,1,"horizontal",l()(4)),e.placeShip(0,3,"horizontal",l()(4)),e.placeShip(9,1,"vertical",l()(3)),e.placeShip(2,8,"horizontal",l()(3)),e.placeShip(5,3,"vertical",l()(2)),e.placeShip(0,6,"vertical",l()(2)),e.placeShip(1,6,"vertical",l()(1)),e.placeShip(7,4,"vertical",l()(1));break;case 3:e.placeShip(0,0,"vertical",l()(4)),e.placeShip(9,0,"vertical",l()(4)),e.placeShip(0,5,"vertical",l()(3)),e.placeShip(3,1,"vertical",l()(3)),e.placeShip(5,1,"vertical",l()(2)),e.placeShip(7,1,"vertical",l()(2)),e.placeShip(4,7,"vertical",l()(1)),e.placeShip(8,7,"vertical",l()(1));break;case 4:e.placeShip(2,4,"horizontal",l()(4)),e.placeShip(0,6,"vertical",l()(4)),e.placeShip(2,7,"horizontal",l()(3)),e.placeShip(6,6,"horizontal",l()(3)),e.placeShip(7,1,"horizontal",l()(2)),e.placeShip(6,8,"horizontal",l()(2)),e.placeShip(2,1,"horizontal",l()(1)),e.placeShip(4,1,"horizontal",l()(1));break;case 5:e.placeShip(1,3,"horizontal",l()(4)),e.placeShip(6,2,"vertical",l()(4)),e.placeShip(0,6,"vertical",l()(3)),e.placeShip(8,2,"vertical",l()(3)),e.placeShip(0,0,"horizontal",l()(2)),e.placeShip(2,6,"horizontal",l()(2)),e.placeShip(9,6,"vertical",l()(1)),e.placeShip(5,9,"vertical",l()(1));break;case 6:e.placeShip(0,0,"vertical",l()(4)),e.placeShip(0,6,"vertical",l()(4)),e.placeShip(0,2,"horizontal",l()(3)),e.placeShip(6,1,"horizontal",l()(3)),e.placeShip(8,3,"horizontal",l()(2)),e.placeShip(9,5,"vertical",l()(2)),e.placeShip(9,8,"vertical",l()(1)),e.placeShip(7,9,"vertical",l()(1));break;case 7:e.placeShip(0,1,"vertical",l()(4)),e.placeShip(0,6,"vertical",l()(4)),e.placeShip(2,0,"horizontal",l()(3)),e.placeShip(6,0,"horizontal",l()(3)),e.placeShip(9,2,"vertical",l()(2)),e.placeShip(9,6,"vertical",l()(2)),e.placeShip(9,9,"vertical",l()(1)),e.placeShip(7,9,"vertical",l()(1));break;case 8:e.placeShip(2,0,"vertical",l()(4)),e.placeShip(7,1,"vertical",l()(4)),e.placeShip(2,5,"horizontal",l()(3)),e.placeShip(6,7,"vertical",l()(3)),e.placeShip(1,9,"horizontal",l()(2)),e.placeShip(2,7,"horizontal",l()(2)),e.placeShip(9,6,"vertical",l()(1)),e.placeShip(8,9,"vertical",l()(1));break;case 9:e.placeShip(0,0,"horizontal",l()(4)),e.placeShip(5,2,"vertical",l()(1)),e.placeShip(2,6,"vertical",l()(1)),e.placeShip(0,8,"horizontal",l()(3)),e.placeShip(4,5,"vertical",l()(4)),e.placeShip(7,4,"horizontal",l()(2)),e.placeShip(6,6,"horizontal",l()(2)),e.placeShip(7,8,"horizontal",l()(3))}};var k=a(61),A=a.n(k);const w=t()(),E=t()(),q=A()(),B=A()();document.querySelector("button.randomize").addEventListener("click",(()=>{location.reload(),L(w)})),L(w),document.querySelector("button.reset").addEventListener("click",(()=>{location.reload()})),function(e){function t(e,t){const a=document.querySelector("body > main > div.player > div:nth-child(4)"),i=document.createElement("div");i.classList.add("ship-container"),a.appendChild(i);const l=document.createElement("span");l.classList.add(`info-${e}`),l.textContent="2x",i.appendChild(l);const r=document.createElement("div");r.classList.add("ship"),r.classList.add(`ship-${e}`),r.setAttribute("draggable","true"),i.appendChild(r);for(let e=0;e<t;e++){const e=document.createElement("div");e.classList.add("cell"),r.appendChild(e)}}t(1,1),t(2,2),t(3,3),t(4,4);for(let t=1;t<5;t++)m(`.ship-${t}`,e)}(w),L(E);const M=(()=>{const e={};return{publish:function(t,a){Array.isArray(e[t])&&e[t].forEach((e=>{e(a)}))},subscribe:function t(a,i){Array.isArray(t[a])||(e[a]=[]),e[a].push(i);const l=e[a].length-1;return{unsubscribe(){e[a].splice(l,1)}}}}})();((e,t,a,i,l)=>{const r=document.querySelector("div.enemy-board");for(let o=0;o<10;o+=1)for(let c=0;c<10;c+=1){const n=r.querySelector(`.cell:nth-child(${10*c+o+1})`);n.setAttribute("column",o),n.setAttribute("row",c),n.addEventListener("click",(()=>{!1!==e.isStartAllowed.get()&&l.publish("click",{cell:n,column:o,row:c,playerBoard:e,enemyBoard:t,player:a,enemy:i})}),{once:!0})}})(w,E,q,B,M),M.subscribe("click",(({cell:e,column:t,row:a,playerBoard:i,enemyBoard:l,player:r,enemy:o})=>{(async(e,t,a,i,l,r)=>{((e,t,a,i)=>{i.attack(e,t,a)})(e,t,a,l),((e,t,a,i)=>{const l=document.querySelector(`.enemy-board > .cell[column='${t}'][row='${a}']`);i.getLocation(t,a)?.isShip&&(i.getLocation(t,a).domTargets.push(l),i.getLocation(t,a).isSunk()&&i.getLocation(t,a).domTargets.forEach((e=>e.classList.add("sunk")))),i.getLocation(t,a).isShip?l.classList.add("hit"):l.classList.add("miss")})(0,e,t,a),await y(700),a.checkIfAllShipsHaveSunk()?b(i,a):v(!1,l,r,void 0,i,a)})(t,a,l,i,r,o)})),g(w)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,