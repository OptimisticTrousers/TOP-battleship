(()=>{var t={653:(t,e,r)=>{const o=r(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],a=(t,r)=>e?.[t]?.[r],i=(r,o,a=(()=>Object.assign(t,{offLimits:!0}))())=>(void 0===e?.[r]?.[o]||(e[r][o]=a),!0),n=(t,e)=>{i(t-1,e-1),i(t,e-1)},s=(t,r,o,a)=>{const s=a.getLength();if("vertical"===o){if(r>=0&&r+s-1<e.length){for(let e=0;e<s;e+=1)i(t,r+e,a),i(t+1,r+e),i(t-1,r+e);return((t,e,r)=>{n(t,e),i(t,e+r),i(t+1,e+r),i(t-1,e+r),i(t+1,e-1)})(t,r,s),!0}}else if("horizontal"===o&&t>=0&&t+s-1<e.length){for(let e=0;e<s;e+=1)i(t+e,r,a),i(t+e,r+1),i(t+e,r-1);return((t,e,r)=>{n(t,e),i(t+r,e),i(t-1,e+1),i(t+r,e+1),i(t+r,e-1)})(t,r,s),!0}return!1},l=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:a,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:s,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:i,randomDirection:n}=l(),c=r[e],h=a(o,i);!0===h.isShip||!0===h.offLimits||!1===s(o,i,n,c)?e-=1:t.push({randomColumn:o,randomRow:i,randomDirection:n})}return t},makeRandomCoordinates:l}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:r,receiveAttack:o})=>void 0===r(t,e).hasBeenHit?(o(t,e),"It's a hit!"):"You have already hit this spot!"})},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,isShip:!0}}}},e={};function r(o){var a=e[o];if(void 0!==a)return a.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,r,o)=>o.attack(t,e,r),e=(e,r,a,i,n)=>{const s=i.getLocation(r,a);if("You have already hit this spot!"===t(r,a,i,n))return o(e,playerBoard,enemy);s.isShip?e.classList.add("hit"):e.classList.add("miss")},o=(e,r,a)=>{const{randomColumn:i,randomRow:n}=r.makeRandomCoordinates(),s=r.getLocation(i,n);return"You have already hit this spot!"===t(i,n,r,a)?o(e,r,a):(s.isShip?e.classList.add("hit"):e.classList.add("miss"),{randomColumn:i,randomRow:n})};var a=r(653),i=r.n(a),n=r(585),s=r.n(n),l=r(61),c=r.n(l);const h=i()(),d=i()(),u=c()(),m=c()();h.randomlyPlaceShips(),d.placeShip(0,0,"horizontal",s()(5)),d.placeShip(3,4,"horizontal",s()(3)),d.placeShip(6,7,"horizontal",s()(2)),d.placeShip(9,1,"vertical",s()(3)),d.placeShip(5,9,"horizontal",s()(4));const p=(()=>{const t={};return{publish:function(e,r){Array.isArray(t[e])&&t[e].forEach((t=>{t(r)}))},subscribe:function e(r,o){Array.isArray(e[r])||(t[r]=[]),t[r].push(o);const a=t[r].length-1;return{unsubscribe(){t[r].splice(a,1)}}}}})();((t,e,r,o,a)=>{const i=document.querySelector("div.enemy-board");for(let n=0;n<10;n+=1)for(let s=0;s<10;s+=1){const l=i.querySelector(`.cell:nth-child(${10*s+n+1})`);l.setAttribute("column",n),l.setAttribute("row",s),l.addEventListener("click",(()=>{a.publish("click",{cell:l,column:n,row:s,playerBoard:t,enemyBoard:e,player:r,enemy:o})}),{once:!0})}})(h,d,u,m,p),p.subscribe("click",(({cell:t,column:r,row:a,playerBoard:i,enemyBoard:n,player:s,enemy:l})=>{e(t,r,a,n,s);const{randomColumn:c,randomRow:h}=o(t,i,l);((t,e)=>{const r=document.querySelector(`.cell[column='${t}'][row='${e}']`);r.classList.contains("ship")?r.classList.add("hit"):r.classList.add("miss")})(c,h)})),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const a=e.querySelector(`.cell:nth-child(${10*o+r+1})`);a.setAttribute("column",r),a.setAttribute("row",o),t(o,r).isShip&&a.classList.add("ship")}})(h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,