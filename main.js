(()=>{var e={653:(e,t,o)=>{const r=o(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1};let t=!1;const o=()=>{const t=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)t[o][r]={...e,column:o,row:r};return t};let n=o();const i=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],a=(e,t)=>n?.[e]?.[t],l=(t,o,r=(()=>Object.assign(e,{offLimits:!0}))())=>{if(void 0===n?.[t]?.[o])return!0;const i=n[t][o];return n[t][o]={...i,...r},!0},c=(e,t)=>{l(e-1,t-1),l(e,t-1)},s=(e,t,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=a(e,t+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}if("horizontal"===o)for(let o=0;o<r;o++){const r=a(e+o,t);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}return!1},h=(e,t,o,r)=>{const i=r.getLength();if(s(a(e,t)))return!1;if("vertical"===o){if(((e,t)=>e>=0&&e+t-1<n.length)(t,i)){for(let o=0;o<i;o+=1)l(e,t+o,{...r,position:o}),l(e+1,t+o),l(e-1,t+o);return((e,t,o)=>{c(e,t),l(e,t+o),l(e+1,t+o),l(e-1,t+o),l(e+1,t-1)})(e,t,i),!0}}else if("horizontal"===o&&((e,t)=>e>=0&&e+t-1<n.length)(e,i)){for(let o=0;o<i;o+=1)l(e+o,t,{...r,position:o}),l(e+o,t+1),l(e+o,t-1);return((e,t,o)=>{c(e,t),l(e+o,t),l(e-1,t+1),l(e+o,t+1),l(e+o,t-1)})(e,t,i),!0}return!1},d=()=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal",t=Math.floor(100*Math.random()),o=(()=>{const e=[...n.flat()];return e.forEach((e=>{!0===e.hasBeenHit?e.availability=!1:e.availability=!0})),e})()[t];return!1===o.availability?d():{elementColumn:o.column,elementRow:o.row,randomDirection:e}};let u=e=>{let t=Math.floor(10*Math.random()),o=Math.floor(10*Math.random()),n=Math.round(Math.random());return(0!==n||(n="horizontal",!1!==h(t,o,n,r(e))))&&(1!==n||(n="vertical",!1!==h(t,o,n,r(e))))&&void 0};return{clearBoard:()=>{n=o()},checkIfLocationIsAShipOrOffLimits:s,checkIfOffLimitZoneWasCorrectlyImplemented:e=>n.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:a,receiveAttack:(e,t)=>{n[e][t].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let e=!0;for(let t=0;t<10;t++)for(let o=0;o<10;o++){const r=a(t,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){e=!1;break}}return e},placeShip:h,randomlyPlaceShips:()=>{const e=[];for(let t=0;t<i.length;t+=1){const o=i[t],{randomColumn:r,randomRow:n,randomDirection:a}=d(o.getLength());h(r,n,a,o)?e.push({randomColumn:r,randomRow:n,randomDirection:a}):t-=1}return e},makeRandomCoordinates:d,randomFleet:()=>{n=o();for(let e=0;e<2;)!1!==u(1)&&e++;for(let e=0;e<2;)!1!==u(2)&&e++;for(let e=0;e<2;)!1!==u(3)&&e++;for(let e=0;e<2;)!1!==u(4)&&e++},gameBoard:n,isStartAllowed:{get:function(){return t},set:function(e){t=e}}}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:o,receiveAttack:r})=>{const n=o(e,t);return!1===n.hasBeenHit||n.isShip&&!1===n.getStatus().includes("unhit")?(r(e,t),n.hit?(n.hit(n.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:e=>{e.exports=(e,t="ship")=>{const o=Array(e).fill("unhit");return{getName:()=>t,getLength:()=>o.length,isSunk:()=>o.every((e=>"hit"===e)),hit:t=>{t<e&&(o[t]="hit")},getStatus:()=>o,domTargets:[],hasBeenHit:!1,offLimits:!0,isShip:!0}}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=o(653),t=o.n(e),r=o(585),n=o.n(r);let i,a=!1,l=!1,c=[],s=[],h=[],d=[];function u(e,t,o,r){a=e,void 0!==t&&(l=t),void 0!==o&&(c=[o,r]),0==s.length&&void 0!==o?s=[o,r]:0!==s.length&&0==h.length&&void 0!==o&&(h=[o,r])}function p(e,t){return d=[],0!==t&&d.push([e,t-1]),9!==t&&d.push([e,t+1]),0!==e&&d.push([e-1,t]),9!==e&&d.push([e+1,t]),d}function f(e,t,o,r,n,u){let f;if(!0===r&&(c=[],s=[],h=[],d=[],a=!1,l=!1,i=""),!l&&!a)return f=t.randomPos(),g(t,o,f[0],f[1],n,u);if(0!==h.length&&a&&!e){let e;if(s[0]==h[0]-1&&(e=m("down")),s[0]==h[0]+1&&(e=m("up")),s[1]==h[1]-1&&(e=m("right")),s[1]==h[1]+1&&(e=m("left")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return g(t,o,e[0],e[1],n,u)}else if(0!==h.length&&l&&!a){let e;if(c=s,h=[],"up"===i&&(e=m("down")),"down"===i&&(e=m("up")),"right"===i&&(e=m("left")),"left"===i&&(e=m("right")),e[0]>=0&&e[0]<=9&&e[1]>=0&&e[1]<=9)return g(t,o,e[0],e[1],n,u)}else if(l){0==d.length&&p(c[0],c[1]),0==d.length&&1==l&&p(s[0],s[1]);const e=d.pop();return g(t,o,e[0],e[1],n,u)}}function m(e){return"left"===e?(i="left",[c[0],c[1]-1]):"right"===e?(i="right",[c[0],c[1]+1]):"down"===e?(i="down",[c[0]+1,c[1]]):"up"===e?(i="up",[c[0]-1,c[1]]):void 0}let S=0;function v(e,t){let o=2;const r=document.querySelector(e),i=document.querySelector("body"),a=document.querySelectorAll(".player-board > .cell"),l=r.childNodes;let c,s,h="horizontal";l[0]&&l[0].addEventListener("mouseenter",(()=>s=0)),l[1]&&l[1].addEventListener("mouseenter",(()=>s=-1)),l[2]&&l[2].addEventListener("mouseenter",(()=>s=-2)),l[3]&&l[3].addEventListener("mouseenter",(()=>s=-3)),r.addEventListener("click",(e=>function(e){"horizontal"===h?(h="vertical",e.target.parentNode.classList.toggle("rotated")):(h="horizontal",e.target.parentNode.classList.toggle("rotated"))}(e))),r.addEventListener("dragstart",(e=>{for(let e=0;e<10;e++)t.gameBoard[e].forEach(((e,t)=>{(e.offLimits||e.isShip)&&document.querySelector(`.player-board > .cell[column='${e.column}'][row='${e.row}']`).classList.toggle("not-available")}))})),r.addEventListener("dragend",((i,a)=>{if(document.querySelectorAll(".not-available").forEach((e=>e.classList.remove("not-available"))),-1===c)return;let l,d,u=`${c}`;c<10?(l=0,d=c):(u=u.split(""),l=1*u[0],d=1*u[1]),"horizontal"===h&&(d+=s),"vertical"===h&&(l+=s),d<0||".ship-1"===e&&!1===t.placeShip(d,l,h,n()(1))||".ship-2"===e&&!1===t.placeShip(d,l,h,n()(2))||".ship-3"===e&&!1===t.placeShip(d,l,h,n()(3))||".ship-4"===e&&!1===t.placeShip(d,l,h,n()(4))||(L(t),o-=1,S++,8===S&&t.isStartAllowed.set(!0),r.parentNode.firstChild.textContent=`${o}x`,0===o&&(r.parentNode.style.display="none"))})),a.forEach(((e,t)=>{e.addEventListener("dragover",(e=>{e.preventDefault(),c=t}))})),i.addEventListener("dragenter",(()=>{c=-1}))}async function g(e,t,o,r,n,i){let a=!1;const l=document.querySelector(`.player-board > .cell[column='${o}'][row='${r}']`),c=t.attack(o,r,n);if(console.log(n.getLocation(o,r)),"You have already hit this spot!"===c&&f(!0,e,t,void 0,n,i),"It's a hit!"===c&&(u(!1),l.classList.add("miss")),"You hit a ship!"===c)return u(!0,!0,o,r),l.classList.add("hit"),n.getLocation(o,r).domTargets.push(l),n.getLocation(o,r).isSunk()&&(n.getLocation(o,r).domTargets.forEach((e=>e.classList.add("sunk"))),a=!0,!0===n.checkIfAllShipsHaveSunk())?b(n,i):(await y(1e3),f(!1,e,t,a,n,i))}function y(e){return new Promise((t=>{setTimeout((()=>{t(2)}),e)}))}const L=({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const n=t.querySelector(`.cell:nth-child(${10*r+o+1})`);n.setAttribute("column",o),n.setAttribute("row",r);const i=e(o,r);i.isShip&&(n.classList.add("ship"),n.setAttribute("ship-name",i.getName()))}},b=(e,t)=>{if(e.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",o.addEventListener("click",(()=>{location.reload()})),t.textContent="You lose!"}if(t.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",t.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}};var k=o(61),z=o.n(k);const w=t()(),A=t()(),E=z()(),q=z()();document.querySelector("button.randomize").addEventListener("click",(()=>{(e=>{switch(e.clearBoard(),document.querySelectorAll(".player-board > .cell").forEach((e=>{e.classList.remove("ship"),e.classList.remove("hit"),e.classList.remove("miss")})),Math.floor(4*Math.random())){case 0:e.placeShip(9,1,"vertical",n()(5)),e.placeShip(0,3,"horizontal",n()(3)),e.placeShip(3,6,"horizontal",n()(2)),e.placeShip(6,5,"horizontal",n()(3)),e.placeShip(3,9,"horizontal",n()(4));break;case 1:e.placeShip(0,2,"horizontal",n()(5)),e.placeShip(4,5,"horizontal",n()(3)),e.placeShip(8,7,"horizontal",n()(2)),e.placeShip(5,9,"horizontal",n()(3)),e.placeShip(6,3,"horizontal",n()(4));break;case 2:e.placeShip(5,1,"horizontal",n()(5)),e.placeShip(3,3,"vertical",n()(3)),e.placeShip(0,0,"vertical",n()(2)),e.placeShip(6,5,"horizontal",n()(3)),e.placeShip(5,9,"horizontal",n()(4));break;default:e.placeShip(0,0,"horizontal",n()(5)),e.placeShip(3,4,"horizontal",n()(3)),e.placeShip(6,7,"horizontal",n()(2)),e.placeShip(9,1,"vertical",n()(3)),e.placeShip(5,9,"horizontal",n()(4))}L(e)})(A)})),function(e){function t(e,t){const o=document.querySelector(".player:nth-child(1)"),r=document.createElement("div");r.classList.add("ship-container"),o.appendChild(r);const n=document.createElement("span");n.classList.add(`info-${e}`),n.textContent="2x",r.appendChild(n);const i=document.createElement("div");i.classList.add("ship"),i.classList.add(`ship-${e}`),i.setAttribute("draggable","true"),r.appendChild(i);for(let e=0;e<t;e++){const e=document.createElement("div");e.classList.add("cell"),i.appendChild(e)}}t(1,1),t(2,2),t(3,3),t(4,4);for(let t=1;t<5;t++)v(`.ship-${t}`,e)}(w),A.placeShip(0,0,"horizontal",n()(5)),A.placeShip(3,4,"horizontal",n()(3)),A.placeShip(6,7,"horizontal",n()(2)),A.placeShip(9,1,"vertical",n()(3)),A.placeShip(5,9,"horizontal",n()(4));const M=(()=>{const e={};return{publish:function(t,o){Array.isArray(e[t])&&e[t].forEach((e=>{e(o)}))},subscribe:function t(o,r){Array.isArray(t[o])||(e[o]=[]),e[o].push(r);const n=e[o].length-1;return{unsubscribe(){e[o].splice(n,1)}}}}})();((e,t,o,r,n)=>{const i=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let l=0;l<10;l+=1){const c=i.querySelector(`.cell:nth-child(${10*l+a+1})`);c.setAttribute("column",a),c.setAttribute("row",l),c.addEventListener("click",(()=>{n.publish("click",{cell:c,column:a,row:l,playerBoard:e,enemyBoard:t,player:o,enemy:r})}),{once:!0})}})(w,A,E,q,M),M.subscribe("click",(({cell:e,column:t,row:o,playerBoard:r,enemyBoard:n,player:i,enemy:a})=>{(async(e,t,o,r,n,i)=>{((e,t,o,r)=>{r.attack(e,t,o)})(e,t,o,n),((e,t,o,r)=>{const n=document.querySelector(`.enemy-board > .cell[column='${t}'][row='${o}']`);r.getLocation(t,o)?.isShip&&(r.getLocation(t,o).domTargets.push(n),r.getLocation(t,o).isSunk()&&r.getLocation(t,o).domTargets.forEach((e=>e.classList.add("sunk")))),r.getLocation(t,o).isShip?n.classList.add("hit"):n.classList.add("miss")})(0,e,t,o),await y(700),o.checkIfAllShipsHaveSunk()?b(r,o):f(!1,n,i,void 0,r,o)})(t,o,n,r,i,a)})),L(w)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,