(()=>{var t={653:(t,e,r)=>{const o=r(585),n=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(JSON.parse(JSON.stringify(t))).map((()=>Array(10).fill(JSON.parse(JSON.stringify(t))))),r=[o(5),o(4),o(3),o(3),o(2)],n=(t,r)=>e?.[t]?.[r],i=(t,r,o,i)=>{const a=i.getLength();if("vertical"===o){if(r+a<=10){for(let o=0;o<a;o+=1)e[t][r+o]=i;return!0}}else if("horizontal"===o&&t+a<=10){for(let o=0;o<a;o+=1)e[t+o][r]=i;return((t,r,o)=>{const i=n(t+o,r);i&&console.log(i),console.log(e)})(t,r,a),!0}return!1},a=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{getShotLocation:n,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:i,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:s,randomDirection:l}=a(),c=r[e],h=n(o,s);!0===h.isShip||!0===h.offLimits||!1===i(o,s,l,c)?e-=1:t.push({randomColumn:o,randomRow:s,randomDirection:l})}return t}}};n().placeShip(0,0,"horizontal",o(3)),t.exports=n},585:t=>{t.exports=t=>{const e=Array(t).fill("unhit");return{getLength:()=>e.length,isSunk:()=>e.every((t=>"hit"===t)),hit:r=>{r<t&&(e[r]="hit")},getStatus:()=>e,isShip:!0}}}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(653);const e=r.n(t)()();e.randomlyPlaceShips(),(({getShotLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=document.createElement("div");n.classList.add("cell"),t(o,r).isShip&&n.classList.add("ship"),e.appendChild(n)}})(e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,