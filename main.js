(()=>{var e={653:(e,t,o)=>{const r=o(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1},t=Array(10).fill([]);(()=>{for(let o=0;o<10;o++)for(let r=0;r<10;r++)t[o][r]={...e,column:o,row:r}})();const o=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],n=(e,o)=>t?.[e]?.[o],i=(o,r,n=(()=>Object.assign(e,{offLimits:!0}))())=>{void 0!==t?.[o]?.[r]&&(t[o][r]=n)},l=(e,t)=>{i(e-1,t-1),i(e,t-1)},a=()=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomLocation:Math.floor(Math.random()*(t.flat().filter((e=>!1===e.isShip&&!1===e.offLimits)).length-1)),randomDirection:e}};return{checkIfOffLimitZoneWasCorrectlyImplemented:e=>t.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:n,receiveAttack:(e,o)=>{t[e][o].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let e=!0;for(let t=0;t<10;t++)for(let o=0;o<10;o++){const r=n(t,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){e=!1;break}}return e},placeShip:(e,o,r,a)=>{const c=a.getLength();if(((e,t,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=n(e,t+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}else if("horizontal"===o)for(let o=0;o<r;o++){const r=n(e+o,t);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}return!1})(e,o,r,c))return!1;if("vertical"===r){if(((e,o)=>e>=0&&e+o-1<t.length)(o,c)){for(let t=0;t<c;t+=1)i(e,o+t,{...a,position:t,hasBeenHit:!1,direction:r}),i(e+1,o+t),i(e-1,o+t);return((e,t,o)=>{l(e,t),i(e,t+o),i(e+1,t+o),i(e-1,t+o),i(e+1,t-1)})(e,o,c),!0}}else if("horizontal"===r&&((e,o)=>e>=0&&e+o-1<t.length)(e,c)){for(let t=0;t<c;t+=1)i(e+t,o,{...a,position:t,hasBeenHit:!1,direction:r}),i(e+t,o+1),i(e+t,o-1);return((e,t,o)=>{l(e,t),i(e+o,t),i(e-1,t+1),i(e+o,t+1),i(e+o,t-1)})(e,o,c),!0}return!1},randomlyPlaceShips:()=>{const e=[];for(let r=0;r<o.length;r++){const{randomLocation:o,randomDirection:r}=a(),n=t.flat(),i=n.findIndex(((e,t)=>t===o)),l=n[i],c=l.column,s=l.row;e.push({elementColumn:c,elementRow:s,randomDirection:r})}return e},makeRandomCoordinates:a}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:o,receiveAttack:r})=>{const n=o(e,t);return!1===n.hasBeenHit||n.isShip&&!1===n.getStatus().includes("unhit")?(r(e,t),n.hit&&n.hit(n.position),"It's a hit!"):"You have already hit this spot!"}})},585:e=>{e.exports=(e,t="ship")=>{const o=Array(e).fill("unhit");return{name:t,getLength:()=>o.length,isSunk:()=>o.every((e=>"hit"===e)),hit:t=>{t<e&&(o[t]="hit")},getStatus:()=>o,hasBeenHit:!1,isShip:!0}}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=(e,t,o,r)=>{const n=document.querySelector(`.${e}-board > .cell[column='${t}'][row='${o}']`);r.getLocation(t,o).isShip?n.classList.add("hit"):n.classList.add("miss")},t=(e,t,o,r)=>r.attack(e,t,o);var r=o(653),n=o.n(r),i=o(585),l=o.n(i),a=o(61),c=o.n(a);const s=n()(),h=n()(),u=c()(),p=c()();s.randomlyPlaceShips(),h.randomlyPlaceShips(),s.placeShip(0,0,"horizontal",l()(5)),s.placeShip(3,4,"horizontal",l()(3)),s.placeShip(6,7,"horizontal",l()(2)),s.placeShip(9,1,"vertical",l()(3)),s.placeShip(5,9,"horizontal",l()(4)),h.placeShip(0,0,"horizontal",l()(5)),h.placeShip(3,4,"horizontal",l()(3)),h.placeShip(6,7,"horizontal",l()(2)),h.placeShip(9,1,"vertical",l()(3)),h.placeShip(5,9,"horizontal",l()(4));const d=(()=>{const e={};return{publish:function(t,o){Array.isArray(e[t])&&e[t].forEach((e=>{e(o)}))},subscribe:function t(o,r){Array.isArray(t[o])||(e[o]=[]),e[o].push(r);const n=e[o].length-1;return{unsubscribe(){e[o].splice(n,1)}}}}})();((e,t,o,r,n)=>{const i=document.querySelector("div.enemy-board");for(let l=0;l<10;l+=1)for(let a=0;a<10;a+=1){const c=i.querySelector(`.cell:nth-child(${10*a+l+1})`);c.setAttribute("column",l),c.setAttribute("row",a),c.addEventListener("click",(()=>{n.publish("click",{cell:c,column:l,row:a,playerBoard:e,enemyBoard:t,player:o,enemy:r})}),{once:!0})}})(s,h,u,p,d),d.subscribe("click",(({cell:o,column:r,row:n,playerBoard:i,enemyBoard:l,player:a,enemy:c})=>{((o,r,n,i)=>{t(o,r,n,i),e("enemy",o,r,n)})(r,n,l,a),((o,r)=>{const{randomColumn:n,randomRow:i}=o.makeRandomCoordinates();t(n,n,o,r),e("player",n,i,o)})(i,c),((e,t)=>{if(e.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",o.addEventListener("click",(()=>{location.reload()})),t.textContent="You win!"}if(t.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",t.textContent="You lose!",o.addEventListener("click",(()=>{location.reload()}))}})(i,l)})),(({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const n=t.querySelector(`.cell:nth-child(${10*r+o+1})`);n.setAttribute("column",o),n.setAttribute("row",r),e(r,o).isShip&&n.classList.add("ship")}})(s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,