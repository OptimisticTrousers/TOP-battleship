(()=>{var t={653:(t,e,r)=>{const o=r(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=(t,r)=>e?.[t]?.[r],a=(r,o,n=(()=>Object.assign(t,{offLimits:!0}))())=>(void 0===e?.[r]?.[o]||(e[r][o]=n),!0),i=(t,e)=>{a(t-1,e-1),a(t,e-1)},s=(t,r,o,n)=>{const s=n.getLength();if("vertical"===o){if(r>=0&&r+s-1<e.length){for(let e=0;e<s;e+=1)a(t,r+e,n),a(t+1,r+e),a(t-1,r+e);return((t,e,r)=>{i(t,e),a(t,e+r),a(t+1,e+r),a(t-1,e+r),a(t+1,e-1)})(t,r,s),!0}}else if("horizontal"===o&&t>=0&&t+s-1<e.length){for(let e=0;e<s;e+=1)a(t+e,r,n),a(t+e,r+1),a(t+e,r-1);return((t,e,r)=>{i(t,e),a(t+r,e),a(t-1,e+1),a(t+r,e+1),a(t+r,e-1)})(t,r,s),!0}return!1},l=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:s,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:a,randomDirection:i}=l(),c=r[e],h=n(o,a);!0===h.isShip||!0===h.offLimits||!1===s(o,a,i,c)?e-=1:t.push({randomColumn:o,randomRow:a,randomDirection:i})}return t},makeRandomCoordinates:l}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:r,receiveAttack:o})=>{const n=r(t,e);return!1===n.hasBeenHit||n.isShip&&n.getStatus().includes("unhit")?(o(t,e),"It's a hit!"):"You have already hit this spot!"}})},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,hasBeenHit:!1,isShip:!0}}}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,r),a.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,r,o)=>o.attack(t,e,r),e=(r,o,n)=>{const{randomColumn:a,randomRow:i}=o.makeRandomCoordinates();return"You have already hit this spot!"===t(a,i,o,n)?e(r,o,n):{randomColumn:a,randomRow:i}};var o=r(653),n=r.n(o),a=r(585),i=r.n(a),s=r(61),l=r.n(s);const c=n()(),h=n()(),u=l()(),d=l()();c.randomlyPlaceShips(),h.placeShip(0,0,"horizontal",i()(5)),h.placeShip(3,4,"horizontal",i()(3)),h.placeShip(6,7,"horizontal",i()(2)),h.placeShip(9,1,"vertical",i()(3)),h.placeShip(5,9,"horizontal",i()(4));const m=(()=>{const t={};return{publish:function(e,r){Array.isArray(t[e])&&t[e].forEach((t=>{t(r)}))},subscribe:function e(r,o){Array.isArray(e[r])||(t[r]=[]),t[r].push(o);const n=t[r].length-1;return{unsubscribe(){t[r].splice(n,1)}}}}})();((t,e,r,o,n)=>{const a=document.querySelector("div.enemy-board");for(let i=0;i<10;i+=1)for(let s=0;s<10;s+=1){const l=a.querySelector(`.cell:nth-child(${10*s+i+1})`);l.setAttribute("column",i),l.setAttribute("row",s),l.addEventListener("click",(()=>{n.publish("click",{cell:l,column:i,row:s,playerBoard:t,enemyBoard:e,player:r,enemy:o})}),{once:!0})}})(c,h,u,d,m),m.subscribe("click",(({cell:r,column:o,row:n,playerBoard:a,enemyBoard:i,player:s,enemy:l})=>{((e,r,o,n,a)=>{n.getLocation(r,o).isShip?e.classList.add("hit"):e.classList.add("miss"),t(r,o,n,a)})(r,o,n,i,s);const{randomColumn:c,randomRow:h}=e(r,a,l);((t,e)=>{const r=document.querySelector(`.cell[column='${t}'][row='${e}']`);r.classList.contains("ship")?r.classList.add("hit"):r.classList.add("miss")})(c,h)})),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=e.querySelector(`.cell:nth-child(${10*o+r+1})`);n.setAttribute("column",r),n.setAttribute("row",o),t(o,r).isShip&&n.classList.add("ship")}})(c)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiMkJBQ0EsTUFBTUEsRUFBYSxFQUFRLEtBeUszQkMsRUFBT0MsUUF0S2lCLEtBQ3BCLE1BQU1DLEVBQVksQ0FBRUMsWUFBWSxFQUFPQyxRQUFRLEVBQU9DLFdBQVcsR0FDM0RDLEVBQVlDLE1BQU0sSUFDbkJDLEtBQUtDLGdCQUFnQlAsSUFDckJRLEtBQUksSUFBTUgsTUFBTSxJQUFJQyxLQUFLQyxnQkFBZ0JQLE1BRXhDUyxFQUFRLENBQ1ZaLEVBQVcsRUFBRyxXQUNkQSxFQUFXLEVBQUcsY0FDZEEsRUFBVyxFQUFHLGFBQ2RBLEVBQVcsRUFBRyxhQUNkQSxFQUFXLEVBQUcsZ0JBb0JaYSxFQUFjLENBQUNDLEVBQVFDLElBQVFSLElBQVlPLEtBQVVDLEdBRXJEQyxFQUFjLENBQUNGLEVBQVFDLEVBQUtFLEVBTEgsS0FDM0JDLE9BQU9DLE9BQU9oQixFQUFXLENBQUVHLFdBQVcsSUFJRGMsV0FDRkMsSUFBL0JkLElBQVlPLEtBQVVDLEtBQzFCUixFQUFVTyxHQUFRQyxHQUFPRSxJQUQ0QixHQUtuREssRUFBMEIsQ0FBQ1IsRUFBUUMsS0FFckNDLEVBQVlGLEVBQVMsRUFBR0MsRUFBTSxHQUU5QkMsRUFBWUYsRUFBUUMsRUFBTSxJQXVDeEJRLEVBQVksQ0FBQ1QsRUFBUUMsRUFBS1MsRUFBV1AsS0FDdkMsTUFBTVEsRUFBYVIsRUFBS1MsWUFDeEIsR0FBa0IsYUFBZEYsR0FDQSxHQUFJVCxHQUFPLEdBQUtBLEVBQU1VLEVBQWEsRUFBSWxCLEVBQVVvQixPQUFRLENBQ3JELElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJSCxFQUFZRyxHQUFLLEVBQ2pDWixFQUFZRixFQUFRQyxFQUFNYSxFQUFHWCxHQUM3QkQsRUFBWUYsRUFBUyxFQUFHQyxFQUFNYSxHQUM5QlosRUFBWUYsRUFBUyxFQUFHQyxFQUFNYSxHQU9sQyxNQWhDdUMsRUFDL0NkLEVBQ0FDLEVBQ0FVLEtBSUFILEVBQXdCUixFQUFRQyxHQUVoQ0MsRUFBWUYsRUFBUUMsRUFBTVUsR0FFMUJULEVBQVlGLEVBQVMsRUFBR0MsRUFBTVUsR0FFOUJULEVBQVlGLEVBQVMsRUFBR0MsRUFBTVUsR0FFOUJULEVBQVlGLEVBQVMsRUFBR0MsRUFBTSxJQVl0QmMsQ0FDSWYsRUFDQUMsRUFDQVUsSUFFRyxRQUVSLEdBQWtCLGVBQWRELEdBQ0hWLEdBQVUsR0FBS0EsRUFBU1csRUFBYSxFQUFJbEIsRUFBVW9CLE9BQVEsQ0FDM0QsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlILEVBQVlHLEdBQUssRUFDakNaLEVBQVlGLEVBQVNjLEVBQUdiLEVBQUtFLEdBQzdCRCxFQUFZRixFQUFTYyxFQUFHYixFQUFNLEdBQzlCQyxFQUFZRixFQUFTYyxFQUFHYixFQUFNLEdBT2xDLE1BaEV5QyxFQUNqREQsRUFDQUMsRUFDQVUsS0FJQUgsRUFBd0JSLEVBQVFDLEdBRWhDQyxFQUFZRixFQUFTVyxFQUFZVixHQUVqQ0MsRUFBWUYsRUFBUyxFQUFHQyxFQUFNLEdBRTlCQyxFQUFZRixFQUFTVyxFQUFZVixFQUFNLEdBRXZDQyxFQUFZRixFQUFTVyxFQUFZVixFQUFNLElBNEMvQmUsQ0FDSWhCLEVBQ0FDLEVBQ0FVLElBRUcsRUFHZixPQUFPLEdBR0xNLEVBQXdCLEtBQzFCLE1BQU1DLEVBQ2dDLElBQWxDQyxLQUFLQyxNQUFzQixFQUFoQkQsS0FBS0UsVUFBc0IsV0FBYSxhQUd2RCxNQUFPLENBQUVDLGFBRllILEtBQUtDLE1BQXNCLEdBQWhCRCxLQUFLRSxVQUVkRSxVQURMSixLQUFLQyxNQUFzQixHQUFoQkQsS0FBS0UsVUFDQUgsb0JBa0N0QyxNQUFPLENBQ0hNLDJDQVBnRGIsR0FDaERsQixFQUFVZ0MsT0FBT0MsUUFBUUMsSUFBa0MsSUFBdEJBLEVBQVFuQyxZQUN4Q3FCLFNBQ0xGLEVBQWEsRUFLYlosY0FDQTZCLGNBYmtCLENBQUM1QixFQUFRQyxLQUMzQlIsRUFBVU8sR0FBUUMsR0FBS1gsWUFBYSxHQWFwQ3VDLHdCQWpKNEIsSUFDNUJwQyxFQUFVZ0MsT0FBT0ssT0FDWkMsSUFDdUIsSUFBaEJBLEVBQUt4QyxTQUNXLElBQWhCd0MsRUFBS3hDLFNBQXVDLElBQXBCd0MsRUFBS3pDLFlBQ3RCeUMsRUFBS0MsWUFBWUYsT0FBT0csR0FBa0IsUUFBVEEsTUE2SXBEeEIsWUFDQXlCLG1CQXJDdUIsS0FDdkIsTUFBTUMsRUFBYyxHQUNwQixJQUFLLElBQUlyQixFQUFJLEVBQUdBLEVBQUloQixFQUFNZSxPQUFRQyxHQUFLLEVBQUcsQ0FDdEMsTUFBTSxhQUFFUSxFQUFZLFVBQUVDLEVBQVMsZ0JBQUVMLEdBQzdCRCxJQUNFZCxFQUFPTCxFQUFNZ0IsR0FDYnNCLEVBQVdyQyxFQUFZdUIsRUFBY0MsSUFFbkIsSUFBcEJhLEVBQVM3QyxTQUNjLElBQXZCNkMsRUFBUzVDLFlBRUwsSUFESmlCLEVBQVVhLEVBQWNDLEVBQVdMLEVBQWlCZixHQUdwRFcsR0FBSyxFQUVMcUIsRUFBWUUsS0FBSyxDQUFFZixlQUFjQyxZQUFXTCxvQkFHcEQsT0FBT2lCLEdBb0JQbEIsMkIsT0NuSlI5QixFQUFPQyxRQW5CYyxDQUFDa0QsRUFBTyxZQWFsQixDQUNIQyxRQWJZLElBQU1ELEVBY2xCRSxPQVpXLENBQUN4QyxFQUFRQyxHQUFPRixjQUFhNkIsb0JBQ3hDLE1BQU1RLEVBQVdyQyxFQUFZQyxFQUFRQyxHQUNyQyxPQUE0QixJQUF4Qm1DLEVBQVM5QyxZQUF5QjhDLEVBQVM3QyxRQUFVNkMsRUFBU0osWUFBWVMsU0FBUyxVQUNuRmIsRUFBYzVCLEVBQVFDLEdBQ2YsZUFHSixzQyxRQ2lCZmQsRUFBT0MsUUEzQlksQ0FBQ3lCLEVBQVF5QixFQUFPLFVBRS9CLE1BQU1JLEVBQVNoRCxNQUFNbUIsR0FBUWxCLEtBQUssU0FjbEMsTUFBTyxDQUNIMkMsT0FDQTFCLFVBZGMsSUFBTThCLEVBQU83QixPQWUzQjhCLE9BTFcsSUFBTUQsRUFBT1osT0FBT2MsR0FBMEIsUUFBYkEsSUFNNUNDLElBWlNELElBQ0xBLEVBQVcvQixJQUNYNkIsRUFBT0UsR0FBWSxRQVd2QlosVUFmYyxJQUFNVSxFQWdCcEJwRCxZQUFZLEVBQ1pDLFFBQVEsTUN0Qlp1RCxFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCekMsSUFBakIwQyxFQUNILE9BQU9BLEVBQWE3RCxRQUdyQixJQUFJRCxFQUFTMkQsRUFBeUJFLEdBQVksQ0FHakQ1RCxRQUFTLElBT1YsT0FIQThELEVBQW9CRixHQUFVN0QsRUFBUUEsRUFBT0MsUUFBUzJELEdBRy9DNUQsRUFBT0MsUUNwQmYyRCxFQUFvQkksRUFBS2hFLElBQ3hCLElBQUlpRSxFQUFTakUsR0FBVUEsRUFBT2tFLFdBQzdCLElBQU9sRSxFQUFpQixRQUN4QixJQUFNLEVBRVAsT0FEQTRELEVBQW9CTyxFQUFFRixFQUFRLENBQUVHLEVBQUdILElBQzVCQSxHQ0xSTCxFQUFvQk8sRUFBSSxDQUFDbEUsRUFBU29FLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWFQsRUFBb0JXLEVBQUVGLEVBQVlDLEtBQVNWLEVBQW9CVyxFQUFFdEUsRUFBU3FFLElBQzVFckQsT0FBT3VELGVBQWV2RSxFQUFTcUUsRUFBSyxDQUFFRyxZQUFZLEVBQU1DLElBQUtMLEVBQVdDLE1DSjNFVixFQUFvQlcsRUFBSSxDQUFDSSxFQUFLQyxJQUFVM0QsT0FBTzRELFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEcsbUJDQWxGLE1BQU1JLEVBQWUsQ0FBQ25FLEVBQVFDLEVBQUttRSxFQUFZQyxJQUMzQ0EsRUFBTzdCLE9BQU94QyxFQUFRQyxFQUFLbUUsR0FhekJFLEVBQW1CLENBQUN2QyxFQUFNd0MsRUFBYUMsS0FDekMsTUFBTSxhQUFFbEQsRUFBWSxVQUFFQyxHQUFjZ0QsRUFBWXRELHdCQUNoRCxNQUFpRSxvQ0FBOURrRCxFQUFhN0MsRUFBY0MsRUFBV2dELEVBQWFDLEdBQXFERixFQUFpQnZDLEVBQU13QyxFQUFhQyxHQUV4SSxDQUFFbEQsZUFBY0MsYyx5RENaM0IsTUFBTWdELEVBQWMsTUFDZEgsRUFBYSxNQUViLEVBQVMsTUFFVEssRUFBVyxNQUVqQkYsRUFBWXJDLHFCQUNaa0MsRUFBVzNELFVBQVUsRUFBRyxFQUFHLGFBQWMsSUFBVyxJQUNwRDJELEVBQVczRCxVQUFVLEVBQUcsRUFBRyxhQUFjLElBQVcsSUFDcEQyRCxFQUFXM0QsVUFBVSxFQUFHLEVBQUcsYUFBYyxJQUFXLElBQ3BEMkQsRUFBVzNELFVBQVUsRUFBRyxFQUFHLFdBQVksSUFBVyxJQUNsRDJELEVBQVczRCxVQUFVLEVBQUcsRUFBRyxhQUFjLElBQVcsSUFFcEQsTUFBTWlFLEVEY2dCLE1BQ2xCLE1BQU1DLEVBQWMsR0F3QnBCLE1BQU8sQ0FDSEMsUUF2QkosU0FBaUJDLEVBQVdDLEdBQ25CcEYsTUFBTXFGLFFBQVFKLEVBQVlFLEtBRy9CRixFQUFZRSxHQUFXRyxTQUFTQyxJQUM1QkEsRUFBU0gsT0FtQmJJLFVBaEJKLFNBQVNBLEVBQVVMLEVBQVdJLEdBQ3JCdkYsTUFBTXFGLFFBQVFHLEVBQVVMLE1BQ3pCRixFQUFZRSxHQUFhLElBRTdCRixFQUFZRSxHQUFXeEMsS0FBSzRDLEdBQzVCLE1BQU1FLEVBQVFSLEVBQVlFLEdBQVdoRSxPQUFTLEVBRTlDLE1BQU8sQ0FDSHVFLGNBQ0lULEVBQVlFLEdBQVdRLE9BQU9GLEVBQU8sUUNsQzFDRyxHRDhENkIsRUFDcENmLEVBQ0FILEVBQ0FDLEVBQ0FHLEVBQ0FFLEtBRUEsTUFBTWEsRUFBaUJDLFNBQVNDLGNBQWMsbUJBRTlDLElBQUssSUFBSXpGLEVBQVMsRUFBR0EsRUFBUyxHQUFJQSxHQUFVLEVBQ3hDLElBQUssSUFBSUMsRUFBTSxFQUFHQSxFQUFNLEdBQUlBLEdBQU8sRUFBRyxDQUVsQyxNQUFNOEIsRUFBT3dELEVBQWVFLGNBQ3hCLG1CQUF5QixHQUFOeEYsRUFBV0QsRUFBUyxNQUUzQytCLEVBQUsyRCxhQUFhLFNBQVUxRixHQUM1QitCLEVBQUsyRCxhQUFhLE1BQU96RixHQUV6QjhCLEVBQUs0RCxpQkFDRCxTQUNBLEtBQ0lqQixFQUFHRSxRQUFRLFFBQVMsQ0FDaEI3QyxPQUNBL0IsU0FDQUMsTUFDQXNFLGNBQ0FILGFBQ0FDLFNBQ0FHLFlBR1IsQ0FBRW9CLE1BQU0sTUMzRnhCQyxDQUF5QnRCLEVBQWFILEVBQVksRUFBUUssRUFBVUMsR0FFcEVBLEVBQUdRLFVBQVUsU0QrRlMsRUFDbEJuRCxPQUNBL0IsU0FDQUMsTUFDQXNFLGNBQ0FILGFBQ0FDLFNBQ0FHLFlBM0hvQixFQUFDekMsRUFBTS9CLEVBQVFDLEVBQUttRSxFQUFZQyxLQUMvQkQsRUFBV3JFLFlBQVlDLEVBQVFDLEdBQ25DVixPQUNid0MsRUFBSytELFVBQVVDLElBQUksT0FHbkJoRSxFQUFLK0QsVUFBVUMsSUFBSSxRQUV2QjVCLEVBQWFuRSxFQUFRQyxFQUFLbUUsRUFBWUMsSUFzSHRDMkIsQ0FBZ0JqRSxFQUFNL0IsRUFBUUMsRUFBS21FLEVBQVlDLEdBRS9DLE1BQU0sYUFBRS9DLEVBQVksVUFBRUMsR0FBYytDLEVBQ2hDdkMsRUFDQXdDLEVBQ0FDLEdBakhrQixFQUFDeEUsRUFBUUMsS0FDL0IsTUFBTThCLEVBQU95RCxTQUFTQyxjQUNsQixpQkFBaUJ6RixZQUFpQkMsT0FFbEM4QixFQUFLK0QsVUFBVUcsU0FBUyxRQUN4QmxFLEVBQUsrRCxVQUFVQyxJQUFJLE9BRW5CaEUsRUFBSytELFVBQVVDLElBQUksU0E0R3RCRyxDQUFrQjVFLEVBQWNDLE1BdkVKLEdBQUd4QixrQkFDaEMsTUFBTW9HLEVBQWtCWCxTQUFTQyxjQUFjLG9CQUUvQyxJQUFLLElBQUl6RixFQUFTLEVBQUdBLEVBQVMsR0FBSUEsR0FBVSxFQUN4QyxJQUFLLElBQUlDLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxHQUFPLEVBQUcsQ0FDbEMsTUFBTThCLEVBQU9vRSxFQUFnQlYsY0FDekIsbUJBQXlCLEdBQU54RixFQUFXRCxFQUFTLE1BRTNDK0IsRUFBSzJELGFBQWEsU0FBVTFGLEdBQzVCK0IsRUFBSzJELGFBQWEsTUFBT3pGLEdBQ3JCRixFQUFZRSxFQUFLRCxHQUFRVCxRQUN6QndDLEVBQUsrRCxVQUFVQyxJQUFJLFVDakRuQ0ssQ0FBa0I3QixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvZ2FtZWJvYXJkL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9wbGF5ZXIvcGxheWVyLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL3NoaXAvc2hpcC5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG5jb25zdCBjcmVhdGVTaGlwID0gcmVxdWlyZSgnLi4vc2hpcC9zaGlwJylcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmNvbnN0IGNyZWF0ZUdhbWVCb2FyZCA9ICgpID0+IHtcbiAgICBjb25zdCBlbXB0eUNlbGwgPSB7IGhhc0JlZW5IaXQ6IGZhbHNlLCBpc1NoaXA6IGZhbHNlLCBvZmZMaW1pdHM6IGZhbHNlIH1cbiAgICBjb25zdCBnYW1lQm9hcmQgPSBBcnJheSgxMClcbiAgICAgICAgLmZpbGwoc3RydWN0dXJlZENsb25lKGVtcHR5Q2VsbCkpXG4gICAgICAgIC5tYXAoKCkgPT4gQXJyYXkoMTApLmZpbGwoc3RydWN0dXJlZENsb25lKGVtcHR5Q2VsbCkpKVxuXG4gICAgY29uc3Qgc2hpcHMgPSBbXG4gICAgICAgIGNyZWF0ZVNoaXAoNSwgJ0NhcnJpZXInKSxcbiAgICAgICAgY3JlYXRlU2hpcCg0LCAnQmF0dGxlc2hpcCcpLFxuICAgICAgICBjcmVhdGVTaGlwKDMsICdEZXN0cm95ZXInKSxcbiAgICAgICAgY3JlYXRlU2hpcCgzLCAnU3VibWFyaW5lJyksXG4gICAgICAgIGNyZWF0ZVNoaXAoMiwgJ1BhdHJvbCBCb2F0JyksXG4gICAgXVxuXG4gICAgY29uc3QgY2hlY2tJZkFsbFNoaXBzSGF2ZVN1bmsgPSAoKSA9PlxuICAgICAgICBnYW1lQm9hcmQuZmxhdCgpLmV2ZXJ5KFxuICAgICAgICAgICAgKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5pc1NoaXAgPT09IGZhbHNlKSByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIGlmIChjZWxsLmlzU2hpcCA9PT0gdHJ1ZSAmJiBjZWxsLmhhc0JlZW5IaXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNlbGwuZ2V0U3RhdHVzKCkuZXZlcnkoKHVuaXQpID0+IHVuaXQgPT09ICdoaXQnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gKHBvc2l0aW9uLmlzU2hpcCA9PT0gZmFsc2UpIHx8XG4gICAgICAgICAgICAvLyAocG9zaXRpb24uaXNTaGlwID09PSB0cnVlICYmIHBvc2l0aW9uLmhhc0JlZW5IaXQgPT09IHRydWUpXG4gICAgICAgIClcblxuICAgIGNvbnN0IGNyZWF0ZU9mZkxpbWl0TG9jYXRpb24gPSAoKSA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKGVtcHR5Q2VsbCwgeyBvZmZMaW1pdHM6IHRydWUgfSlcblxuICAgIGNvbnN0IGdldExvY2F0aW9uID0gKGNvbHVtbiwgcm93KSA9PiBnYW1lQm9hcmQ/Lltjb2x1bW5dPy5bcm93XVxuXG4gICAgY29uc3Qgc2V0TG9jYXRpb24gPSAoY29sdW1uLCByb3csIHNoaXAgPSBjcmVhdGVPZmZMaW1pdExvY2F0aW9uKCkpID0+IHtcbiAgICAgICAgaWYgKGdhbWVCb2FyZD8uW2NvbHVtbl0/Lltyb3ddID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlXG4gICAgICAgIGdhbWVCb2FyZFtjb2x1bW5dW3Jvd10gPSBzaGlwXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMgPSAoY29sdW1uLCByb3cpID0+IHtcbiAgICAgICAgLy8gdG9wLWxlZnRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uIC0gMSwgcm93IC0gMSlcbiAgICAgICAgLy8gdG9wXG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiwgcm93IC0gMSlcbiAgICB9XG5cbiAgICBjb25zdCBhZGRPZmZMaW1pdEFyZWFGb3JIb3Jpem9udGFsbHlQb3NpdGlvbmVkU2hpcCA9IChcbiAgICAgICAgY29sdW1uLFxuICAgICAgICByb3csXG4gICAgICAgIHNoaXBMZW5ndGhcbiAgICApID0+IHtcbiAgICAgICAgLy8gcG9zaXRpb25zIHJlbGF0aXZlIHRvIHRoZSBzaGlwIGl0c2VsZihpZS4gYSBob3Jpem9udGFsIHNoaXAncyBib3R0b20gaXMgdG8gdGhlIHJpZ2h0KVxuXG4gICAgICAgIGFkZE9mZkxpbWl0QXJlYUZvclNoaXBzKGNvbHVtbiwgcm93KVxuICAgICAgICAvLyBib3R0b21cbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgc2hpcExlbmd0aCwgcm93KVxuICAgICAgICAvLyBib3R0b20tbGVmdFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gLSAxLCByb3cgKyAxKVxuICAgICAgICAvLyBib3R0b20tcmlnaHRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgc2hpcExlbmd0aCwgcm93ICsgMSlcbiAgICAgICAgLy8gdG9wLXJpZ2h0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIHNoaXBMZW5ndGgsIHJvdyAtIDEpXG4gICAgfVxuXG4gICAgY29uc3QgYWRkT2ZmTGltaXRBcmVhRm9yVmVydGljYWxseVBvc2l0aW9uZWRTaGlwID0gKFxuICAgICAgICBjb2x1bW4sXG4gICAgICAgIHJvdyxcbiAgICAgICAgc2hpcExlbmd0aFxuICAgICkgPT4ge1xuICAgICAgICAvLyBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gaG93IHRoZSB1c2VyIHNlZXMgaXQoaWUuIGEgdmVydGljYWwgc2hpcCdzIGJvdHRvbSBpcyB0byB0aGUgYm90dG9tKVxuXG4gICAgICAgIGFkZE9mZkxpbWl0QXJlYUZvclNoaXBzKGNvbHVtbiwgcm93KVxuICAgICAgICAvLyBib3R0b21cbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uLCByb3cgKyBzaGlwTGVuZ3RoKVxuICAgICAgICAvLyBib3R0b20tcmlnaHRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgMSwgcm93ICsgc2hpcExlbmd0aClcbiAgICAgICAgLy8gYm90dG9tLWxlZnRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uIC0gMSwgcm93ICsgc2hpcExlbmd0aClcbiAgICAgICAgLy8gdG9wLXJpZ2h0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIDEsIHJvdyAtIDEpXG4gICAgfVxuXG4gICAgY29uc3QgcGxhY2VTaGlwID0gKGNvbHVtbiwgcm93LCBkaXJlY3Rpb24sIHNoaXApID0+IHtcbiAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IHNoaXAuZ2V0TGVuZ3RoKClcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgaWYgKHJvdyA+PSAwICYmIHJvdyArIHNoaXBMZW5ndGggLSAxIDwgZ2FtZUJvYXJkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiwgcm93ICsgaSwgc2hpcClcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgMSwgcm93ICsgaSlcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uIC0gMSwgcm93ICsgaSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkT2ZmTGltaXRBcmVhRm9yVmVydGljYWxseVBvc2l0aW9uZWRTaGlwKFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgICAgICAgICAgc2hpcExlbmd0aFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICBpZiAoY29sdW1uID49IDAgJiYgY29sdW1uICsgc2hpcExlbmd0aCAtIDEgPCBnYW1lQm9hcmQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgaSwgcm93LCBzaGlwKVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBpLCByb3cgKyAxKVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBpLCByb3cgLSAxKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JIb3Jpem9udGFsbHlQb3NpdGlvbmVkU2hpcChcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgIHNoaXBMZW5ndGhcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBtYWtlUmFuZG9tQ29vcmRpbmF0ZXMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJhbmRvbURpcmVjdGlvbiA9XG4gICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKSA9PT0gMCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCdcbiAgICAgICAgY29uc3QgcmFuZG9tQ29sdW1uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgIGNvbnN0IHJhbmRvbVJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxuICAgICAgICByZXR1cm4geyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uIH1cbiAgICB9XG5cbiAgICBjb25zdCByYW5kb21seVBsYWNlU2hpcHMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNoaXBEZXRhaWxzID0gW11cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgeyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uIH0gPVxuICAgICAgICAgICAgICAgIG1ha2VSYW5kb21Db29yZGluYXRlcygpXG4gICAgICAgICAgICBjb25zdCBzaGlwID0gc2hpcHNbaV1cbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0TG9jYXRpb24ocmFuZG9tQ29sdW1uLCByYW5kb21Sb3cpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbG9jYXRpb24uaXNTaGlwID09PSB0cnVlIHx8XG4gICAgICAgICAgICAgICAgbG9jYXRpb24ub2ZmTGltaXRzID09PSB0cnVlIHx8XG4gICAgICAgICAgICAgICAgcGxhY2VTaGlwKHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93LCByYW5kb21EaXJlY3Rpb24sIHNoaXApID09PVxuICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaSAtPSAxXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNoaXBEZXRhaWxzLnB1c2goeyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNoaXBEZXRhaWxzXG4gICAgfVxuXG4gICAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChjb2x1bW4sIHJvdykgPT4ge1xuICAgICAgICBnYW1lQm9hcmRbY29sdW1uXVtyb3ddLmhhc0JlZW5IaXQgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgY2hlY2tJZk9mZkxpbWl0Wm9uZVdhc0NvcnJlY3RseUltcGxlbWVudGVkID0gKHNoaXBMZW5ndGgpID0+XG4gICAgICAgIGdhbWVCb2FyZC5mbGF0KCkuZmlsdGVyKChlbGVtZW50KSA9PiBlbGVtZW50Lm9mZkxpbWl0cyA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIC5sZW5ndGggPT09XG4gICAgICAgIHNoaXBMZW5ndGggKyAyXG4gICAgLy8gYWRkaW5nIHNoaXBMZW5ndGggcGx1cyB0d28gYmVjYXVzZSBmb3IgZXZlcnkgaW5jcmVhc2UgaW4gdGhlIHNpemUgb2Ygc2hpcCwgdGhlIHpvbmVzIGNvdmVyZWQgaW5jcmVhc2UgYnkgMiB1bml0c1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hlY2tJZk9mZkxpbWl0Wm9uZVdhc0NvcnJlY3RseUltcGxlbWVudGVkLFxuICAgICAgICBnZXRMb2NhdGlvbixcbiAgICAgICAgcmVjZWl2ZUF0dGFjayxcbiAgICAgICAgY2hlY2tJZkFsbFNoaXBzSGF2ZVN1bmssXG4gICAgICAgIHBsYWNlU2hpcCxcbiAgICAgICAgcmFuZG9tbHlQbGFjZVNoaXBzLFxuICAgICAgICBtYWtlUmFuZG9tQ29vcmRpbmF0ZXMsXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUdhbWVCb2FyZFxuIiwiY29uc3QgY3JlYXRlUGxheWVyID0gKG5hbWUgPSAncGxheWVyJykgPT4ge1xuICAgIGNvbnN0IGdldE5hbWUgPSAoKSA9PiBuYW1lXG5cbiAgICBjb25zdCBhdHRhY2sgPSAoY29sdW1uLCByb3csIHsgZ2V0TG9jYXRpb24sIHJlY2VpdmVBdHRhY2sgfSkgPT4ge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGNvbHVtbiwgcm93KVxuICAgICAgICBpZiAobG9jYXRpb24uaGFzQmVlbkhpdCA9PT0gZmFsc2UgfHwgKGxvY2F0aW9uLmlzU2hpcCAmJiBsb2NhdGlvbi5nZXRTdGF0dXMoKS5pbmNsdWRlcygndW5oaXQnKSkpIHtcbiAgICAgICAgICAgIHJlY2VpdmVBdHRhY2soY29sdW1uLCByb3cpXG4gICAgICAgICAgICByZXR1cm4gXCJJdCdzIGEgaGl0IVwiXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ1lvdSBoYXZlIGFscmVhZHkgaGl0IHRoaXMgc3BvdCEnXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0TmFtZSxcbiAgICAgICAgYXR0YWNrLFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVQbGF5ZXJcbiIsImNvbnN0IGNyZWF0ZVNoaXAgPSAobGVuZ3RoLCBuYW1lID0gJ3NoaXAnKSA9PiB7XG5cbiAgICBjb25zdCBzdGF0dXMgPSBBcnJheShsZW5ndGgpLmZpbGwoJ3VuaGl0JylcblxuICAgIGNvbnN0IGdldExlbmd0aCA9ICgpID0+IHN0YXR1cy5sZW5ndGhcblxuICAgIGNvbnN0IGdldFN0YXR1cyA9ICgpID0+IHN0YXR1c1xuXG4gICAgY29uc3QgaGl0ID0gKHBvc2l0aW9uKSA9PiB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgICAgICAgICAgc3RhdHVzW3Bvc2l0aW9uXSA9ICdoaXQnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpc1N1bmsgPSAoKSA9PiBzdGF0dXMuZXZlcnkoKHBvc2l0aW9uKSA9PiBwb3NpdGlvbiA9PT0gJ2hpdCcpXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBnZXRMZW5ndGgsXG4gICAgICAgIGlzU3VuayxcbiAgICAgICAgaGl0LFxuICAgICAgICBnZXRTdGF0dXMsXG4gICAgICAgIGhhc0JlZW5IaXQ6IGZhbHNlLFxuICAgICAgICBpc1NoaXA6IHRydWUsXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVNoaXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJjb25zdCBoYW5kbGVBdHRhY2sgPSAoY29sdW1uLCByb3csIGVuZW15Qm9hcmQsIHBsYXllcikgPT5cbiAgICBwbGF5ZXIuYXR0YWNrKGNvbHVtbiwgcm93LCBlbmVteUJvYXJkKVxuXG5jb25zdCBhdHRhY2tFbmVteUNlbGwgPSAoY2VsbCwgY29sdW1uLCByb3csIGVuZW15Qm9hcmQsIHBsYXllcikgPT4ge1xuICAgIGNvbnN0IGNlbGxMb2NhdGlvbiA9IGVuZW15Qm9hcmQuZ2V0TG9jYXRpb24oY29sdW1uLCByb3cpXG4gICAgaWYgKGNlbGxMb2NhdGlvbi5pc1NoaXApIHtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdoaXQnKVxuICAgICAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ21pc3MnKVxuICAgIH1cbiAgICBoYW5kbGVBdHRhY2soY29sdW1uLCByb3csIGVuZW15Qm9hcmQsIHBsYXllcilcbn1cblxuY29uc3QgYXR0YWNrUGxheWVyQ2VsbCA9IChjZWxsLCBwbGF5ZXJCb2FyZCwgZW5lbXkpID0+IHtcbiAgICBjb25zdCB7IHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93IH0gPSBwbGF5ZXJCb2FyZC5tYWtlUmFuZG9tQ29vcmRpbmF0ZXMoKVxuICAgIGlmKGhhbmRsZUF0dGFjayhyYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcGxheWVyQm9hcmQsIGVuZW15KSA9PT0gJ1lvdSBoYXZlIGFscmVhZHkgaGl0IHRoaXMgc3BvdCEnKSByZXR1cm4gYXR0YWNrUGxheWVyQ2VsbChjZWxsLCBwbGF5ZXJCb2FyZCwgZW5lbXkpXG5cbiAgICByZXR1cm4geyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdyB9XG59XG5cbmNvbnN0IHJlbmRlckVuZW15QXRhY2tzID0gKGNvbHVtbiwgcm93KSA9PiB7XG4gICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIGAuY2VsbFtjb2x1bW49JyR7Y29sdW1ufSddW3Jvdz0nJHtyb3d9J11gXG4gICAgKVxuICAgIGlmIChjZWxsLmNsYXNzTGlzdC5jb250YWlucygnc2hpcCcpKSB7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0JylcbiAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ21pc3MnKVxuICAgIH1cbn1cblxuLy8gaHR0cHM6Ly9qc21hbmlmZXN0LmNvbS90aGUtcHVibGlzaC1zdWJzY3JpYmUtcGF0dGVybi1pbi1qYXZhc2NyaXB0L1xuXG5leHBvcnQgY29uc3QgcHViU3ViID0gKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmliZXJzID0ge31cblxuICAgIGZ1bmN0aW9uIHB1Ymxpc2goZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzdWJzY3JpYmVyc1tldmVudE5hbWVdKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2soZGF0YSlcbiAgICAgICAgfSlcbiAgICB9XG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHN1YnNjcmliZVtldmVudE5hbWVdKSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICBjb25zdCBpbmRleCA9IHN1YnNjcmliZXJzW2V2ZW50TmFtZV0ubGVuZ3RoIC0gMVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyc1tldmVudE5hbWVdLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwdWJsaXNoLFxuICAgICAgICBzdWJzY3JpYmUsXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyUGxheWVyU2hpcHMgPSAoeyBnZXRMb2NhdGlvbiB9KSA9PiB7XG4gICAgY29uc3QgcGxheWVyQm9hcmRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LnBsYXllci1ib2FyZCcpXG5cbiAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCAxMDsgY29sdW1uICs9IDEpIHtcbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsID0gcGxheWVyQm9hcmRBcmVhLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgYC5jZWxsOm50aC1jaGlsZCgke3JvdyAqIDEwICsgY29sdW1uICsgMX0pYFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHVtbicsIGNvbHVtbilcbiAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdyb3cnLCByb3cpXG4gICAgICAgICAgICBpZiAoZ2V0TG9jYXRpb24ocm93LCBjb2x1bW4pLmlzU2hpcCkge1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnc2hpcCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBhZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQgPSAoXG4gICAgcGxheWVyQm9hcmQsXG4gICAgZW5lbXlCb2FyZCxcbiAgICBwbGF5ZXIsXG4gICAgZW5lbXksXG4gICAgcHNcbikgPT4ge1xuICAgIGNvbnN0IGVuZW15Qm9hcmRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LmVuZW15LWJvYXJkJylcblxuICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IDEwOyBjb2x1bW4gKz0gMSkge1xuICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgIC8vIENyZWRpdGluZyBmb3JtdWxhIHRvIGNhbGN1bGF0ZSBudGgtY2hpbGQgdXNpbmcgbmVzdGVkIGxvb3A6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg4NzI2NjIvbWF0aC10by1kZXRlcm1pbmUtaXRlbS1pbmRleC1iYXNlZC1vbi1jb2wtcm93LXNlbGVjdGlvbi1pbi1ncmlkXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gZW5lbXlCb2FyZEFyZWEucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICBgLmNlbGw6bnRoLWNoaWxkKCR7cm93ICogMTAgKyBjb2x1bW4gKyAxfSlgXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnY29sdW1uJywgY29sdW1uKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3JvdycsIHJvdylcblxuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcy5wdWJsaXNoKCdjbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJCb2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15Qm9hcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBhdHRhY2sgPSAoe1xuICAgIGNlbGwsXG4gICAgY29sdW1uLFxuICAgIHJvdyxcbiAgICBwbGF5ZXJCb2FyZCxcbiAgICBlbmVteUJvYXJkLFxuICAgIHBsYXllcixcbiAgICBlbmVteSxcbn0pID0+IHtcbiAgICAvLyBodW1hbiBwbGF5ZXIgYXR0YWNraW5nIGNvbXB1dGVyXG4gICAgYXR0YWNrRW5lbXlDZWxsKGNlbGwsIGNvbHVtbiwgcm93LCBlbmVteUJvYXJkLCBwbGF5ZXIpXG4gICAgLy8gY29tcHV0ZXIgYXR0YWNraW5nIGh1bWFuXG4gICAgY29uc3QgeyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdyB9ID0gYXR0YWNrUGxheWVyQ2VsbChcbiAgICAgICAgY2VsbCxcbiAgICAgICAgcGxheWVyQm9hcmQsXG4gICAgICAgIGVuZW15XG4gICAgKVxuICAgICByZW5kZXJFbmVteUF0YWNrcyhyYW5kb21Db2x1bW4sIHJhbmRvbVJvdylcbn1cbiIsImltcG9ydCB7IGFkZExpc3RlbmVyc1RvRW5lbXlCb2FyZCwgcmVuZGVyUGxheWVyU2hpcHMscHViU3ViLCBhdHRhY2t9IGZyb20gJy4vZG9tJ1xuXG5pbXBvcnQgY3JlYXRlR2FtZUJvYXJkIGZyb20gJy4vZ2FtZWJvYXJkL2dhbWVib2FyZCdcbmltcG9ydCBjcmVhdGVTaGlwIGZyb20gJy4vc2hpcC9zaGlwJ1xuaW1wb3J0IGNyZWF0ZVBsYXllciBmcm9tICcuL3BsYXllci9wbGF5ZXInXG5cbmNvbnN0IHBsYXllckJvYXJkID0gY3JlYXRlR2FtZUJvYXJkKClcbmNvbnN0IGVuZW15Qm9hcmQgPSBjcmVhdGVHYW1lQm9hcmQoKVxuXG5jb25zdCBwbGF5ZXIgPSBjcmVhdGVQbGF5ZXIoKVxuXG5jb25zdCBjb21wdXRlciA9IGNyZWF0ZVBsYXllcigpXG5cbnBsYXllckJvYXJkLnJhbmRvbWx5UGxhY2VTaGlwcygpXG5lbmVteUJvYXJkLnBsYWNlU2hpcCgwLCAwLCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNSkpXG5lbmVteUJvYXJkLnBsYWNlU2hpcCgzLCA0LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoMykpXG5lbmVteUJvYXJkLnBsYWNlU2hpcCg2LCA3LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoMikpXG5lbmVteUJvYXJkLnBsYWNlU2hpcCg5LCAxLCAndmVydGljYWwnLCBjcmVhdGVTaGlwKDMpKVxuZW5lbXlCb2FyZC5wbGFjZVNoaXAoNSwgOSwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDQpKVxuXG5jb25zdCBwcyA9IHB1YlN1YigpXG5cbmFkZExpc3RlbmVyc1RvRW5lbXlCb2FyZChwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZCwgcGxheWVyLCBjb21wdXRlciwgcHMpXG5cbnBzLnN1YnNjcmliZSgnY2xpY2snLCBhdHRhY2spXG5cblxucmVuZGVyUGxheWVyU2hpcHMocGxheWVyQm9hcmQpIl0sIm5hbWVzIjpbImNyZWF0ZVNoaXAiLCJtb2R1bGUiLCJleHBvcnRzIiwiZW1wdHlDZWxsIiwiaGFzQmVlbkhpdCIsImlzU2hpcCIsIm9mZkxpbWl0cyIsImdhbWVCb2FyZCIsIkFycmF5IiwiZmlsbCIsInN0cnVjdHVyZWRDbG9uZSIsIm1hcCIsInNoaXBzIiwiZ2V0TG9jYXRpb24iLCJjb2x1bW4iLCJyb3ciLCJzZXRMb2NhdGlvbiIsInNoaXAiLCJPYmplY3QiLCJhc3NpZ24iLCJjcmVhdGVPZmZMaW1pdExvY2F0aW9uIiwidW5kZWZpbmVkIiwiYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMiLCJwbGFjZVNoaXAiLCJkaXJlY3Rpb24iLCJzaGlwTGVuZ3RoIiwiZ2V0TGVuZ3RoIiwibGVuZ3RoIiwiaSIsImFkZE9mZkxpbWl0QXJlYUZvclZlcnRpY2FsbHlQb3NpdGlvbmVkU2hpcCIsImFkZE9mZkxpbWl0QXJlYUZvckhvcml6b250YWxseVBvc2l0aW9uZWRTaGlwIiwibWFrZVJhbmRvbUNvb3JkaW5hdGVzIiwicmFuZG9tRGlyZWN0aW9uIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZG9tQ29sdW1uIiwicmFuZG9tUm93IiwiY2hlY2tJZk9mZkxpbWl0Wm9uZVdhc0NvcnJlY3RseUltcGxlbWVudGVkIiwiZmxhdCIsImZpbHRlciIsImVsZW1lbnQiLCJyZWNlaXZlQXR0YWNrIiwiY2hlY2tJZkFsbFNoaXBzSGF2ZVN1bmsiLCJldmVyeSIsImNlbGwiLCJnZXRTdGF0dXMiLCJ1bml0IiwicmFuZG9tbHlQbGFjZVNoaXBzIiwic2hpcERldGFpbHMiLCJsb2NhdGlvbiIsInB1c2giLCJuYW1lIiwiZ2V0TmFtZSIsImF0dGFjayIsImluY2x1ZGVzIiwic3RhdHVzIiwiaXNTdW5rIiwicG9zaXRpb24iLCJoaXQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhhbmRsZUF0dGFjayIsImVuZW15Qm9hcmQiLCJwbGF5ZXIiLCJhdHRhY2tQbGF5ZXJDZWxsIiwicGxheWVyQm9hcmQiLCJlbmVteSIsImNvbXB1dGVyIiwicHMiLCJzdWJzY3JpYmVycyIsInB1Ymxpc2giLCJldmVudE5hbWUiLCJkYXRhIiwiaXNBcnJheSIsImZvckVhY2giLCJjYWxsYmFjayIsInN1YnNjcmliZSIsImluZGV4IiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiLCJwdWJTdWIiLCJlbmVteUJvYXJkQXJlYSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwiYWRkTGlzdGVuZXJzVG9FbmVteUJvYXJkIiwiY2xhc3NMaXN0IiwiYWRkIiwiYXR0YWNrRW5lbXlDZWxsIiwiY29udGFpbnMiLCJyZW5kZXJFbmVteUF0YWNrcyIsInBsYXllckJvYXJkQXJlYSIsInJlbmRlclBsYXllclNoaXBzIl0sInNvdXJjZVJvb3QiOiIifQ==