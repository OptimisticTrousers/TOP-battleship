(()=>{var e={653:(e,t,o)=>{const r=o(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1},t=()=>{const t=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)t[o][r]={...e,column:o,row:r};return t};let o=t();const i=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],n=(e,t)=>o?.[e]?.[t],a=(t,r,i=(()=>Object.assign(e,{offLimits:!0}))())=>{if(void 0===o?.[t]?.[r])return!0;const n=o[t][r];return o[t][r]={...n,...i},!0},l=(e,t)=>{a(e-1,t-1),a(e,t-1)},c=(e,t,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=n(e,t+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}if("horizontal"===o)for(let o=0;o<r;o++){const r=n(e+o,t);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}return!1},s=(e,t,r,i)=>{const s=i.getLength();if(c(n(e,t)))return!1;if("vertical"===r){if(((e,t)=>e>=0&&e+t-1<o.length)(t,s)){for(let o=0;o<s;o+=1)a(e,t+o,{...i,position:o}),a(e+1,t+o),a(e-1,t+o);return((e,t,o)=>{l(e,t),a(e,t+o),a(e+1,t+o),a(e-1,t+o),a(e+1,t-1)})(e,t,s),!0}}else if("horizontal"===r&&((e,t)=>e>=0&&e+t-1<o.length)(e,s)){for(let o=0;o<s;o+=1)a(e+o,t,{...i,position:o}),a(e+o,t+1),a(e+o,t-1);return((e,t,o)=>{l(e,t),a(e+o,t),a(e-1,t+1),a(e+o,t+1),a(e+o,t-1)})(e,t,s),!0}return!1},h=()=>{const e=0===Math.floor(2*Math.random())?"vertical":"horizontal",t=Math.floor(100*Math.random()),r=(()=>{const e=[...o.flat()];return e.forEach((e=>{!0===e.hasBeenHit?e.availability=!1:e.availability=!0})),e})()[t];return!1===r.availability?h():{elementColumn:r.column,elementRow:r.row,randomDirection:e}};return{clearBoard:()=>{o=t()},checkIfLocationIsAShipOrOffLimits:c,checkIfOffLimitZoneWasCorrectlyImplemented:e=>o.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:n,receiveAttack:(e,t)=>{o[e][t].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let e=!0;for(let t=0;t<10;t++)for(let o=0;o<10;o++){const r=n(t,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){e=!1;break}}return e},placeShip:s,randomlyPlaceShips:()=>{const e=[];for(let t=0;t<i.length;t+=1){const o=i[t],{randomColumn:r,randomRow:n,randomDirection:a}=h(o.getLength());s(r,n,a,o)?e.push({randomColumn:r,randomRow:n,randomDirection:a}):t-=1}return e},makeRandomCoordinates:h}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:o,receiveAttack:r})=>{const i=o(e,t);return!1===i.hasBeenHit||i.isShip&&!1===i.getStatus().includes("unhit")?(r(e,t),i.hit?(i.hit(i.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"}})},585:e=>{e.exports=(e,t="ship")=>{const o=Array(e).fill("unhit");return{getName:()=>t,getLength:()=>o.length,isSunk:()=>o.every((e=>"hit"===e)),hit:t=>{t<e&&(o[t]="hit")},getStatus:()=>o,hasBeenHit:!1,offLimits:!0,isShip:!0}}}},t={};function o(r){var i=t[r];if(void 0!==i)return i.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,o),n.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=o(653),t=o.n(e),r=o(585),i=o.n(r);const n=(e,t,o,r)=>{const i=document.querySelector(`.${e}-board > .cell[column='${t}'][row='${o}']`);r.getLocation(t,o).isShip?i.classList.add("hit"):i.classList.add("miss")},a=(e,t,o,r)=>r.attack(e,t,o),l=(e,t,o)=>{const r=((e,t,o)=>{const r=o.getLocation(e+1,t),i=o.getLocation(e-1,t),n=o.getLocation(e,t+1),a=o.getLocation(e,t-1),l=[];return r&&!r.hasBeenHit&&l.push(r),i&&!i.hasBeenHit&&l.push(i),n&&!n.hasBeenHit&&l.push(n),a&&!a.hasBeenHit&&l.push(a),l})(e,t,o),i=Math.floor(Math.random()*r.length);return r[i]?r[i]:l(e,t,o)},c=(e,t,o)=>{const r={location(){return o.getLocation(this.column,this.row)}},i=Object.assign(Object.create(r),{column:e,row:t-1}),n=Object.assign(Object.create(r),{column:e,row:t+1}),a=Object.assign(Object.create(r),{column:e+1,row:t}),l=Object.assign(Object.create(r),{column:e-1,row:t}),c=[];return c.push(i),c.push(n),c.push(a),c.push(l),c},s=(e,t,o,r,i)=>{const h=e.getLocation(o,r);if("You hit a ship!"===a(o,r,e,t)){const n=l(o,r,e),a=n.column,u=c(o,r,e).filter((e=>void 0!==e.column&&void 0!==e.row)),p=n.row;if(h.isShip&&!1===h.isSunk())switch(Math.floor(Math.random()*u.length)){case 0:s(e,t,u[0].column,u[0].row,h);break;case 1:s(e,t,u[1].column,u[1].row,h);break;case 2:s(e,t,u[2].column,u[2].row,h);break;case 3:s(e,t,u[3].column,u[3].row,h)}setTimeout((()=>{s(e,t,a,p,i)}),700)}else if(h&&!1===h.isShip&&i&&!0===i.isShip){let n,a;i.getLength(),i.column>o&&(a=i.column-(i.column-o)),i.column<o&&(a=i.column+(o-i.column)),i.row>r&&(n=i.row-(i.row-r)),i.row<r&&(n=i.row+(r-i.row)),setTimeout((()=>{!1===i.isSunk()&&s(e,t,a,n,i)}),700)}setTimeout((()=>{n("player",o,r,e)}),700)},h=({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const i=t.querySelector(`.cell:nth-child(${10*r+o+1})`);i.setAttribute("column",o),i.setAttribute("row",r);const n=e(o,r);n.isShip&&(i.classList.add("ship"),i.setAttribute("ship-name",n.getName()))}},u=e=>{switch(e.clearBoard(),document.querySelectorAll(".player-board > .cell").forEach((e=>{e.classList.remove("ship"),e.classList.remove("hit"),e.classList.remove("miss")})),Math.floor(4*Math.random())){case 0:e.placeShip(9,1,"vertical",i()(5)),e.placeShip(0,3,"horizontal",i()(3)),e.placeShip(3,6,"horizontal",i()(2)),e.placeShip(6,5,"horizontal",i()(3)),e.placeShip(3,9,"horizontal",i()(4));break;case 1:e.placeShip(0,2,"horizontal",i()(5)),e.placeShip(4,5,"horizontal",i()(3)),e.placeShip(8,7,"horizontal",i()(2)),e.placeShip(5,9,"horizontal",i()(3)),e.placeShip(6,3,"horizontal",i()(4));break;case 2:e.placeShip(5,1,"horizontal",i()(5)),e.placeShip(3,3,"vertical",i()(3)),e.placeShip(0,0,"vertical",i()(2)),e.placeShip(6,5,"horizontal",i()(3)),e.placeShip(5,9,"horizontal",i()(4));break;default:e.placeShip(0,0,"horizontal",i()(5)),e.placeShip(3,4,"horizontal",i()(3)),e.placeShip(6,7,"horizontal",i()(2)),e.placeShip(9,1,"vertical",i()(3)),e.placeShip(5,9,"horizontal",i()(4))}h(e)};var p=o(61),m=o.n(p);const d=t()(),f=t()(),S=m()(),y=m()();document.querySelector("button.randomize").addEventListener("click",(()=>{u(d)})),u(d),f.placeShip(0,0,"horizontal",i()(5)),f.placeShip(3,4,"horizontal",i()(3)),f.placeShip(6,7,"horizontal",i()(2)),f.placeShip(9,1,"vertical",i()(3)),f.placeShip(5,9,"horizontal",i()(4));const b=(()=>{const e={};return{publish:function(t,o){Array.isArray(e[t])&&e[t].forEach((e=>{e(o)}))},subscribe:function t(o,r){Array.isArray(t[o])||(e[o]=[]),e[o].push(r);const i=e[o].length-1;return{unsubscribe(){e[o].splice(i,1)}}}}})();((e,t,o,r,i)=>{const n=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let l=0;l<10;l+=1){const c=n.querySelector(`.cell:nth-child(${10*l+a+1})`);c.setAttribute("column",a),c.setAttribute("row",l),c.addEventListener("click",(()=>{i.publish("click",{cell:c,column:a,row:l,playerBoard:e,enemyBoard:t,player:o,enemy:r})}),{once:!0})}})(d,f,S,y,b),b.subscribe("click",(({cell:e,column:t,row:o,playerBoard:r,enemyBoard:i,player:l,enemy:c})=>{((e,t,o,r)=>{a(e,t,o,r),n("enemy",e,t,o)})(t,o,i,l);const{elementColumn:h,elementRow:u}=r.makeRandomCoordinates();s(r,c,h,u),((e,t)=>{if(e.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",o.addEventListener("click",(()=>{location.reload()})),t.textContent="You lose!"}if(t.checkIfAllShipsHaveSunk()){const e=document.querySelector(".modal"),t=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");e.style.display="block",t.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}})(r,i)})),h(d)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,