(()=>{var e={653:(e,t,r)=>{const o=r(585);e.exports=()=>{const e={hasBeenHit:!1,isShip:!1,offLimits:!1},t=Array(10).fill(structuredClone(e)).map((()=>Array(10).fill(structuredClone(e)))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],n=()=>t.flat().every((e=>!1===e.isShip||!0===e.isShip&&!0===e.hasBeenHit&&e.getStatus().every((e=>"hit"===e)))),i=(r,o,n=(()=>Object.assign(e,{offLimits:!0}))())=>(void 0===t?.[r]?.[o]||(t[r][o]=n),!0),a=(e,r,o,n)=>{if(((e,r,o,n)=>{if(r<0||r>9||o<0||o>9)return!1;const i=e.getLength(0);if("vertical"===n){if(r+i>10)return!1}else if(o+i>10)return!1;if("vertical"===n){for(let n=0;n<e.length;n++)if(t[r+n][o])return!1}else for(let n=0;n<e.length;n++)if(t[r][o+n])return!1;if("vertical"===n){for(let n=0;n<e.length;n++)for(let e=-1;e<=1;e++)for(let i=-1;i<=1;i++)if(!(r+e+n<0||r+e+n>=10||o+i<0||o+i>=10)&&t[r+e+n][o+i])return!1}else for(let n=0;n<e.length;n++)for(let e=-1;e<=1;e++)for(let i=-1;i<=1;i++)if(!(r+e<0||r+e>=10||o+i+n<0||o+i+n>=10)&&t[r+e][o+i+n])return!1;return!0})(n,r,e,o))return!1;const a=n.getLength();if("vertical"===o)for(let t=0;t<a;t+=1)i(e,r+t,n);else if("horizontal"===o){for(let t=0;t<a;t+=1)i(e+t,r,n);return!0}return!1},l=e=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:e=>t.flat().filter((e=>!0===e.offLimits)).length===e+2,getLocation:(e,r)=>t?.[e]?.[r],receiveAttack:(e,r)=>{t[e][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:n,placeShip:a,randomlyPlaceShips:()=>{if(!n())return[];let e=0;const t=[];for(;e<5;){const{randomColumn:o,randomRow:n,randomDirection:i}=l();a(o,n,i,r[e])&&(t.push({randomColumn:o,randomRow:n,randomDirection:i}),e+=1)}return t},makeRandomCoordinates:l}}},61:e=>{e.exports=(e="player")=>({getName:()=>e,attack:(e,t,{getLocation:r,receiveAttack:o})=>{const n=r(e,t);return!1===n.hasBeenHit||n.isShip&&n.getStatus().includes("unhit")?(o(e,t),"It's a hit!"):"You have already hit this spot!"}})},585:e=>{e.exports=(e,t="ship")=>{const r=Array(e).fill("unhit");return{name:t,getLength:()=>r.length,isSunk:()=>r.every((e=>"hit"===e)),hit:t=>{t<e&&(r[t]="hit")},getStatus:()=>r,hasBeenHit:!1,isShip:!0}}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=(e,t,r)=>{const o=document.querySelector(`.${e}-board > .cell[column='${t}'][row='${r}']`);o.classList.contains("ship")?o.classList.add("hit"):o.classList.add("miss")},t=(e,t,r,o)=>o.attack(e,t,r);var o=r(653),n=r.n(o),i=r(585),a=r.n(i),l=r(61),c=r.n(l);const s=n()(),h=n()(),u=c()(),p=c()();s.placeShip(0,0,"horizontal",a()(5)),s.placeShip(3,4,"horizontal",a()(3)),s.placeShip(6,7,"horizontal",a()(2)),s.placeShip(9,1,"vertical",a()(3)),s.placeShip(5,9,"horizontal",a()(4)),h.placeShip(0,0,"horizontal",a()(5)),h.placeShip(3,4,"horizontal",a()(3)),h.placeShip(6,7,"horizontal",a()(2)),h.placeShip(9,1,"vertical",a()(3)),h.placeShip(5,9,"horizontal",a()(4));const f=(()=>{const e={};return{publish:function(t,r){Array.isArray(e[t])&&e[t].forEach((e=>{e(r)}))},subscribe:function t(r,o){Array.isArray(t[r])||(e[r]=[]),e[r].push(o);const n=e[r].length-1;return{unsubscribe(){e[r].splice(n,1)}}}}})();((e,t,r,o,n)=>{const i=document.querySelector("div.enemy-board");for(let a=0;a<10;a+=1)for(let l=0;l<10;l+=1){const c=i.querySelector(`.cell:nth-child(${10*l+a+1})`);c.setAttribute("column",a),c.setAttribute("row",l),c.addEventListener("click",(()=>{n.publish("click",{cell:c,column:a,row:l,playerBoard:e,enemyBoard:t,player:r,enemy:o})}),{once:!0})}})(s,h,u,p,f),f.subscribe("click",(({cell:r,column:o,row:n,playerBoard:i,enemyBoard:a,player:l,enemy:c})=>{((r,o,n,i)=>{t(r,o,n,i),e("enemy",r,o)})(o,n,a,l),((r,o)=>{const{randomColumn:n,randomRow:i}=r.makeRandomCoordinates();t(n,n,r,o),e("player",n,i)})(i,c)})),(({getLocation:e})=>{const t=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const n=t.querySelector(`.cell:nth-child(${10*o+r+1})`);n.setAttribute("column",r),n.setAttribute("row",o),e(o,r).isShip&&n.classList.add("ship")}})(s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxHQUFVLEVBQ3hDLElBQUssSUFBSUMsRUFBTSxFQUFHQSxFQUFNLEdBQUlBLEdBQU8sRUFBRyxDQUNsQyxNQUFNTCxFQUFPa0csRUFBZ0I3QixjQUN6QixtQkFBeUIsR0FBTmhFLEVBQVdELEVBQVMsTUFFM0NKLEVBQUs0RixhQUFhLFNBQVV4RixHQUM1QkosRUFBSzRGLGFBQWEsTUFBT3ZGLEdBQ3JCeUIsRUFBWXpCLEVBQUtELEdBQVFmLFFBQ3pCVyxFQUFLc0UsVUFBVUUsSUFBSSxVQ3BDbkMyQixDQUFrQnhCLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL3BsYXllci9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvc2hpcC9zaGlwLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL2RvbS5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbmNvbnN0IGNyZWF0ZVNoaXAgPSByZXF1aXJlKCcuLi9zaGlwL3NoaXAnKVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuY29uc3QgY3JlYXRlR2FtZUJvYXJkID0gKCkgPT4ge1xuICAgIGNvbnN0IGVtcHR5Q2VsbCA9IHsgaGFzQmVlbkhpdDogZmFsc2UsIGlzU2hpcDogZmFsc2UsIG9mZkxpbWl0czogZmFsc2UgfVxuICAgIGNvbnN0IGdhbWVCb2FyZCA9IEFycmF5KDEwKVxuICAgICAgICAuZmlsbChzdHJ1Y3R1cmVkQ2xvbmUoZW1wdHlDZWxsKSlcbiAgICAgICAgLm1hcCgoKSA9PiBBcnJheSgxMCkuZmlsbChzdHJ1Y3R1cmVkQ2xvbmUoZW1wdHlDZWxsKSkpXG5cbiAgICBjb25zdCBzaGlwcyA9IFtcbiAgICAgICAgY3JlYXRlU2hpcCg1LCAnQ2FycmllcicpLFxuICAgICAgICBjcmVhdGVTaGlwKDQsICdCYXR0bGVzaGlwJyksXG4gICAgICAgIGNyZWF0ZVNoaXAoMywgJ0Rlc3Ryb3llcicpLFxuICAgICAgICBjcmVhdGVTaGlwKDMsICdTdWJtYXJpbmUnKSxcbiAgICAgICAgY3JlYXRlU2hpcCgyLCAnUGF0cm9sIEJvYXQnKSxcbiAgICBdXG5cbiAgICBjb25zdCBjaGVja0lmQWxsU2hpcHNIYXZlU3VuayA9ICgpID0+XG4gICAgICAgIGdhbWVCb2FyZC5mbGF0KCkuZXZlcnkoXG4gICAgICAgICAgICAoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjZWxsLmlzU2hpcCA9PT0gZmFsc2UpIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuaXNTaGlwID09PSB0cnVlICYmIGNlbGwuaGFzQmVlbkhpdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2VsbC5nZXRTdGF0dXMoKS5ldmVyeSgodW5pdCkgPT4gdW5pdCA9PT0gJ2hpdCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAocG9zaXRpb24uaXNTaGlwID09PSBmYWxzZSkgfHxcbiAgICAgICAgICAgIC8vIChwb3NpdGlvbi5pc1NoaXAgPT09IHRydWUgJiYgcG9zaXRpb24uaGFzQmVlbkhpdCA9PT0gdHJ1ZSlcbiAgICAgICAgKVxuXG4gICAgY29uc3QgY3JlYXRlT2ZmTGltaXRMb2NhdGlvbiA9ICgpID0+XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZW1wdHlDZWxsLCB7IG9mZkxpbWl0czogdHJ1ZSB9KVxuXG4gICAgY29uc3QgZ2V0TG9jYXRpb24gPSAoY29sdW1uLCByb3cpID0+IGdhbWVCb2FyZD8uW2NvbHVtbl0/Lltyb3ddXG5cbiAgICBjb25zdCBzZXRMb2NhdGlvbiA9IChjb2x1bW4sIHJvdywgc2hpcCA9IGNyZWF0ZU9mZkxpbWl0TG9jYXRpb24oKSkgPT4ge1xuICAgICAgICBpZiAoZ2FtZUJvYXJkPy5bY29sdW1uXT8uW3Jvd10gPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWVcbiAgICAgICAgZ2FtZUJvYXJkW2NvbHVtbl1bcm93XSA9IHNoaXBcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBhZGRPZmZMaW1pdEFyZWFGb3JTaGlwcyA9IChjb2x1bW4sIHJvdykgPT4ge1xuICAgICAgICAvLyB0b3AtbGVmdFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gLSAxLCByb3cgLSAxKVxuICAgICAgICAvLyB0b3BcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uLCByb3cgLSAxKVxuICAgIH1cblxuICAgIGNvbnN0IGFkZE9mZkxpbWl0QXJlYUZvckhvcml6b250YWxseVBvc2l0aW9uZWRTaGlwID0gKFxuICAgICAgICBjb2x1bW4sXG4gICAgICAgIHJvdyxcbiAgICAgICAgc2hpcExlbmd0aFxuICAgICkgPT4ge1xuICAgICAgICAvLyBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHNoaXAgaXRzZWxmKGllLiBhIGhvcml6b250YWwgc2hpcCdzIGJvdHRvbSBpcyB0byB0aGUgcmlnaHQpXG5cbiAgICAgICAgYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMoY29sdW1uLCByb3cpXG4gICAgICAgIC8vIGJvdHRvbVxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBzaGlwTGVuZ3RoLCByb3cpXG4gICAgICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdyArIDEpXG4gICAgICAgIC8vIGJvdHRvbS1yaWdodFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBzaGlwTGVuZ3RoLCByb3cgKyAxKVxuICAgICAgICAvLyB0b3AtcmlnaHRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgc2hpcExlbmd0aCwgcm93IC0gMSlcbiAgICB9XG5cbiAgICBjb25zdCBhZGRPZmZMaW1pdEFyZWFGb3JWZXJ0aWNhbGx5UG9zaXRpb25lZFNoaXAgPSAoXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgcm93LFxuICAgICAgICBzaGlwTGVuZ3RoXG4gICAgKSA9PiB7XG4gICAgICAgIC8vIHBvc2l0aW9ucyByZWxhdGl2ZSB0byBob3cgdGhlIHVzZXIgc2VlcyBpdChpZS4gYSB2ZXJ0aWNhbCBzaGlwJ3MgYm90dG9tIGlzIHRvIHRoZSBib3R0b20pXG5cbiAgICAgICAgYWRkT2ZmTGltaXRBcmVhRm9yU2hpcHMoY29sdW1uLCByb3cpXG4gICAgICAgIC8vIGJvdHRvbVxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4sIHJvdyArIHNoaXBMZW5ndGgpXG4gICAgICAgIC8vIGJvdHRvbS1yaWdodFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyAxLCByb3cgKyBzaGlwTGVuZ3RoKVxuICAgICAgICAvLyBib3R0b20tbGVmdFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gLSAxLCByb3cgKyBzaGlwTGVuZ3RoKVxuICAgICAgICAvLyB0b3AtcmlnaHRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgMSwgcm93IC0gMSlcbiAgICB9XG5cbiAgICBjb25zdCBjaGVja0lmQ29sdW1uQ29vcmRpbmF0ZUlzVmFsaWQgPSAoY29sdW1uLCBzaGlwTGVuZ3RoKSA9PlxuICAgICAgICBjb2x1bW4gPj0gMCAmJiBjb2x1bW4gKyBzaGlwTGVuZ3RoIC0gMSA8IGdhbWVCb2FyZC5sZW5ndGhcblxuICAgIGNvbnN0IGNoZWNrSWZSb3dDb29yZGluYXRlSXNWYWxpZCA9IChyb3csIHNoaXBMZW5ndGgpID0+XG4gICAgICAgIHJvdyA+PSAwICYmIHJvdyArIHNoaXBMZW5ndGggLSAxIDwgZ2FtZUJvYXJkLmxlbmd0aFxuXG4gICAgY29uc3QgY2hlY2tJZkxvY2F0aW9uSXNBU2hpcE9yT2ZmTGltaXRzID0gKGxvY2F0aW9uKSA9PiB7XG4gICAgICAgIGlmIChsb2NhdGlvbi5pc1NoaXAgPT09IHRydWUgfHwgbG9jYXRpb24ub2ZmTGltaXRzID09PSB0cnVlKSByZXR1cm4gdHJ1ZVxuXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGlzUGxhY2VtZW50UG9zc2libGUgPSAoc2hpcCwgcm93LCBjb2x1bW4sIGRpcmVjdGlvbikgPT4ge1xuICAgICAgICBpZihyb3cgPCAwIHx8IHJvdyA+IDEwIC0gMSB8fCBjb2x1bW4gPCAwIHx8IGNvbHVtbiA+IDEwIC0gMSkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IHNoaXAuZ2V0TGVuZ3RoKDApXG4gICAgICAgIGlmKGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyl7XG4gICAgICAgICAgICBpZihyb3cgKyBzaGlwTGVuZ3RoID4gMTApIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZWx5LWlmXG4gICAgICAgICAgICBpZihjb2x1bW4gKyBzaGlwTGVuZ3RoID4gMTApIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoZGlyZWN0aW9uID09PSAndmVydGljYWwnKXtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBpZihnYW1lQm9hcmRbcm93ICsgaV1bY29sdW1uXSkgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgaWYoZ2FtZUJvYXJkW3Jvd11bY29sdW1uICsgaV0pIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoZGlyZWN0aW9uID09PSAndmVydGljYWwnKXtcbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICBmb3IobGV0IHggPSAtMTsgeCA8PSAxOyB4Kyspe1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHkgPSAtMTsgeSA8PSAxOyB5Kyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYocm93ICsgeCArIGkgPCAwIHx8IHJvdyArIHggKyBpID49IDEwIHx8IGNvbHVtbiArIHkgPCAwIHx8IGNvbHVtbiArIHkgPj0gMTApIGNvbnRpbnVlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGdhbWVCb2FyZFtyb3cgKyB4ICsgaV1bY29sdW1uICsgeV0pIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgZm9yKGxldCB4ID0gLTE7IHggPD0gMTsgeCsrKXtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGxldCB5ID0gLTE7IHkgPD0gMTsgeSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJvdyArIHggPCAwIHx8IHJvdyArIHggPj0gMTAgfHwgY29sdW1uICsgeSArIGkgPCAwIHx8IGNvbHVtbiArIHkgKyBpID49IDEwKSBjb250aW51ZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihnYW1lQm9hcmRbcm93ICsgeF1bY29sdW1uICsgeSArIGldKSByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlXG5cbiAgICB9XG5cbiAgICBjb25zdCBwbGFjZVNoaXAgPSAoY29sdW1uLCByb3csIGRpcmVjdGlvbiwgc2hpcCkgPT4ge1xuXG4gICAgICAgIGlmKGlzUGxhY2VtZW50UG9zc2libGUoc2hpcCwgcm93LCBjb2x1bW4sIGRpcmVjdGlvbikpIHJldHVybiBmYWxzZVxuXG4gICAgICAgIGNvbnN0IHNoaXBMZW5ndGggPSBzaGlwLmdldExlbmd0aCgpXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uLCByb3cgKyBpLCBzaGlwKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uICsgaSwgcm93LCBzaGlwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuXG4gICAgY29uc3QgbWFrZVJhbmRvbUNvb3JkaW5hdGVzID0gKHNoaXBMZW5ndGgpID0+IHtcbiAgICAgICAgY29uc3QgcmFuZG9tRGlyZWN0aW9uID1cbiAgICAgICAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpID09PSAwID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJ1xuICAgICAgICBjb25zdCByYW5kb21Db2x1bW4gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgICAgY29uc3QgcmFuZG9tUm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApXG4gICAgICAgIHJldHVybiB7IHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93LCByYW5kb21EaXJlY3Rpb24gfVxuICAgIH1cblxuICAgIGNvbnN0IHJhbmRvbWx5UGxhY2VTaGlwcyA9ICgpID0+IHtcbiAgICAgICAgaWYoIWNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rKCkpIHJldHVybiBbXVxuXG4gICAgICAgIGxldCBzdWNjZXNzZnVsUGxhY2VtZW50cyA9IDBcblxuICAgICAgICBjb25zdCBhcnJheU9mQ29vcmRpbmF0ZXMgPSBbXVxuXG4gICAgICAgIHdoaWxlKHN1Y2Nlc3NmdWxQbGFjZW1lbnRzIDwgNSl7XG4gICAgICAgICAgICBjb25zdCB7cmFuZG9tQ29sdW1uLCByYW5kb21Sb3csIHJhbmRvbURpcmVjdGlvbiB9ID0gbWFrZVJhbmRvbUNvb3JkaW5hdGVzKClcblxuICAgICAgICAgICAgaWYocGxhY2VTaGlwKHJhbmRvbUNvbHVtbiwgIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uLCBzaGlwc1tzdWNjZXNzZnVsUGxhY2VtZW50c10pKXtcbiAgICAgICAgICAgICAgICBhcnJheU9mQ29vcmRpbmF0ZXMucHVzaCh7cmFuZG9tQ29sdW1uLCByYW5kb21Sb3csIHJhbmRvbURpcmVjdGlvbn0pXG4gICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bFBsYWNlbWVudHMgKz0gMVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5T2ZDb29yZGluYXRlc1xuICAgIH1cblxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29sdW1uLCByb3cpID0+IHtcbiAgICAgICAgZ2FtZUJvYXJkW2NvbHVtbl1bcm93XS5oYXNCZWVuSGl0ID0gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCA9IChzaGlwTGVuZ3RoKSA9PlxuICAgICAgICBnYW1lQm9hcmQuZmxhdCgpLmZpbHRlcigoZWxlbWVudCkgPT4gZWxlbWVudC5vZmZMaW1pdHMgPT09IHRydWUpXG4gICAgICAgICAgICAubGVuZ3RoID09PVxuICAgICAgICBzaGlwTGVuZ3RoICsgMlxuICAgIC8vIGFkZGluZyBzaGlwTGVuZ3RoIHBsdXMgdHdvIGJlY2F1c2UgZm9yIGV2ZXJ5IGluY3JlYXNlIGluIHRoZSBzaXplIG9mIHNoaXAsIHRoZSB6b25lcyBjb3ZlcmVkIGluY3JlYXNlIGJ5IDIgdW5pdHNcblxuICAgIHJldHVybiB7XG4gICAgICAgIGNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCxcbiAgICAgICAgZ2V0TG9jYXRpb24sXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIGNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rLFxuICAgICAgICBwbGFjZVNoaXAsXG4gICAgICAgIHJhbmRvbWx5UGxhY2VTaGlwcyxcbiAgICAgICAgbWFrZVJhbmRvbUNvb3JkaW5hdGVzLFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVHYW1lQm9hcmRcbiIsImNvbnN0IGNyZWF0ZVBsYXllciA9IChuYW1lID0gJ3BsYXllcicpID0+IHtcbiAgICBjb25zdCBnZXROYW1lID0gKCkgPT4gbmFtZVxuXG4gICAgY29uc3QgYXR0YWNrID0gKGNvbHVtbiwgcm93LCB7IGdldExvY2F0aW9uLCByZWNlaXZlQXR0YWNrIH0pID0+IHtcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBnZXRMb2NhdGlvbihjb2x1bW4sIHJvdylcbiAgICAgICAgaWYgKGxvY2F0aW9uLmhhc0JlZW5IaXQgPT09IGZhbHNlIHx8IChsb2NhdGlvbi5pc1NoaXAgJiYgbG9jYXRpb24uZ2V0U3RhdHVzKCkuaW5jbHVkZXMoJ3VuaGl0JykpKSB7XG4gICAgICAgICAgICByZWNlaXZlQXR0YWNrKGNvbHVtbiwgcm93KVxuICAgICAgICAgICAgcmV0dXJuIFwiSXQncyBhIGhpdCFcIlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICdZb3UgaGF2ZSBhbHJlYWR5IGhpdCB0aGlzIHNwb3QhJ1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldE5hbWUsXG4gICAgICAgIGF0dGFjayxcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUGxheWVyXG4iLCJjb25zdCBjcmVhdGVTaGlwID0gKGxlbmd0aCwgbmFtZSA9ICdzaGlwJykgPT4ge1xuXG4gICAgY29uc3Qgc3RhdHVzID0gQXJyYXkobGVuZ3RoKS5maWxsKCd1bmhpdCcpXG5cbiAgICBjb25zdCBnZXRMZW5ndGggPSAoKSA9PiBzdGF0dXMubGVuZ3RoXG5cbiAgICBjb25zdCBnZXRTdGF0dXMgPSAoKSA9PiBzdGF0dXNcblxuICAgIGNvbnN0IGhpdCA9IChwb3NpdGlvbikgPT4ge1xuICAgICAgICBpZiAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHN0YXR1c1twb3NpdGlvbl0gPSAnaGl0J1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaXNTdW5rID0gKCkgPT4gc3RhdHVzLmV2ZXJ5KChwb3NpdGlvbikgPT4gcG9zaXRpb24gPT09ICdoaXQnKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZ2V0TGVuZ3RoLFxuICAgICAgICBpc1N1bmssXG4gICAgICAgIGhpdCxcbiAgICAgICAgZ2V0U3RhdHVzLFxuICAgICAgICBoYXNCZWVuSGl0OiBmYWxzZSxcbiAgICAgICAgaXNTaGlwOiB0cnVlLFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTaGlwXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiY29uc3QgcmVuZGVyQXR0YWNrcyA9IChwbGF5ZXIsIGNvbHVtbiwgcm93KSA9PiB7XG4gICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIGAuJHtwbGF5ZXJ9LWJvYXJkID4gLmNlbGxbY29sdW1uPScke2NvbHVtbn0nXVtyb3c9JyR7cm93fSddYFxuICAgIClcbiAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ3NoaXAnKSkge1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2hpdCcpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdtaXNzJylcbiAgICB9XG59XG5cbmNvbnN0IGhhbmRsZUF0dGFjayA9IChjb2x1bW4sIHJvdywgZW5lbXlCb2FyZCwgcGxheWVyKSA9PlxuICAgIHBsYXllci5hdHRhY2soY29sdW1uLCByb3csIGVuZW15Qm9hcmQpXG5cbmNvbnN0IGF0dGFja0VuZW15Q2VsbCA9IChjb2x1bW4sIHJvdywgZW5lbXlCb2FyZCwgcGxheWVyKSA9PiB7XG4gICAgaGFuZGxlQXR0YWNrKGNvbHVtbiwgcm93LCBlbmVteUJvYXJkLCBwbGF5ZXIpXG4gICAgcmVuZGVyQXR0YWNrcygnZW5lbXknLCBjb2x1bW4sIHJvdylcbn1cblxuY29uc3QgYXR0YWNrUGxheWVyQ2VsbCA9IChwbGF5ZXJCb2FyZCwgZW5lbXkpID0+IHtcbiAgICBjb25zdCB7IHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93IH0gPSBwbGF5ZXJCb2FyZC5tYWtlUmFuZG9tQ29vcmRpbmF0ZXMoKVxuICAgIGhhbmRsZUF0dGFjayhyYW5kb21Db2x1bW4sIHJhbmRvbUNvbHVtbiwgcGxheWVyQm9hcmQsIGVuZW15KVxuICAgIHJlbmRlckF0dGFja3MoJ3BsYXllcicsIHJhbmRvbUNvbHVtbiwgcmFuZG9tUm93KVxufVxuLy8gaHR0cHM6Ly9qc21hbmlmZXN0LmNvbS90aGUtcHVibGlzaC1zdWJzY3JpYmUtcGF0dGVybi1pbi1qYXZhc2NyaXB0L1xuXG5leHBvcnQgY29uc3QgcHViU3ViID0gKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmliZXJzID0ge31cblxuICAgIGZ1bmN0aW9uIHB1Ymxpc2goZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzdWJzY3JpYmVyc1tldmVudE5hbWVdKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2soZGF0YSlcbiAgICAgICAgfSlcbiAgICB9XG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHN1YnNjcmliZVtldmVudE5hbWVdKSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnNbZXZlbnROYW1lXSA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgICBjb25zdCBpbmRleCA9IHN1YnNjcmliZXJzW2V2ZW50TmFtZV0ubGVuZ3RoIC0gMVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyc1tldmVudE5hbWVdLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwdWJsaXNoLFxuICAgICAgICBzdWJzY3JpYmUsXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyUGxheWVyU2hpcHMgPSAoeyBnZXRMb2NhdGlvbiB9KSA9PiB7XG4gICAgY29uc3QgcGxheWVyQm9hcmRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LnBsYXllci1ib2FyZCcpXG5cbiAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCAxMDsgY29sdW1uICs9IDEpIHtcbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjZWxsID0gcGxheWVyQm9hcmRBcmVhLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgYC5jZWxsOm50aC1jaGlsZCgke3JvdyAqIDEwICsgY29sdW1uICsgMX0pYFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHVtbicsIGNvbHVtbilcbiAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdyb3cnLCByb3cpXG4gICAgICAgICAgICBpZiAoZ2V0TG9jYXRpb24ocm93LCBjb2x1bW4pLmlzU2hpcCkge1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnc2hpcCcpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBhZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQgPSAoXG4gICAgcGxheWVyQm9hcmQsXG4gICAgZW5lbXlCb2FyZCxcbiAgICBwbGF5ZXIsXG4gICAgZW5lbXksXG4gICAgcHNcbikgPT4ge1xuICAgIGNvbnN0IGVuZW15Qm9hcmRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LmVuZW15LWJvYXJkJylcblxuICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IDEwOyBjb2x1bW4gKz0gMSkge1xuICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgIC8vIENyZWRpdGluZyBmb3JtdWxhIHRvIGNhbGN1bGF0ZSBudGgtY2hpbGQgdXNpbmcgbmVzdGVkIGxvb3A6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg4NzI2NjIvbWF0aC10by1kZXRlcm1pbmUtaXRlbS1pbmRleC1iYXNlZC1vbi1jb2wtcm93LXNlbGVjdGlvbi1pbi1ncmlkXG4gICAgICAgICAgICBjb25zdCBjZWxsID0gZW5lbXlCb2FyZEFyZWEucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICBgLmNlbGw6bnRoLWNoaWxkKCR7cm93ICogMTAgKyBjb2x1bW4gKyAxfSlgXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnY29sdW1uJywgY29sdW1uKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3JvdycsIHJvdylcblxuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICdjbGljaycsXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcy5wdWJsaXNoKCdjbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJCb2FyZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15Qm9hcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBhdHRhY2sgPSAoe1xuICAgIGNlbGwsXG4gICAgY29sdW1uLFxuICAgIHJvdyxcbiAgICBwbGF5ZXJCb2FyZCxcbiAgICBlbmVteUJvYXJkLFxuICAgIHBsYXllcixcbiAgICBlbmVteSxcbn0pID0+IHtcbiAgICAvLyBodW1hbiBwbGF5ZXIgYXR0YWNraW5nIGNvbXB1dGVyXG4gICAgYXR0YWNrRW5lbXlDZWxsKGNvbHVtbiwgcm93LCBlbmVteUJvYXJkLCBwbGF5ZXIpXG4gICAgLy8gY29tcHV0ZXIgYXR0YWNraW5nIGh1bWFuXG4gICAgYXR0YWNrUGxheWVyQ2VsbChwbGF5ZXJCb2FyZCwgZW5lbXkpXG59XG4iLCJpbXBvcnQgeyBhZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQsIHJlbmRlclBsYXllclNoaXBzLHB1YlN1YiwgYXR0YWNrfSBmcm9tICcuL2RvbSdcblxuaW1wb3J0IGNyZWF0ZUdhbWVCb2FyZCBmcm9tICcuL2dhbWVib2FyZC9nYW1lYm9hcmQnXG5pbXBvcnQgY3JlYXRlU2hpcCBmcm9tICcuL3NoaXAvc2hpcCdcbmltcG9ydCBjcmVhdGVQbGF5ZXIgZnJvbSAnLi9wbGF5ZXIvcGxheWVyJ1xuXG5jb25zdCBwbGF5ZXJCb2FyZCA9IGNyZWF0ZUdhbWVCb2FyZCgpXG5jb25zdCBlbmVteUJvYXJkID0gY3JlYXRlR2FtZUJvYXJkKClcblxuY29uc3QgcGxheWVyID0gY3JlYXRlUGxheWVyKClcblxuY29uc3QgY29tcHV0ZXIgPSBjcmVhdGVQbGF5ZXIoKVxuXG5wbGF5ZXJCb2FyZC5wbGFjZVNoaXAoMCwgMCwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDUpKVxucGxheWVyQm9hcmQucGxhY2VTaGlwKDMsIDQsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgzKSlcbnBsYXllckJvYXJkLnBsYWNlU2hpcCg2LCA3LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoMikpXG5wbGF5ZXJCb2FyZC5wbGFjZVNoaXAoOSwgMSwgJ3ZlcnRpY2FsJywgY3JlYXRlU2hpcCgzKSlcbnBsYXllckJvYXJkLnBsYWNlU2hpcCg1LCA5LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNCkpXG5cbmVuZW15Qm9hcmQucGxhY2VTaGlwKDAsIDAsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCg1KSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDMsIDQsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgzKSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDYsIDcsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgyKSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDksIDEsICd2ZXJ0aWNhbCcsIGNyZWF0ZVNoaXAoMykpXG5lbmVteUJvYXJkLnBsYWNlU2hpcCg1LCA5LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNCkpXG5cbmNvbnN0IHBzID0gcHViU3ViKClcblxuYWRkTGlzdGVuZXJzVG9FbmVteUJvYXJkKHBsYXllckJvYXJkLCBlbmVteUJvYXJkLCBwbGF5ZXIsIGNvbXB1dGVyLCBwcylcblxucHMuc3Vic2NyaWJlKCdjbGljaycsIGF0dGFjaylcblxuXG5yZW5kZXJQbGF5ZXJTaGlwcyhwbGF5ZXJCb2FyZCkiXSwibmFtZXMiOlsiY3JlYXRlU2hpcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJlbXB0eUNlbGwiLCJoYXNCZWVuSGl0IiwiaXNTaGlwIiwib2ZmTGltaXRzIiwiZ2FtZUJvYXJkIiwiQXJyYXkiLCJmaWxsIiwic3RydWN0dXJlZENsb25lIiwibWFwIiwic2hpcHMiLCJjaGVja0lmQWxsU2hpcHNIYXZlU3VuayIsImZsYXQiLCJldmVyeSIsImNlbGwiLCJnZXRTdGF0dXMiLCJ1bml0Iiwic2V0TG9jYXRpb24iLCJjb2x1bW4iLCJyb3ciLCJzaGlwIiwiT2JqZWN0IiwiYXNzaWduIiwiY3JlYXRlT2ZmTGltaXRMb2NhdGlvbiIsInVuZGVmaW5lZCIsInBsYWNlU2hpcCIsImRpcmVjdGlvbiIsInNoaXBMZW5ndGgiLCJnZXRMZW5ndGgiLCJpIiwibGVuZ3RoIiwieCIsInkiLCJpc1BsYWNlbWVudFBvc3NpYmxlIiwibWFrZVJhbmRvbUNvb3JkaW5hdGVzIiwicmFuZG9tRGlyZWN0aW9uIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZG9tQ29sdW1uIiwicmFuZG9tUm93IiwiY2hlY2tJZk9mZkxpbWl0Wm9uZVdhc0NvcnJlY3RseUltcGxlbWVudGVkIiwiZmlsdGVyIiwiZWxlbWVudCIsImdldExvY2F0aW9uIiwicmVjZWl2ZUF0dGFjayIsInJhbmRvbWx5UGxhY2VTaGlwcyIsInN1Y2Nlc3NmdWxQbGFjZW1lbnRzIiwiYXJyYXlPZkNvb3JkaW5hdGVzIiwicHVzaCIsIm5hbWUiLCJnZXROYW1lIiwiYXR0YWNrIiwibG9jYXRpb24iLCJpbmNsdWRlcyIsInN0YXR1cyIsImlzU3VuayIsInBvc2l0aW9uIiwiaGl0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyZW5kZXJBdHRhY2tzIiwicGxheWVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhZGQiLCJoYW5kbGVBdHRhY2siLCJlbmVteUJvYXJkIiwicGxheWVyQm9hcmQiLCJjb21wdXRlciIsInBzIiwic3Vic2NyaWJlcnMiLCJwdWJsaXNoIiwiZXZlbnROYW1lIiwiZGF0YSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiY2FsbGJhY2siLCJzdWJzY3JpYmUiLCJpbmRleCIsInVuc3Vic2NyaWJlIiwic3BsaWNlIiwicHViU3ViIiwiZW5lbXkiLCJlbmVteUJvYXJkQXJlYSIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwiYWRkTGlzdGVuZXJzVG9FbmVteUJvYXJkIiwiYXR0YWNrRW5lbXlDZWxsIiwiYXR0YWNrUGxheWVyQ2VsbCIsInBsYXllckJvYXJkQXJlYSIsInJlbmRlclBsYXllclNoaXBzIl0sInNvdXJjZVJvb3QiOiIifQ==