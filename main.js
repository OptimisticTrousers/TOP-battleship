(()=>{var t={653:(t,e,r)=>{const o=r(585),i=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(JSON.parse(JSON.stringify(t))).map((()=>Array(10).fill(JSON.parse(JSON.stringify(t))))),r=[o(5,"Carrier"),o(4,"Battleship"),o(3,"Destroyer"),o(3,"Submarine"),o(2,"Patrol Boat")],i=(t,r)=>e?.[t]?.[r],n=(t,r,o)=>{e[t][r]=o},a=(t,r,o,a)=>{const s=a.getLength();if("vertical"===o){if(r+s<=10){for(let e=0;e<s;e+=1)n(t,r+e,a);return((t,e,r)=>{i(t,e+r)})(t,r,s),console.log(e),!0}}else if("horizontal"===o&&t+s<=10){for(let e=0;e<s;e+=1)n(t+e,r,a);return!0}return!1},s=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{getLocation:i,receiveAttack:(t,r)=>{e[t][r].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>e.flat().every((t=>!1===t.isShip||!0===t.isShip&&!0===t.hasBeenHit&&t.getStatus().every((t=>"hit"===t)))),placeShip:a,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<r.length;e+=1){const{randomColumn:o,randomRow:n,randomDirection:l}=s(),c=r[e],h=i(o,n);!0===h.isShip||!0===h.offLimits||!1===a(o,n,l,c)?e-=1:t.push({randomColumn:o,randomRow:n,randomDirection:l})}return t}}};i().placeShip(0,1,"vertical",o(3,"bobs ship")),t.exports=i},585:t=>{t.exports=(t,e="ship")=>{const r=Array(t).fill("unhit");return{name:e,getLength:()=>r.length,isSunk:()=>r.every((t=>"hit"===t)),hit:e=>{e<t&&(r[e]="hit")},getStatus:()=>r,isShip:!0}}}},e={};function r(o){var i=e[o];if(void 0!==i)return i.exports;var n=e[o]={exports:{}};return t[o](n,n.exports,r),n.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(653);const e=r.n(t)()();e.randomlyPlaceShips(),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let r=0;r<10;r+=1)for(let o=0;o<10;o+=1){const i=document.createElement("div");i.classList.add("cell"),t(o,r).isShip&&i.classList.add("ship"),e.appendChild(i)}})(e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,