(()=>{var t={653:(t,e,o)=>{const r=o(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=Array(10).fill(structuredClone(t)).map((()=>Array(10).fill(structuredClone(t)))),o=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],n=(t,o)=>e?.[t]?.[o],i=(o,r,n=(()=>Object.assign(t,{offLimits:!0}))())=>{void 0!==e?.[o]?.[r]&&(e[o][r]=n)},l=(t,e)=>{i(t-1,e-1),i(t,e-1)},a=(t,o,r,a)=>{const c=a.getLength();if(((t,e,o,r)=>{const i=r.getLength();if("vertical"===o)for(let o=0;o<i;o++){const r=n(t,e+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}else if("horizontal"===o)for(let o=0;o<i;o++){const r=n(t+o,e);if(r&&!0===r.isShip&&!0===r.offLimits)return!0}return!1})(t,o,r,a))return!1;if("vertical"===r){if(((t,o)=>t>=0&&t+o-1<e.length)(o,c)){for(let e=0;e<c;e+=1)i(t,o+e,{...a,position:e}),i(t+1,o+e),i(t-1,o+e);return((t,e,o)=>{l(t,e),i(t,e+o),i(t+1,e+o),i(t-1,e+o),i(t+1,e-1)})(t,o,c),!0}}else if("horizontal"===r&&((t,o)=>t>=0&&t+o-1<e.length)(t,c)){for(let e=0;e<c;e+=1)i(t+e,o,{...a,position:e}),i(t+e,o+1),i(t+e,o-1);return((t,e,o)=>{l(t,e),i(t+o,e),i(t-1,e+1),i(t+o,e+1),i(t+o,e-1)})(t,o,c),!0}return!1},c=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal";return{randomColumn:Math.floor(10*Math.random()),randomRow:Math.floor(10*Math.random()),randomDirection:t}};return{checkIfOffLimitZoneWasCorrectlyImplemented:t=>e.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,o)=>{e[t][o].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let t=!0;for(let e=0;e<10;e++)for(let o=0;o<10;o++){const r=n(e,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){t=!1;break}}return t},placeShip:a,randomlyPlaceShips:()=>{for(let t=0;t<o.length;t+=1){const e=o[t],{randomColumn:r,randomRow:n,randomDirection:i}=c();a(r,n,i,e)}return[]},makeRandomCoordinates:c}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:o,receiveAttack:r})=>{const n=o(t,e);return!1===n.hasBeenHit||n.isShip&&!1===n.getStatus().includes("unhit")?(r(t,e),n.hit&&n.hit(n.position),"It's a hit!"):"You have already hit this spot!"}})},585:t=>{t.exports=(t,e="ship")=>{const o=Array(t).fill("unhit");return{name:e,getLength:()=>o.length,isSunk:()=>o.every((t=>"hit"===t)),hit:e=>{e<t&&(o[e]="hit")},getStatus:()=>o,hasBeenHit:!1,isShip:!0}}}},e={};function o(r){var n=e[r];if(void 0!==n)return n.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,o),i.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";const t=(t,e,o,r)=>{const n=document.querySelector(`.${t}-board > .cell[column='${e}'][row='${o}']`);r.getLocation(e,o).isShip?n.classList.add("hit"):n.classList.add("miss")},e=(t,e,o,r)=>r.attack(t,e,o);var r=o(653),n=o.n(r),i=o(585),l=o.n(i),a=o(61),c=o.n(a);const s=n()(),u=n()(),h=c()(),d=c()();s.randomlyPlaceShips(),u.placeShip(0,0,"horizontal",l()(5)),u.placeShip(3,4,"horizontal",l()(3)),u.placeShip(6,7,"horizontal",l()(2)),u.placeShip(9,1,"vertical",l()(3)),u.placeShip(5,9,"horizontal",l()(4));const p=(()=>{const t={};return{publish:function(e,o){Array.isArray(t[e])&&t[e].forEach((t=>{t(o)}))},subscribe:function e(o,r){Array.isArray(e[o])||(t[o]=[]),t[o].push(r);const n=t[o].length-1;return{unsubscribe(){t[o].splice(n,1)}}}}})();((t,e,o,r,n)=>{const i=document.querySelector("div.enemy-board");for(let l=0;l<10;l+=1)for(let a=0;a<10;a+=1){const c=i.querySelector(`.cell:nth-child(${10*a+l+1})`);c.setAttribute("column",l),c.setAttribute("row",a),c.addEventListener("click",(()=>{n.publish("click",{cell:c,column:l,row:a,playerBoard:t,enemyBoard:e,player:o,enemy:r})}),{once:!0})}})(s,u,h,d,p),p.subscribe("click",(({cell:o,column:r,row:n,playerBoard:i,enemyBoard:l,player:a,enemy:c})=>{((o,r,n,i)=>{e(o,r,n,i),t("enemy",o,r,n)})(r,n,l,a),((o,r)=>{const{randomColumn:n,randomRow:i}=o.makeRandomCoordinates();e(n,n,o,r),t("player",n,i,o)})(i,c),((t,e)=>{if(t.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",o.addEventListener("click",(()=>{location.reload()})),e.textContent="You win!"}if(e.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",e.textContent="You lose!",o.addEventListener("click",(()=>{location.reload()}))}})(i,l)})),(({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const n=e.querySelector(`.cell:nth-child(${10*r+o+1})`);n.setAttribute("column",o),n.setAttribute("row",r),t(r,o).isShip&&n.classList.add("ship")}})(s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,