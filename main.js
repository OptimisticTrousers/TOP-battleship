(()=>{var t={653:(t,e,o)=>{const r=o(585);t.exports=()=>{const t={hasBeenHit:!1,isShip:!1,offLimits:!1},e=()=>{const e=Array(10).fill().map((()=>Array(10).fill()));for(let o=0;o<10;o++)for(let r=0;r<10;r++)e[o][r]={...t,column:o,row:r};return e};let o=e();const i=[r(5,"Carrier"),r(4,"Battleship"),r(3,"Destroyer"),r(3,"Submarine"),r(2,"Patrol Boat")],n=(t,e)=>o?.[t]?.[e],l=(e,r,i=(()=>Object.assign(t,{offLimits:!0}))())=>{if(void 0===o?.[e]?.[r])return!0;const n=o[e][r];return o[e][r]={...n,...i},!0},a=(t,e)=>{l(t-1,e-1),l(t,e-1)},c=(t,e,o,r)=>{if("vertical"===o)for(let o=0;o<r;o++){const r=n(t,e+o);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}if("horizontal"===o)for(let o=0;o<r;o++){const r=n(t+o,e);if(r&&!0===r.isShip&&!0===r.offLimits)return!1}return!1},s=(t,e,r,i)=>{const s=i.getLength();if(c(n(t,e)))return!1;if("vertical"===r){if(((t,e)=>t>=0&&t+e-1<o.length)(e,s)){for(let o=0;o<s;o+=1)l(t,e+o,{...i,position:o}),l(t+1,e+o),l(t-1,e+o);return((t,e,o)=>{a(t,e),l(t,e+o),l(t+1,e+o),l(t-1,e+o),l(t+1,e-1)})(t,e,s),!0}}else if("horizontal"===r&&((t,e)=>t>=0&&t+e-1<o.length)(t,s)){for(let o=0;o<s;o+=1)l(t+o,e,{...i,position:o}),l(t+o,e+1),l(t+o,e-1);return((t,e,o)=>{a(t,e),l(t+o,e),l(t-1,e+1),l(t+o,e+1),l(t+o,e-1)})(t,e,s),!0}return!1},h=()=>{const t=0===Math.floor(2*Math.random())?"vertical":"horizontal",e=Math.floor(100*Math.random()),r=(()=>{const t=[...o.flat()];return t.forEach((t=>{!0===t.hasBeenHit?t.availability=!1:t.availability=!0})),t})()[e];return!1===r.availability?h():{elementColumn:r.column,elementRow:r.row,randomDirection:t}};return{clearBoard:()=>{o=e()},checkIfLocationIsAShipOrOffLimits:c,checkIfOffLimitZoneWasCorrectlyImplemented:t=>o.flat().filter((t=>!0===t.offLimits)).length===t+2,getLocation:n,receiveAttack:(t,e)=>{o[t][e].hasBeenHit=!0},checkIfAllShipsHaveSunk:()=>{let t=!0;for(let e=0;e<10;e++)for(let o=0;o<10;o++){const r=n(e,o);if(!1!==r.isShip&&r.isShip&&!1===r.isSunk()){t=!1;break}}return t},placeShip:s,randomlyPlaceShips:()=>{const t=[];for(let e=0;e<i.length;e+=1){const o=i[e],{randomColumn:r,randomRow:n,randomDirection:l}=h(o.getLength());s(r,n,l,o)?t.push({randomColumn:r,randomRow:n,randomDirection:l}):e-=1}return t},makeRandomCoordinates:h}}},61:t=>{t.exports=(t="player")=>({getName:()=>t,attack:(t,e,{getLocation:o,receiveAttack:r})=>{const i=o(t,e);return!1===i.hasBeenHit||i.isShip&&!1===i.getStatus().includes("unhit")?(r(t,e),i.hit?(i.hit(i.position),"You hit a ship!"):"It's a hit!"):"You have already hit this spot!"},randomPos:()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())]})},585:t=>{t.exports=(t,e="ship")=>{const o=Array(t).fill("unhit");return{getName:()=>e,getLength:()=>o.length,isSunk:()=>o.every((t=>"hit"===t)),hit:e=>{e<t&&(o[e]="hit")},getStatus:()=>o,hasBeenHit:!1,offLimits:!0,isShip:!0}}}},e={};function o(r){var i=e[r];if(void 0!==i)return i.exports;var n=e[r]={exports:{}};return t[r](n,n.exports,o),n.exports}o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=o(653),e=o.n(t),r=o(585),i=o.n(r);let n,l=!1,a=!1,c=[],s=[],h=[],u=[];function p(t,e,o,r){l=t,void 0!==e&&(a=e),void 0!==o&&(c=[o,r]),0==s.length&&void 0!==o?s=[o,r]:0!==s.length&&0==h.length&&void 0!==o&&(h=[o,r])}function d(t,e){return u=[],0!==e&&u.push([t,e-1]),9!==e&&u.push([t,e+1]),0!==t&&u.push([t-1,e]),9!==t&&u.push([t+1,e]),u}function f(t,e,o,r,i,p){let f;if(!0===r&&(c=[],s=[],h=[],u=[],l=!1,a=!1,n=""),!a&&!l)return f=e.randomPos(),S(e,o,f[0],f[1],i,p);if(0!==h.length&&l&&!t){let t;if(s[0]==h[0]-1&&(t=m("down")),s[0]==h[0]+1&&(t=m("up")),s[1]==h[1]-1&&(t=m("right")),s[1]==h[1]+1&&(t=m("left")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return S(e,o,t[0],t[1],i,p)}else if(0!==h.length&&a&&!l){let t;if(c=s,h=[],"up"===n&&(t=m("down")),"down"===n&&(t=m("up")),"right"===n&&(t=m("left")),"left"===n&&(t=m("right")),t[0]>=0&&t[0]<=9&&t[1]>=0&&t[1]<=9)return S(e,o,t[0],t[1])}else if(a){0==u.length&&d(c[0],c[1]),0==u.length&&1==a&&d(s[0],s[1]);const t=u.pop();return S(e,o,t[0],t[1],i,p)}}function m(t){return"left"===t?(n="left",[c[0],c[1]-1]):"right"===t?(n="right",[c[0],c[1]+1]):"down"===t?(n="down",[c[0]+1,c[1]]):"up"===t?(n="up",[c[0]-1,c[1]]):void 0}function S(t,e,o,r,i,n){let l=!1,a=document.querySelector(`.player-board > .cell[column='${o}'][row='${r}']`),c=e.attack(o,r,i);if(console.log(i.getLocation(o,r)),"You have already hit this spot!"===c&&f(!0,t,e,void 0,i,n),"It's a hit!"===c&&(p(!1),a.classList.add("miss")),"You hit a ship!"===c)return p(!0,!0,o,r),a.classList.add("hit"),i.getLocation(o,r).isSunk()&&(l=!0,!0===t.checkIfAllShipsHaveSunk())?v(i,n):f(!1,t,e,l,i,n)}const y=({getLocation:t})=>{const e=document.querySelector("div.player-board");for(let o=0;o<10;o+=1)for(let r=0;r<10;r+=1){const i=e.querySelector(`.cell:nth-child(${10*r+o+1})`);i.setAttribute("column",o),i.setAttribute("row",r);const n=t(o,r);n.isShip&&(i.classList.add("ship"),i.setAttribute("ship-name",n.getName()))}},v=(t,e)=>{if(t.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",o.addEventListener("click",(()=>{location.reload()})),e.textContent="You lose!"}if(e.checkIfAllShipsHaveSunk()){const t=document.querySelector(".modal"),e=document.querySelector(".modal-content > p"),o=document.querySelector(".modal-content > button");t.style.display="block",e.textContent="You win!",o.addEventListener("click",(()=>{location.reload()}))}},g=t=>{switch(t.clearBoard(),document.querySelectorAll(".player-board > .cell").forEach((t=>{t.classList.remove("ship"),t.classList.remove("hit"),t.classList.remove("miss")})),Math.floor(4*Math.random())){case 0:t.placeShip(9,1,"vertical",i()(5)),t.placeShip(0,3,"horizontal",i()(3)),t.placeShip(3,6,"horizontal",i()(2)),t.placeShip(6,5,"horizontal",i()(3)),t.placeShip(3,9,"horizontal",i()(4));break;case 1:t.placeShip(0,2,"horizontal",i()(5)),t.placeShip(4,5,"horizontal",i()(3)),t.placeShip(8,7,"horizontal",i()(2)),t.placeShip(5,9,"horizontal",i()(3)),t.placeShip(6,3,"horizontal",i()(4));break;case 2:t.placeShip(5,1,"horizontal",i()(5)),t.placeShip(3,3,"vertical",i()(3)),t.placeShip(0,0,"vertical",i()(2)),t.placeShip(6,5,"horizontal",i()(3)),t.placeShip(5,9,"horizontal",i()(4));break;default:t.placeShip(0,0,"horizontal",i()(5)),t.placeShip(3,4,"horizontal",i()(3)),t.placeShip(6,7,"horizontal",i()(2)),t.placeShip(9,1,"vertical",i()(3)),t.placeShip(5,9,"horizontal",i()(4))}y(t)};var b=o(61),k=o.n(b);const L=e()(),z=e()(),w=k()(),A=k()();document.querySelector("button.randomize").addEventListener("click",(()=>{g(L)})),g(L),z.placeShip(0,0,"horizontal",i()(5)),z.placeShip(3,4,"horizontal",i()(3)),z.placeShip(6,7,"horizontal",i()(2)),z.placeShip(9,1,"vertical",i()(3)),z.placeShip(5,9,"horizontal",i()(4));const q=(()=>{const t={};return{publish:function(e,o){Array.isArray(t[e])&&t[e].forEach((t=>{t(o)}))},subscribe:function e(o,r){Array.isArray(e[o])||(t[o]=[]),t[o].push(r);const i=t[o].length-1;return{unsubscribe(){t[o].splice(i,1)}}}}})();((t,e,o,r,i)=>{const n=document.querySelector("div.enemy-board");for(let l=0;l<10;l+=1)for(let a=0;a<10;a+=1){const c=n.querySelector(`.cell:nth-child(${10*a+l+1})`);c.setAttribute("column",l),c.setAttribute("row",a),c.addEventListener("click",(()=>{i.publish("click",{cell:c,column:l,row:a,playerBoard:t,enemyBoard:e,player:o,enemy:r})}),{once:!0})}})(L,z,w,A,q),q.subscribe("click",(({cell:t,column:e,row:o,playerBoard:r,enemyBoard:i,player:n,enemy:l})=>{((t,e,o,r,i,n)=>{((t,e,o,r)=>{r.attack(t,e,o)})(t,e,o,i),((t,e,o,r)=>{const i=document.querySelector(`.enemy-board > .cell[column='${e}'][row='${o}']`);r.getLocation(e,o).isShip?i.classList.add("hit"):i.classList.add("miss")})(0,t,e,o)})(e,o,i,0,n);const{elementColumn:a,elementRow:c}=r.makeRandomCoordinates();S(n,l,a,c,r,i),v(r,i)})),y(L)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y0FDQUMsYUFDQTJDLFNBQ0FDLFlBblRvQixFQUFDOUksRUFBUUMsRUFBS2lHLEVBQVlELEVBQWE0QyxFQUFRQyxLQUhsRCxFQUFDOUksRUFBUUMsRUFBS2lHLEVBQVkyQyxLQUMzQ0EsRUFBT3hGLE9BQU9yRCxFQUFRQyxFQUFLaUcsSUFLM0JnRCxDQUFhbEosRUFBUUMsRUFBS2lHLEVBQVkyQyxHQW5CcEIsRUFBQ0EsRUFBUTdJLEVBQVFDLEVBQUtpRyxLQUN4QyxNQUFNaUIsRUFBT1QsU0FBU0MsY0FDbEIsZ0NBQW9DM0csWUFBaUJDLE9BR3hDaUcsRUFBVy9GLFlBQVlILEVBQVFDLEdBQ25DUixPQUNUMEgsRUFBS0wsVUFBVUMsSUFBSSxPQUVuQkksRUFBS0wsVUFBVUMsSUFBSSxTQVd2Qm9DLENBQWMsRUFBU25KLEVBQVFDLEVBQUtpRyxJQWtUcENrRCxDQUFnQnBKLEVBQVFDLEVBQUtpRyxFQUFZRCxFQUFhNEMsR0FFdEQsTUFBTSxjQUFFekcsRUFBYSxXQUFFQyxHQUFlNEQsRUFBWXpFLHdCQUNsRDRFLEVBQWV5QyxFQUFRQyxFQUFPMUcsRUFBZUMsRUFBWTRELEVBQWFDLEdBRXRFYyxFQUFnQmYsRUFBYUMsTUNoVGpDZSxFQUFrQmhCLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL3BsYXllci9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvc2hpcC9zaGlwLmpzIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvcC1iYXR0bGVzaGlwLy4vc3JjL2JvdC5qcyIsIndlYnBhY2s6Ly90b3AtYmF0dGxlc2hpcC8uL3NyYy9kb20uanMiLCJ3ZWJwYWNrOi8vdG9wLWJhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1hc3NpZ24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuY29uc3QgY3JlYXRlU2hpcCA9IHJlcXVpcmUoJy4uL3NoaXAvc2hpcCcpXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5jb25zdCBjcmVhdGVHYW1lQm9hcmQgPSAoKSA9PiB7XG4gICAgY29uc3QgZW1wdHlDZWxsID0geyBoYXNCZWVuSGl0OiBmYWxzZSwgaXNTaGlwOiBmYWxzZSwgb2ZmTGltaXRzOiBmYWxzZSB9XG4gICAgXG4gICAgY29uc3QgaW5pdGlhbGl6ZUJvYXJkID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBnYW1lQm9hcmQgPSBBcnJheSgxMCkuZmlsbCgpLm1hcCgoKSA9PiBBcnJheSgxMCkuZmlsbCgpKVxuICAgICAgICBmb3IobGV0IGNvbHVtbj0gMDsgY29sdW1uIDwgMTA7IGNvbHVtbisrKXtcbiAgICAgICAgICAgIGZvcihsZXQgcm93PSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgICAgICAgICAgIGdhbWVCb2FyZFtjb2x1bW5dW3Jvd10gPSB7Li4uZW1wdHlDZWxsLCBjb2x1bW4sIHJvd31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2FtZUJvYXJkXG4gICAgXG4gICAgfVxuXG4gICAgbGV0IGdhbWVCb2FyZCA9IGluaXRpYWxpemVCb2FyZCgpXG5cbiAgICBjb25zdCBzaGlwcyA9IFtcbiAgICAgICAgY3JlYXRlU2hpcCg1LCAnQ2FycmllcicpLFxuICAgICAgICBjcmVhdGVTaGlwKDQsICdCYXR0bGVzaGlwJyksXG4gICAgICAgIGNyZWF0ZVNoaXAoMywgJ0Rlc3Ryb3llcicpLFxuICAgICAgICBjcmVhdGVTaGlwKDMsICdTdWJtYXJpbmUnKSxcbiAgICAgICAgY3JlYXRlU2hpcCgyLCAnUGF0cm9sIEJvYXQnKSxcbiAgICBdXG5cblxuICAgIGNvbnN0IGNyZWF0ZU9mZkxpbWl0TG9jYXRpb24gPSAoKSA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKGVtcHR5Q2VsbCwgeyBvZmZMaW1pdHM6IHRydWUgfSlcblxuICAgIGNvbnN0IGdldExvY2F0aW9uID0gKGNvbHVtbiwgcm93KSA9PiBnYW1lQm9hcmQ/Lltjb2x1bW5dPy5bcm93XVxuXG4gICAgY29uc3Qgc2V0TG9jYXRpb24gPSAoY29sdW1uLCByb3csIHNoaXAgPSBjcmVhdGVPZmZMaW1pdExvY2F0aW9uKCkpID0+IHtcbiAgICAgICAgaWYgKGdhbWVCb2FyZD8uW2NvbHVtbl0/Lltyb3ddID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2FtZUJvYXJkW2NvbHVtbl1bcm93XVxuXG4gICAgICAgIGdhbWVCb2FyZFtjb2x1bW5dW3Jvd10gPSB7Li4ubG9jYXRpb24sIC4uLnNoaXB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGNvbnN0IGNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rID0gKCkgPT4ge1xuXG4gICAgICAgIGxldCBoYXZlQWxsU2hpcHNTdW5rID10cnVlICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGksIGopXG4gICAgICAgIGlmKGxvY2F0aW9uLmlzU2hpcCA9PT0gZmFsc2UpIGNvbnRpbnVlXG4gICAgICAgIGlmKGxvY2F0aW9uLmlzU2hpcCAmJiBsb2NhdGlvbi5pc1N1bmsoKSA9PT0gZmFsc2Upe1xuICAgICAgICAgICBoYXZlQWxsU2hpcHNTdW5rID0gZmFsc2UgXG4gICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoYXZlQWxsU2hpcHNTdW5rIFxuICAgIH1cblxuICAgIGNvbnN0IGFkZE9mZkxpbWl0QXJlYUZvclNoaXBzID0gKGNvbHVtbiwgcm93KSA9PiB7XG4gICAgICAgIC8vIHRvcC1sZWZ0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdyAtIDEpXG4gICAgICAgIC8vIHRvcFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4sIHJvdyAtIDEpXG4gICAgfVxuXG4gICAgY29uc3QgYWRkT2ZmTGltaXRBcmVhRm9ySG9yaXpvbnRhbGx5UG9zaXRpb25lZFNoaXAgPSAoXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgcm93LFxuICAgICAgICBzaGlwTGVuZ3RoXG4gICAgKSA9PiB7XG4gICAgICAgIC8vIHBvc2l0aW9ucyByZWxhdGl2ZSB0byB0aGUgc2hpcCBpdHNlbGYoaWUuIGEgaG9yaXpvbnRhbCBzaGlwJ3MgYm90dG9tIGlzIHRvIHRoZSByaWdodClcblxuICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JTaGlwcyhjb2x1bW4sIHJvdylcbiAgICAgICAgLy8gYm90dG9tXG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIHNoaXBMZW5ndGgsIHJvdylcbiAgICAgICAgLy8gYm90dG9tLWxlZnRcbiAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uIC0gMSwgcm93ICsgMSlcbiAgICAgICAgLy8gYm90dG9tLXJpZ2h0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIHNoaXBMZW5ndGgsIHJvdyArIDEpXG4gICAgICAgIC8vIHRvcC1yaWdodFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBzaGlwTGVuZ3RoLCByb3cgLSAxKVxuICAgIH1cblxuICAgIGNvbnN0IGFkZE9mZkxpbWl0QXJlYUZvclZlcnRpY2FsbHlQb3NpdGlvbmVkU2hpcCA9IChcbiAgICAgICAgY29sdW1uLFxuICAgICAgICByb3csXG4gICAgICAgIHNoaXBMZW5ndGhcbiAgICApID0+IHtcbiAgICAgICAgLy8gcG9zaXRpb25zIHJlbGF0aXZlIHRvIGhvdyB0aGUgdXNlciBzZWVzIGl0KGllLiBhIHZlcnRpY2FsIHNoaXAncyBib3R0b20gaXMgdG8gdGhlIGJvdHRvbSlcblxuICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JTaGlwcyhjb2x1bW4sIHJvdylcbiAgICAgICAgLy8gYm90dG9tXG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiwgcm93ICsgc2hpcExlbmd0aClcbiAgICAgICAgLy8gYm90dG9tLXJpZ2h0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIDEsIHJvdyArIHNoaXBMZW5ndGgpXG4gICAgICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdyArIHNoaXBMZW5ndGgpXG4gICAgICAgIC8vIHRvcC1yaWdodFxuICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyAxLCByb3cgLSAxKVxuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrSWZDb2x1bW5Db29yZGluYXRlSXNWYWxpZCA9IChjb2x1bW4sIHNoaXBMZW5ndGgpID0+XG4gICAgICAgIGNvbHVtbiA+PSAwICYmIGNvbHVtbiArIHNoaXBMZW5ndGggLSAxIDwgZ2FtZUJvYXJkLmxlbmd0aFxuXG4gICAgY29uc3QgY2hlY2tJZlJvd0Nvb3JkaW5hdGVJc1ZhbGlkID0gKHJvdywgc2hpcExlbmd0aCkgPT5cbiAgICAgICAgcm93ID49IDAgJiYgcm93ICsgc2hpcExlbmd0aCAtIDEgPCBnYW1lQm9hcmQubGVuZ3RoXG5cblxuICAgIGNvbnN0IGNoZWNrSWZMb2NhdGlvbklzQVNoaXBPck9mZkxpbWl0cyA9IChcbiAgICAgICAgY29sdW1uLFxuICAgICAgICByb3csXG4gICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgc2hpcExlbmd0aFxuICAgICkgPT4ge1xuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oY29sdW1uLCByb3cgKyBpKVxuICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5pc1NoaXAgPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLm9mZkxpbWl0cyA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oY29sdW1uICsgaSwgcm93KVxuICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5pc1NoaXAgPT09IHRydWUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLm9mZkxpbWl0cyA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgY29uc3QgcGxhY2VTaGlwID0gKGNvbHVtbiwgcm93LCBkaXJlY3Rpb24sIHNoaXApID0+IHtcbiAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IHNoaXAuZ2V0TGVuZ3RoKClcbiAgICAgICAgaWYgKGNoZWNrSWZMb2NhdGlvbklzQVNoaXBPck9mZkxpbWl0cyhnZXRMb2NhdGlvbihjb2x1bW4sIHJvdywgZGlyZWN0aW9uLCBzaGlwTGVuZ3RoKSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgaWYgKGNoZWNrSWZSb3dDb29yZGluYXRlSXNWYWxpZChyb3csIHNoaXBMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oY29sdW1uLCByb3cgKyBpLCB7Li4uc2hpcCwgcG9zaXRpb246IGl9KVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyAxLCByb3cgKyBpKVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gLSAxLCByb3cgKyBpKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JWZXJ0aWNhbGx5UG9zaXRpb25lZFNoaXAoXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICBzaGlwTGVuZ3RoXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIGlmIChjaGVja0lmQ29sdW1uQ29vcmRpbmF0ZUlzVmFsaWQoY29sdW1uLCBzaGlwTGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcExlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldExvY2F0aW9uKGNvbHVtbiArIGkgLCByb3csIHsuLi5zaGlwLCBwb3NpdGlvbjogaX0pXG4gICAgICAgICAgICAgICAgICAgIC8vc2V0TG9jYXRpb24oY29sdW1uICsgaSwgcm93LCBzaGlwKVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBpLCByb3cgKyAxKVxuICAgICAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihjb2x1bW4gKyBpLCByb3cgLSAxKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRPZmZMaW1pdEFyZWFGb3JIb3Jpem9udGFsbHlQb3NpdGlvbmVkU2hpcChcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgIHNoaXBMZW5ndGhcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVNwYWNlcyA9ICgpID0+e1xuXG4gICAgICAgIGNvbnN0IGZsYXR0ZW5lZEdhbWVCb2FyZCA9IFsuLi5nYW1lQm9hcmQuZmxhdCgpXVxuXG4gICAgICAgICAgICBmbGF0dGVuZWRHYW1lQm9hcmQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuaGFzQmVlbkhpdCA9PT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYXZhaWxhYmlsaXR5ID0gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hdmFpbGFiaWxpdHkgPXRydWUgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHJldHVybiBmbGF0dGVuZWRHYW1lQm9hcmRcblxuICAgICAgICB9XG4gICAgY29uc3QgbWFrZVJhbmRvbUNvb3JkaW5hdGVzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCByYW5kb21EaXJlY3Rpb24gPVxuICAgICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMikgPT09IDAgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnXG4gICAgICAgIGNvbnN0IHJhbmRvbUxvY2F0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKVxuICAgICAgICBjb25zdCBmbGF0dGVuZWRHYW1lQm9hcmQgPSBhdmFpbGFibGVTcGFjZXMoKVxuXG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZmxhdHRlbmVkR2FtZUJvYXJkW3JhbmRvbUxvY2F0aW9uXVxuXG4gICAgICAgIGlmKGxvY2F0aW9uLmF2YWlsYWJpbGl0eSA9PT0gZmFsc2Upe1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VSYW5kb21Db29yZGluYXRlcygpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbGVtZW50Q29sdW1uID0gbG9jYXRpb24uY29sdW1uXG4gICAgICAgIGNvbnN0IGVsZW1lbnRSb3cgPSBsb2NhdGlvbi5yb3dcblxuXG4gICAgICAgIHJldHVybiB7IGVsZW1lbnRDb2x1bW4sIGVsZW1lbnRSb3csIHJhbmRvbURpcmVjdGlvbiB9XG4gICAgfVxuXG4gICAgY29uc3QgcmFuZG9tbHlQbGFjZVNoaXBzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBzaGlwRGV0YWlscyA9IFtdXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBzaGlwc1tpXVxuICAgICAgICAgICAgY29uc3QgeyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uIH0gPVxuICAgICAgICAgICAgICAgIG1ha2VSYW5kb21Db29yZGluYXRlcyhzaGlwLmdldExlbmd0aCgpKVxuICAgICAgICAgICAgaWYgKHBsYWNlU2hpcChyYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uLCBzaGlwKSkge1xuICAgICAgICAgICAgICAgIHNoaXBEZXRhaWxzLnB1c2goeyByYW5kb21Db2x1bW4sIHJhbmRvbVJvdywgcmFuZG9tRGlyZWN0aW9uIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGkgLT0gMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaGlwRGV0YWlsc1xuICAgIH1cblxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29sdW1uLCByb3cpID0+IHtcbiAgICAgICAgZ2FtZUJvYXJkW2NvbHVtbl1bcm93XS5oYXNCZWVuSGl0ID0gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCA9IChzaGlwTGVuZ3RoKSA9PlxuICAgICAgICBnYW1lQm9hcmQuZmxhdCgpLmZpbHRlcigoZWxlbWVudCkgPT4gZWxlbWVudC5vZmZMaW1pdHMgPT09IHRydWUpXG4gICAgICAgICAgICAubGVuZ3RoID09PVxuICAgICAgICBzaGlwTGVuZ3RoICsgMlxuICAgIC8vIGFkZGluZyBzaGlwTGVuZ3RoIHBsdXMgdHdvIGJlY2F1c2UgZm9yIGV2ZXJ5IGluY3JlYXNlIGluIHRoZSBzaXplIG9mIHNoaXAsIHRoZSB6b25lcyBjb3ZlcmVkIGluY3JlYXNlIGJ5IDIgdW5pdHNcblxuICAgIGNvbnN0IGNsZWFyQm9hcmQgID0gKCkgPT4ge1xuICAgICAgICBnYW1lQm9hcmQgPSBpbml0aWFsaXplQm9hcmQoKVxuICAgIH1cblxuICAgIGNvbnN0IGdldEJvYXJkID0oKSA9PiB7XG4gICAgICAgIHJldHVybiBnYW1lQm9hcmRcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjbGVhckJvYXJkLFxuICAgICAgICBjaGVja0lmTG9jYXRpb25Jc0FTaGlwT3JPZmZMaW1pdHMsXG4gICAgICAgIGNoZWNrSWZPZmZMaW1pdFpvbmVXYXNDb3JyZWN0bHlJbXBsZW1lbnRlZCxcbiAgICAgICAgZ2V0TG9jYXRpb24sXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIGNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rLFxuICAgICAgICBwbGFjZVNoaXAsXG4gICAgICAgIHJhbmRvbWx5UGxhY2VTaGlwcyxcbiAgICAgICAgbWFrZVJhbmRvbUNvb3JkaW5hdGVzLFxuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlR2FtZUJvYXJkIiwiY29uc3QgY3JlYXRlUGxheWVyID0gKG5hbWUgPSAncGxheWVyJykgPT4ge1xuICAgIGNvbnN0IGdldE5hbWUgPSAoKSA9PiBuYW1lXG5cbiAgICBjb25zdCBhdHRhY2sgPSAoY29sdW1uLCByb3csIHsgZ2V0TG9jYXRpb24sIHJlY2VpdmVBdHRhY2sgfSkgPT4ge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGNvbHVtbiwgcm93KVxuICAgICAgICBpZiAobG9jYXRpb24uaGFzQmVlbkhpdCA9PT0gZmFsc2UgfHwgKGxvY2F0aW9uLmlzU2hpcCAmJiBsb2NhdGlvbi5nZXRTdGF0dXMoKS5pbmNsdWRlcygndW5oaXQnKSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICByZWNlaXZlQXR0YWNrKGNvbHVtbiwgcm93KVxuICAgICAgICAgICAgaWYobG9jYXRpb24uaGl0KXtcblxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhpdChsb2NhdGlvbi5wb3NpdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJZb3UgaGl0IGEgc2hpcCFcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiSXQncyBhIGhpdCFcIlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICdZb3UgaGF2ZSBhbHJlYWR5IGhpdCB0aGlzIHNwb3QhJ1xuICAgIH1cblxuICAgIGxldCByYW5kb21Qb3MgPSAoKSA9PiB7XG4gICAgbGV0IHBvczEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgbGV0IHBvczIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgcmV0dXJuIFtwb3MxLCBwb3MyXTtcbiAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldE5hbWUsXG4gICAgICAgIGF0dGFjayxcbiAgICAgICAgcmFuZG9tUG9zXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVBsYXllclxuIiwiY29uc3QgY3JlYXRlU2hpcCA9IChsZW5ndGgsIG5hbWUgPSAnc2hpcCcpID0+IHtcblxuICAgIGNvbnN0IHN0YXR1cyA9IEFycmF5KGxlbmd0aCkuZmlsbCgndW5oaXQnKVxuXG4gICAgY29uc3QgZ2V0TGVuZ3RoID0gKCkgPT4gc3RhdHVzLmxlbmd0aFxuXG4gICAgY29uc3QgZ2V0U3RhdHVzID0gKCkgPT4gc3RhdHVzXG5cbiAgICBjb25zdCBoaXQgPSAocG9zaXRpb24pID0+IHtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBzdGF0dXNbcG9zaXRpb25dID0gJ2hpdCdcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdldE5hbWUgPSAoKSA9PiAgbmFtZVxuXG4gICAgY29uc3QgaXNTdW5rID0gKCkgPT4gc3RhdHVzLmV2ZXJ5KChwb3NpdGlvbikgPT4gcG9zaXRpb24gPT09ICdoaXQnKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0TmFtZSxcbiAgICAgICAgZ2V0TGVuZ3RoLFxuICAgICAgICBpc1N1bmssXG4gICAgICAgIGhpdCxcbiAgICAgICAgZ2V0U3RhdHVzLFxuICAgICAgICBoYXNCZWVuSGl0OiBmYWxzZSxcbiAgICAgICAgb2ZmTGltaXRzOiB0cnVlLFxuICAgICAgICBpc1NoaXA6IHRydWUsXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVNoaXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1lbHNlLXJldHVybiAqL1xuaW1wb3J0IHtyZW5kZXJBdHRhY2tQMiB9IGZyb20gJy4vZG9tJ1xuXG5sZXQgd2FzSGl0ID0gZmFsc2U7XG5sZXQgc3RhdHVzID0gZmFsc2U7XG5sZXQgbGFzdEhpdFBvcyA9IFtdO1xubGV0IGZpcnN0SGl0UG9zID0gW107XG5sZXQgc2Vjb25kSGl0UG9zID0gW107XG5sZXQgc3Vycm91bmRpbmdQb3MgPSBbXTtcbmxldCBhdHRhY2tEaXJlY3Rpb247XG5cbmZ1bmN0aW9uIHNldFdhc0hpdCh2YWx1ZSwgc3RhdCwgcG9zMSwgcG9zMikge1xuICB3YXNIaXQgPSB2YWx1ZTtcbiAgaWYgKHN0YXQgIT09IHVuZGVmaW5lZCkgc3RhdHVzID0gc3RhdDtcbiAgaWYgKHBvczEgIT09IHVuZGVmaW5lZCkgbGFzdEhpdFBvcyA9IFtwb3MxLCBwb3MyXTtcbiAgaWYgKGZpcnN0SGl0UG9zLmxlbmd0aCA9PSAwICYmIHBvczEgIT09IHVuZGVmaW5lZCkgZmlyc3RIaXRQb3MgPSBbcG9zMSwgcG9zMl07XG4gIGVsc2UgaWYgKFxuICAgIGZpcnN0SGl0UG9zLmxlbmd0aCAhPT0gMCAmJlxuICAgIHNlY29uZEhpdFBvcy5sZW5ndGggPT0gMCAmJlxuICAgIHBvczEgIT09IHVuZGVmaW5lZFxuICApXG4gICAgc2Vjb25kSGl0UG9zID0gW3BvczEsIHBvczJdO1xufVxuZnVuY3Rpb24gZ2V0V2FzSGl0KCkge1xuICByZXR1cm4gW3dhc0hpdCwgbGFzdEhpdFBvcywgc3RhdHVzXTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJTdXJyb3VuZGluZ1Bvcyhwb3MxLCBwb3MyKSB7XG4gIHN1cnJvdW5kaW5nUG9zID0gW107XG4gIGlmIChwb3MyICE9PSAwKSBzdXJyb3VuZGluZ1Bvcy5wdXNoKFtwb3MxLCBwb3MyIC0gMV0pO1xuICBpZiAocG9zMiAhPT0gOSkgc3Vycm91bmRpbmdQb3MucHVzaChbcG9zMSwgcG9zMiArIDFdKTtcbiAgaWYgKHBvczEgIT09IDApIHN1cnJvdW5kaW5nUG9zLnB1c2goW3BvczEgLSAxLCBwb3MyXSk7XG4gIGlmIChwb3MxICE9PSA5KSBzdXJyb3VuZGluZ1Bvcy5wdXNoKFtwb3MxICsgMSwgcG9zMl0pO1xuICByZXR1cm4gc3Vycm91bmRpbmdQb3M7XG59XG5cbmZ1bmN0aW9uIGFpUGxheShyZXBlYXQsIHAxLCBwMiwgaXNTdW5rLCBwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZCkge1xuICBsZXQgcG9zOyBsZXQgcG9zMTsgbGV0IHBvczI7XG4gIGlmIChpc1N1bmsgPT09IHRydWUpIHtcbiAgICBsYXN0SGl0UG9zID0gW107XG4gICAgZmlyc3RIaXRQb3MgPSBbXTtcbiAgICBzZWNvbmRIaXRQb3MgPSBbXTtcbiAgICBzdXJyb3VuZGluZ1BvcyA9IFtdO1xuICAgIHdhc0hpdCA9IGZhbHNlO1xuICAgIHN0YXR1cyA9IGZhbHNlO1xuICAgIGF0dGFja0RpcmVjdGlvbiA9IFwiXCI7XG4gIH1cbiAgaWYgKCFzdGF0dXMgJiYgIXdhc0hpdCkge1xuICAgIHBvcyA9IHAxLnJhbmRvbVBvcygpO1xuXG4gICAgcmV0dXJuIHJlbmRlckF0dGFja1AyKHAxLCBwMiwgcG9zWzBdLCBwb3NbMV0sIHBsYXllckJvYXJkLCBlbmVteUJvYXJkKTtcbiAgfSBlbHNlIGlmIChzZWNvbmRIaXRQb3MubGVuZ3RoICE9PSAwICYmIHdhc0hpdCAmJiAhcmVwZWF0KSB7XG4gICAgbGV0IG5ld1BvcztcbiAgICBpZiAoZmlyc3RIaXRQb3NbMF0gPT0gc2Vjb25kSGl0UG9zWzBdIC0gMSkgbmV3UG9zID0gYXR0YWNrVG93YXJkcyhcImRvd25cIik7XG4gICAgaWYgKGZpcnN0SGl0UG9zWzBdID09IHNlY29uZEhpdFBvc1swXSArIDEpIG5ld1BvcyA9IGF0dGFja1Rvd2FyZHMoXCJ1cFwiKTtcbiAgICBpZiAoZmlyc3RIaXRQb3NbMV0gPT0gc2Vjb25kSGl0UG9zWzFdIC0gMSkgbmV3UG9zID0gYXR0YWNrVG93YXJkcyhcInJpZ2h0XCIpO1xuICAgIGlmIChmaXJzdEhpdFBvc1sxXSA9PSBzZWNvbmRIaXRQb3NbMV0gKyAxKSBuZXdQb3MgPSBhdHRhY2tUb3dhcmRzKFwibGVmdFwiKTtcbiAgICBpZiAobmV3UG9zWzBdID49IDAgJiYgbmV3UG9zWzBdIDw9IDkgJiYgbmV3UG9zWzFdID49IDAgJiYgbmV3UG9zWzFdIDw9IDkpXG4gICAgICByZXR1cm4gcmVuZGVyQXR0YWNrUDIocDEsIHAyLCBuZXdQb3NbMF0sIG5ld1Bvc1sxXSwgcGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpO1xuICB9IGVsc2UgaWYgKHNlY29uZEhpdFBvcy5sZW5ndGggIT09IDAgJiYgc3RhdHVzICYmICF3YXNIaXQpIHtcbiAgICBsYXN0SGl0UG9zID0gZmlyc3RIaXRQb3M7XG4gICAgc2Vjb25kSGl0UG9zID0gW107XG4gICAgbGV0IG5ld1BvcztcbiAgICBpZiAoYXR0YWNrRGlyZWN0aW9uID09PSBcInVwXCIpIG5ld1BvcyA9IGF0dGFja1Rvd2FyZHMoXCJkb3duXCIpO1xuICAgIGlmIChhdHRhY2tEaXJlY3Rpb24gPT09IFwiZG93blwiKSBuZXdQb3MgPSBhdHRhY2tUb3dhcmRzKFwidXBcIik7XG4gICAgaWYgKGF0dGFja0RpcmVjdGlvbiA9PT0gXCJyaWdodFwiKSBuZXdQb3MgPSBhdHRhY2tUb3dhcmRzKFwibGVmdFwiKTtcbiAgICBpZiAoYXR0YWNrRGlyZWN0aW9uID09PSBcImxlZnRcIikgbmV3UG9zID0gYXR0YWNrVG93YXJkcyhcInJpZ2h0XCIpO1xuICAgIGlmIChuZXdQb3NbMF0gPj0gMCAmJiBuZXdQb3NbMF0gPD0gOSAmJiBuZXdQb3NbMV0gPj0gMCAmJiBuZXdQb3NbMV0gPD0gOSlcbiAgICAgIHJldHVybiByZW5kZXJBdHRhY2tQMihwMSwgcDIsIG5ld1Bvc1swXSwgbmV3UG9zWzFdKTtcbiAgfSBlbHNlIGlmIChzdGF0dXMpIHtcbiAgICBpZiAoc3Vycm91bmRpbmdQb3MubGVuZ3RoID09IDApXG4gICAgICByZWdpc3RlclN1cnJvdW5kaW5nUG9zKGxhc3RIaXRQb3NbMF0sIGxhc3RIaXRQb3NbMV0pO1xuICAgIGlmIChzdXJyb3VuZGluZ1Bvcy5sZW5ndGggPT0gMCAmJiBzdGF0dXMgPT0gdHJ1ZSlcbiAgICAgIHJlZ2lzdGVyU3Vycm91bmRpbmdQb3MoZmlyc3RIaXRQb3NbMF0sIGZpcnN0SGl0UG9zWzFdKTtcbiAgICBjb25zdCBuZXdQb3MgPSBzdXJyb3VuZGluZ1Bvcy5wb3AoKTtcbiAgICByZXR1cm4gcmVuZGVyQXR0YWNrUDIocDEsIHAyLCBuZXdQb3NbMF0sIG5ld1Bvc1sxXSwgcGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpO1xuICB9XG59XG4vLyBnZXQgcG9zIG9mIGF0dGFjayBiYXNlZCBvbiBkaXJlY3Rpb25cbmZ1bmN0aW9uIGF0dGFja1Rvd2FyZHMoZGlyKSB7XG4gIGlmIChkaXIgPT09IFwibGVmdFwiKSB7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJsZWZ0XCI7XG4gICAgcmV0dXJuIFtsYXN0SGl0UG9zWzBdLCBsYXN0SGl0UG9zWzFdIC0gMV07XG4gIH1cbiAgaWYgKGRpciA9PT0gXCJyaWdodFwiKSB7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJyaWdodFwiO1xuICAgIHJldHVybiBbbGFzdEhpdFBvc1swXSwgbGFzdEhpdFBvc1sxXSArIDFdO1xuICB9XG4gIGlmIChkaXIgPT09IFwiZG93blwiKSB7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJkb3duXCI7XG4gICAgcmV0dXJuIFtsYXN0SGl0UG9zWzBdICsgMSwgbGFzdEhpdFBvc1sxXV07XG4gIH1cbiAgaWYgKGRpciA9PT0gXCJ1cFwiKSB7XG4gICAgYXR0YWNrRGlyZWN0aW9uID0gXCJ1cFwiO1xuICAgIHJldHVybiBbbGFzdEhpdFBvc1swXSAtIDEsIGxhc3RIaXRQb3NbMV1dO1xuICB9XG59XG5cbmV4cG9ydCB7IGFpUGxheSwgZ2V0V2FzSGl0LCBzZXRXYXNIaXQsIGxhc3RIaXRQb3MsIHN1cnJvdW5kaW5nUG9zIH07XG5cbiIsImltcG9ydCBjcmVhdGVHYW1lQm9hcmQgZnJvbSBcIi4vZ2FtZWJvYXJkL2dhbWVib2FyZFwiXG5pbXBvcnQgY3JlYXRlU2hpcCBmcm9tIFwiLi9zaGlwL3NoaXBcIlxuaW1wb3J0IHsgYWlQbGF5LCBnZXRXYXNIaXQsIHNldFdhc0hpdCwgc3Vycm91bmRpbmdQb3MgfSBmcm9tIFwiLi9ib3RcIjtcblxuY29uc3QgcmVuZGVyQXR0YWNrcyA9IChwbGF5ZXIsIGNvbHVtbiwgcm93LCBlbmVteUJvYXJkKSA9PiB7XG4gICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIGAuJHtwbGF5ZXJ9LWJvYXJkID4gLmNlbGxbY29sdW1uPScke2NvbHVtbn0nXVtyb3c9JyR7cm93fSddYFxuICAgIClcblxuICAgIGNvbnN0IGxvY2F0aW9uID0gZW5lbXlCb2FyZC5nZXRMb2NhdGlvbihjb2x1bW4sIHJvdylcbiAgICBpZiAobG9jYXRpb24uaXNTaGlwKSB7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0JylcbiAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ21pc3MnKVxuICAgIH1cbn1cblxuY29uc3QgaGFuZGxlQXR0YWNrID0gKGNvbHVtbiwgcm93LCBlbmVteUJvYXJkLCBwbGF5ZXIpID0+XG4gICAgcGxheWVyLmF0dGFjayhjb2x1bW4sIHJvdywgZW5lbXlCb2FyZClcblxuY29uc3QgYXR0YWNrRW5lbXlDZWxsID0gKGNvbHVtbiwgcm93LCBlbmVteUJvYXJkLCBwbGF5ZXJCb2FyZCwgcGxheWVyLCBlbmVteSkgPT4ge1xuXG5cbiAgICBoYW5kbGVBdHRhY2soY29sdW1uLCByb3csIGVuZW15Qm9hcmQsIHBsYXllcilcbiAgICByZW5kZXJBdHRhY2tzKCdlbmVteScsIGNvbHVtbiwgcm93LCBlbmVteUJvYXJkKVxufVxuXG5jb25zdCBpc1NwYWNlQXJvdW5kSGl0ID0gKGNvbHVtbiwgcm93LCBwbGF5ZXJCb2FyZCkgPT4ge1xuXG4gICAgY29uc3QgbmV4dENvbHVtbiA9IHBsYXllckJvYXJkLmdldExvY2F0aW9uKGNvbHVtbiArIDEsIHJvdylcbiAgICBjb25zdCBwcmV2aW91c0NvbHVtbiA9IHBsYXllckJvYXJkLmdldExvY2F0aW9uKGNvbHVtbiAtIDEsIHJvdylcbiAgICBjb25zdCBuZXh0Um93ID0gcGxheWVyQm9hcmQuZ2V0TG9jYXRpb24oY29sdW1uLCByb3cgKyAxKVxuICAgIGNvbnN0IHByZXZpb3VzUm93ID0gcGxheWVyQm9hcmQuZ2V0TG9jYXRpb24oY29sdW1uLCByb3cgLSAxKVxuXG4gICAgY29uc3Qgc3BhY2VzSGl0ID0gW11cblxuICAgIGlmKG5leHRDb2x1bW4gJiYgIW5leHRDb2x1bW4uaGFzQmVlbkhpdCl7XG4gICAgICAgIHNwYWNlc0hpdC5wdXNoKG5leHRDb2x1bW4pXG4gICAgfVxuICAgIGlmKHByZXZpb3VzQ29sdW1uICYmICFwcmV2aW91c0NvbHVtbi5oYXNCZWVuSGl0KXtcbiAgICAgICAgc3BhY2VzSGl0LnB1c2gocHJldmlvdXNDb2x1bW4pXG4gICAgfVxuICAgIGlmKG5leHRSb3cgJiYgIW5leHRSb3cuaGFzQmVlbkhpdCl7XG4gICAgICAgIHNwYWNlc0hpdC5wdXNoKG5leHRSb3cpXG4gICAgfVxuICAgIGlmKHByZXZpb3VzUm93ICYmICFwcmV2aW91c1Jvdy5oYXNCZWVuSGl0KXtcbiAgICAgICAgc3BhY2VzSGl0LnB1c2gocHJldmlvdXNSb3cpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNwYWNlc0hpdFxuXG59XG5cbmNvbnN0IHJhbmRvbURpcmVjdGlvbkF0dGFjayA9IChjb2x1bW4sIHJvdywgcGxheWVyQm9hcmQpID0+IHtcblxuICAgIGNvbnN0IHNwYWNlc0hpdCA9IGlzU3BhY2VBcm91bmRIaXQoY29sdW1uLCByb3csIHBsYXllckJvYXJkKVxuXG4gICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzcGFjZXNIaXQubGVuZ3RoKVxuXG4gICAgaWYoIXNwYWNlc0hpdFtyYW5kb21JbmRleF0pIHJldHVybiByYW5kb21EaXJlY3Rpb25BdHRhY2soY29sdW1uLCByb3cgLCBwbGF5ZXJCb2FyZClcblxuICAgIHJldHVybiBzcGFjZXNIaXRbcmFuZG9tSW5kZXhdXG59XG5cbmNvbnN0IGlzUmFuZG9tQ29sdW1uR3JlYXRlclRoYW5DdXJyZW50Q29sdW1uID0gKGNvbHVtbiwgcmFuZG9tQ29sdW1uKSA9PiBcbiAgICByYW5kb21Db2x1bW4gPiBjb2x1bW5cblxuY29uc3QgaXNSYW5kb21Sb3dHcmVhdGVyVGhhbkN1cnJlbnRDb2x1bW4gPSAocm93LCByYW5kb21Sb3cpID0+IFxuICAgIHJhbmRvbVJvdyA+IHJvd1xuXG5jb25zdCBsaXN0T2ZSYW5kb21Db29yZGluYXRlcyA9IChjb2x1bW4sIHJvdywgcGxheWVyQm9hcmQpID0+IHtcblxuICAgICAgICBjb25zdCBsb2NhdGlvblByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIGxvY2F0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXJCb2FyZC5nZXRMb2NhdGlvbih0aGlzLmNvbHVtbiwgdGhpcy5yb3cpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b3AgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpLCB7XG4gICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICByb3c6IHJvdyAtIDEsXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGJvdHRvbSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShsb2NhdGlvblByb3RvdHlwZSksIHtcbiAgICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgICAgIHJvdzogcm93ICsgMSxcbiAgICAgICAgfSlcbiAgICAgICAgY29uc3QgcmlnaHQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpLCB7XG4gICAgICAgICAgICBjb2x1bW46IGNvbHVtbiArIDEsXG4gICAgICAgICAgICByb3csXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGxlZnQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobG9jYXRpb25Qcm90b3R5cGUpLCB7XG4gICAgICAgICAgICBjb2x1bW46IGNvbHVtbiAtIDEsXG4gICAgICAgICAgICByb3csXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXVxuXG4gICAgICAgIGRpcmVjdGlvbnMucHVzaCh0b3ApXG4gICAgICAgIGRpcmVjdGlvbnMucHVzaChib3R0b20pXG4gICAgICAgIGRpcmVjdGlvbnMucHVzaChyaWdodClcbiAgICAgICAgZGlyZWN0aW9ucy5wdXNoKGxlZnQpXG5cbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbnNcbn1cblxuLy8gcmVuZGVycyBhdHRhY2sgZm9yIHAyIChBSSlcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJBdHRhY2tQMihwMSwgcDIsIHBvczEsIHBvczIsIHBsYXllckJvYXJkLCBlbmVteUJvYXJkKSB7XG4gIGxldCBpc1N1bmsgPSBmYWxzZTtcbiAgbGV0IGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBgLnBsYXllci1ib2FyZCA+IC5jZWxsW2NvbHVtbj0nJHtwb3MxfSddW3Jvdz0nJHtwb3MyfSddYFxuICAgIClcblxuICBsZXQgYXR0YWNrID0gcDIuYXR0YWNrKHBvczEsIHBvczIsIHBsYXllckJvYXJkKTtcblxuICAgIGNvbnNvbGUubG9nKHBsYXllckJvYXJkLmdldExvY2F0aW9uKHBvczEsIHBvczIpKVxuICBpZiAoYXR0YWNrID09PSBcIllvdSBoYXZlIGFscmVhZHkgaGl0IHRoaXMgc3BvdCFcIikge1xuICAgIGxldCByZXBlYXQgPSB0cnVlO1xuICAgIGFpUGxheShyZXBlYXQsIHAxLCBwMiwgdW5kZWZpbmVkLCBwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZCk7XG4gIH1cbiAgaWYgKGF0dGFjayA9PT0gXCJJdCdzIGEgaGl0IVwiKSB7XG4gICAgc2V0V2FzSGl0KGZhbHNlKTtcbiAgICBlLmNsYXNzTGlzdC5hZGQoXCJtaXNzXCIpO1xuICB9XG4gIGlmIChhdHRhY2sgPT09IFwiWW91IGhpdCBhIHNoaXAhXCIpIHtcbiAgICBzZXRXYXNIaXQodHJ1ZSwgdHJ1ZSwgcG9zMSwgcG9zMik7XG4gICAgZS5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xuICAgIC8vIGlmIHNoaXAgaXMgc3VuaywgYWRkIFwic3Vua1wiIGNsYXNzXG4gICAgaWYgKHBsYXllckJvYXJkLmdldExvY2F0aW9uKHBvczEsIHBvczIpLmlzU3VuaygpKSB7XG4gICAgICAvL3AxLmJvYXJkLmJvYXJkW3BvczFdW3BvczJdLnNoaXAuZG9tVGFyZ2V0cy5mb3JFYWNoKChlKSA9PlxuICAgICAgICAvL2UuY2xhc3NMaXN0LmFkZChcInN1bmtcIilcbiAgICAgIC8vKTtcbiAgICAgIGlzU3VuayA9IHRydWU7XG4gICAgICBpZiAocDEuY2hlY2tJZkFsbFNoaXBzSGF2ZVN1bmsoKSA9PT0gdHJ1ZSkgcmV0dXJuIGNoZWNrSWZHYW1lT3ZlcihwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZCk7XG4gICAgfVxuICAgIHJldHVybiBhaVBsYXkoZmFsc2UsIHAxLCBwMiwgaXNTdW5rLCBwbGF5ZXJCb2FyZCwgZW5lbXlCb2FyZCk7XG4gIH1cblxuICAvL3AxLmlzVHVybihwMik7IC8vIGdpdmVzIHR1cm4gdG8gUDFcbn1cbi8vIGh0dHBzOi8vanNtYW5pZmVzdC5jb20vdGhlLXB1Ymxpc2gtc3Vic2NyaWJlLXBhdHRlcm4taW4tamF2YXNjcmlwdC9cblxuZXhwb3J0IGNvbnN0IHB1YlN1YiA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IHt9XG5cbiAgICBmdW5jdGlvbiBwdWJsaXNoKGV2ZW50TmFtZSwgZGF0YSkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc3Vic2NyaWJlcnNbZXZlbnROYW1lXSkpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXJzW2V2ZW50TmFtZV0uZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpXG4gICAgICAgIH0pXG4gICAgfVxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzdWJzY3JpYmVbZXZlbnROYW1lXSkpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzW2V2ZW50TmFtZV0gPSBbXVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXJzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjaylcbiAgICAgICAgY29uc3QgaW5kZXggPSBzdWJzY3JpYmVyc1tldmVudE5hbWVdLmxlbmd0aCAtIDFcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcnNbZXZlbnROYW1lXS5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHVibGlzaCxcbiAgICAgICAgc3Vic2NyaWJlLFxuICAgIH1cbn1cblxuLy8gY3JlYXRlcyBhIGRlbGF5IHRvIGJlIHVzZWQgaW4gYW4gYXN5bmMgZnVuY3Rpb25cbmZ1bmN0aW9uIGRlbGF5KGRlbGF5SW5Ncykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHJlc29sdmUoMik7XG4gICAgfSwgZGVsYXlJbk1zKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJQbGF5ZXJTaGlwcyA9ICh7IGdldExvY2F0aW9uIH0pID0+IHtcbiAgICBjb25zdCBwbGF5ZXJCb2FyZEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYucGxheWVyLWJvYXJkJylcblxuICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IDEwOyBjb2x1bW4gKz0gMSkge1xuICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93ICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBwbGF5ZXJCb2FyZEFyZWEucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICBgLmNlbGw6bnRoLWNoaWxkKCR7cm93ICogMTAgKyBjb2x1bW4gKyAxfSlgXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnY29sdW1uJywgY29sdW1uKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3JvdycsIHJvdylcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oY29sdW1uLCByb3cpXG4gICAgICAgICAgICBpZiAobG9jYXRpb24uaXNTaGlwKSB7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdzaGlwJylcbiAgICAgICAgICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnc2hpcC1uYW1lJywgbG9jYXRpb24uZ2V0TmFtZSgpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBjaGVja0lmR2FtZU92ZXIgPSAocGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpID0+IHtcbiAgICBpZiAocGxheWVyQm9hcmQuY2hlY2tJZkFsbFNoaXBzSGF2ZVN1bmsoKSkge1xuICAgICAgICBjb25zdCBtb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbCcpXG4gICAgICAgIGNvbnN0IG1vZGFsV2lubmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWNvbnRlbnQgPiBwJylcbiAgICAgICAgY29uc3QgcGxheUFnYWluQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICcubW9kYWwtY29udGVudCA+IGJ1dHRvbidcbiAgICAgICAgKVxuXG4gICAgICAgIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgICAgIHBsYXlBZ2FpbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgIH0pXG5cbiAgICAgICAgbW9kYWxXaW5uZXIudGV4dENvbnRlbnQgPSAnWW91IGxvc2UhJ1xuICAgIH1cbiAgICBpZiAoZW5lbXlCb2FyZC5jaGVja0lmQWxsU2hpcHNIYXZlU3VuaygpKSB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsJylcbiAgICAgICAgY29uc3QgbW9kYWxXaW5uZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtY29udGVudCA+IHAnKVxuICAgICAgICBjb25zdCBwbGF5QWdhaW5CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJy5tb2RhbC1jb250ZW50ID4gYnV0dG9uJ1xuICAgICAgICApXG5cbiAgICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgICAgbW9kYWxXaW5uZXIudGV4dENvbnRlbnQgPSAnWW91IHdpbiEnXG4gICAgICAgIHBsYXlBZ2FpbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgYWRkTGlzdGVuZXJzVG9FbmVteUJvYXJkID0gKFxuICAgIHBsYXllckJvYXJkLFxuICAgIGVuZW15Qm9hcmQsXG4gICAgcGxheWVyLFxuICAgIGVuZW15LFxuICAgIHBzXG4pID0+IHtcbiAgICBjb25zdCBlbmVteUJvYXJkQXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5lbmVteS1ib2FyZCcpXG5cbiAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCAxMDsgY29sdW1uICs9IDEpIHtcbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICAvLyBDcmVkaXRpbmcgZm9ybXVsYSB0byBjYWxjdWxhdGUgbnRoLWNoaWxkIHVzaW5nIG5lc3RlZCBsb29wOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84ODcyNjYyL21hdGgtdG8tZGV0ZXJtaW5lLWl0ZW0taW5kZXgtYmFzZWQtb24tY29sLXJvdy1zZWxlY3Rpb24taW4tZ3JpZFxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGVuZW15Qm9hcmRBcmVhLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgYC5jZWxsOm50aC1jaGlsZCgke3JvdyAqIDEwICsgY29sdW1uICsgMX0pYFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2NvbHVtbicsIGNvbHVtbilcbiAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdyb3cnLCByb3cpXG5cbiAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAnY2xpY2snLFxuICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHMucHVibGlzaCgnY2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyQm9hcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteUJvYXJkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXksXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7IG9uY2U6IHRydWUgfVxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBjbGVhckJvYXJkRE9NID0gKCkgPT4ge1xuICAgIGNvbnN0IGNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBsYXllci1ib2FyZCA+IC5jZWxsJylcblxuICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiB7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2hpcCcpXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnaGl0JylcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdtaXNzJylcbiAgICB9KVxuXG5cblxufVxuXG5leHBvcnQgY29uc3QgcmFuZG9taXplTGlzdGVuZXIgPSAoZ2FtZUJvYXJkKSA9PiB7XG5cbiAgICBnYW1lQm9hcmQuY2xlYXJCb2FyZCgpXG4gICAgY2xlYXJCb2FyZERPTSgpXG5cbiAgICBjb25zdCByYW5kb21Qb3NzaWJpbGl0eSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQpXG4gICAgc3dpdGNoKHJhbmRvbVBvc3NpYmlsaXR5KXtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDksIDEsICd2ZXJ0aWNhbCcsIGNyZWF0ZVNoaXAoNSkpXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoMCwgMywgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDMpKVxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDMsIDYsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgyKSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCg2LCA1LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoMykpXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoMywgOSwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDQpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCgwLCAyLCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNSkpXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoNCwgNSwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDMpKVxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDgsIDcsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgyKSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCg1LCA5LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoMykpXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoNiwgMywgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDQpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCg1LCAxLCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNSkpXG4gICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoMywgMywgJ3ZlcnRpY2FsJywgY3JlYXRlU2hpcCgzKSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCgwLCAwLCAndmVydGljYWwnLCBjcmVhdGVTaGlwKDIpKVxuICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDYsIDUsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgzKSlcbiAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCg1LCA5LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNCkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoMCwgMCwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDUpKVxuICAgICAgICAgICAgZ2FtZUJvYXJkLnBsYWNlU2hpcCgzLCA0LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoMykpXG4gICAgICAgICAgICBnYW1lQm9hcmQucGxhY2VTaGlwKDYsIDcsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgyKSlcbiAgICAgICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoOSwgMSwgJ3ZlcnRpY2FsJywgY3JlYXRlU2hpcCgzKSlcbiAgICAgICAgICAgIGdhbWVCb2FyZC5wbGFjZVNoaXAoNSwgOSwgJ2hvcml6b250YWwnLCBjcmVhdGVTaGlwKDQpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmVuZGVyUGxheWVyU2hpcHMoZ2FtZUJvYXJkKVxuXG59XG5cbmV4cG9ydCBjb25zdCBhdHRhY2sgPSAoe1xuICAgIGNlbGwsXG4gICAgY29sdW1uLFxuICAgIHJvdyxcbiAgICBwbGF5ZXJCb2FyZCxcbiAgICBlbmVteUJvYXJkLFxuICAgIHBsYXllcixcbiAgICBlbmVteSxcbn0pID0+IHtcbiAgICAvLyBodW1hbiBwbGF5ZXIgYXR0YWNraW5nIGNvbXB1dGVyXG4gICAgYXR0YWNrRW5lbXlDZWxsKGNvbHVtbiwgcm93LCBlbmVteUJvYXJkLCBwbGF5ZXJCb2FyZCwgcGxheWVyLCBlbmVteSlcbiAgICAvLyBjb21wdXRlciBhdHRhY2tpbmcgaHVtYW5cbiAgICBjb25zdCB7IGVsZW1lbnRDb2x1bW4sIGVsZW1lbnRSb3cgfSA9IHBsYXllckJvYXJkLm1ha2VSYW5kb21Db29yZGluYXRlcygpXG4gICAgcmVuZGVyQXR0YWNrUDIocGxheWVyLCBlbmVteSwgZWxlbWVudENvbHVtbiwgZWxlbWVudFJvdywgcGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpXG5cbiAgICBjaGVja0lmR2FtZU92ZXIocGxheWVyQm9hcmQsIGVuZW15Qm9hcmQpXG59XG4iLCJpbXBvcnQgeyBhZGRMaXN0ZW5lcnNUb0VuZW15Qm9hcmQsIHJlbmRlclBsYXllclNoaXBzLHB1YlN1YiwgcmFuZG9taXplTGlzdGVuZXIsIGF0dGFja30gZnJvbSAnLi9kb20nXG5cbmltcG9ydCBjcmVhdGVHYW1lQm9hcmQgZnJvbSAnLi9nYW1lYm9hcmQvZ2FtZWJvYXJkJ1xuaW1wb3J0IGNyZWF0ZVNoaXAgZnJvbSAnLi9zaGlwL3NoaXAnXG5pbXBvcnQgY3JlYXRlUGxheWVyIGZyb20gJy4vcGxheWVyL3BsYXllcidcblxuY29uc3QgcGxheWVyQm9hcmQgPSBjcmVhdGVHYW1lQm9hcmQoKVxuY29uc3QgZW5lbXlCb2FyZCA9IGNyZWF0ZUdhbWVCb2FyZCgpXG5jb25zdCBwbGF5ZXIgPSBjcmVhdGVQbGF5ZXIoKVxuY29uc3QgY29tcHV0ZXIgPSBjcmVhdGVQbGF5ZXIoKVxuXG5jb25zdCByYW5kb21pemVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24ucmFuZG9taXplJylcblxucmFuZG9taXplQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHJhbmRvbWl6ZUxpc3RlbmVyKHBsYXllckJvYXJkKVxufSlcblxucmFuZG9taXplTGlzdGVuZXIocGxheWVyQm9hcmQpXG5cbmVuZW15Qm9hcmQucGxhY2VTaGlwKDAsIDAsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCg1KSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDMsIDQsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgzKSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDYsIDcsICdob3Jpem9udGFsJywgY3JlYXRlU2hpcCgyKSlcbmVuZW15Qm9hcmQucGxhY2VTaGlwKDksIDEsICd2ZXJ0aWNhbCcsIGNyZWF0ZVNoaXAoMykpXG5lbmVteUJvYXJkLnBsYWNlU2hpcCg1LCA5LCAnaG9yaXpvbnRhbCcsIGNyZWF0ZVNoaXAoNCkpXG5cbmNvbnN0IHBzID0gcHViU3ViKClcblxuYWRkTGlzdGVuZXJzVG9FbmVteUJvYXJkKHBsYXllckJvYXJkLCBlbmVteUJvYXJkLCBwbGF5ZXIsIGNvbXB1dGVyLCBwcylcblxucHMuc3Vic2NyaWJlKCdjbGljaycsIGF0dGFjaylcblxucmVuZGVyUGxheWVyU2hpcHMocGxheWVyQm9hcmQpIl0sIm5hbWVzIjpbImNyZWF0ZVNoaXAiLCJtb2R1bGUiLCJleHBvcnRzIiwiZW1wdHlDZWxsIiwiaGFzQmVlbkhpdCIsImlzU2hpcCIsIm9mZkxpbWl0cyIsImluaXRpYWxpemVCb2FyZCIsImdhbWVCb2FyZCIsIkFycmF5IiwiZmlsbCIsIm1hcCIsImNvbHVtbiIsInJvdyIsInNoaXBzIiwiZ2V0TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsInNoaXAiLCJPYmplY3QiLCJhc3NpZ24iLCJjcmVhdGVPZmZMaW1pdExvY2F0aW9uIiwidW5kZWZpbmVkIiwibG9jYXRpb24iLCJhZGRPZmZMaW1pdEFyZWFGb3JTaGlwcyIsImNoZWNrSWZMb2NhdGlvbklzQVNoaXBPck9mZkxpbWl0cyIsImRpcmVjdGlvbiIsInNoaXBMZW5ndGgiLCJpIiwicGxhY2VTaGlwIiwiZ2V0TGVuZ3RoIiwibGVuZ3RoIiwiY2hlY2tJZlJvd0Nvb3JkaW5hdGVJc1ZhbGlkIiwicG9zaXRpb24iLCJhZGRPZmZMaW1pdEFyZWFGb3JWZXJ0aWNhbGx5UG9zaXRpb25lZFNoaXAiLCJjaGVja0lmQ29sdW1uQ29vcmRpbmF0ZUlzVmFsaWQiLCJhZGRPZmZMaW1pdEFyZWFGb3JIb3Jpem9udGFsbHlQb3NpdGlvbmVkU2hpcCIsIm1ha2VSYW5kb21Db29yZGluYXRlcyIsInJhbmRvbURpcmVjdGlvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJhbmRvbUxvY2F0aW9uIiwiZmxhdHRlbmVkR2FtZUJvYXJkIiwiZmxhdCIsImZvckVhY2giLCJlbGVtZW50IiwiYXZhaWxhYmlsaXR5IiwiYXZhaWxhYmxlU3BhY2VzIiwiZWxlbWVudENvbHVtbiIsImVsZW1lbnRSb3ciLCJjbGVhckJvYXJkIiwiY2hlY2tJZk9mZkxpbWl0Wm9uZVdhc0NvcnJlY3RseUltcGxlbWVudGVkIiwiZmlsdGVyIiwicmVjZWl2ZUF0dGFjayIsImNoZWNrSWZBbGxTaGlwc0hhdmVTdW5rIiwiaGF2ZUFsbFNoaXBzU3VuayIsImoiLCJpc1N1bmsiLCJyYW5kb21seVBsYWNlU2hpcHMiLCJzaGlwRGV0YWlscyIsInJhbmRvbUNvbHVtbiIsInJhbmRvbVJvdyIsInB1c2giLCJuYW1lIiwiZ2V0TmFtZSIsImF0dGFjayIsImdldFN0YXR1cyIsImluY2x1ZGVzIiwiaGl0IiwicmFuZG9tUG9zIiwic3RhdHVzIiwiZXZlcnkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImF0dGFja0RpcmVjdGlvbiIsIndhc0hpdCIsImxhc3RIaXRQb3MiLCJmaXJzdEhpdFBvcyIsInNlY29uZEhpdFBvcyIsInN1cnJvdW5kaW5nUG9zIiwic2V0V2FzSGl0IiwidmFsdWUiLCJzdGF0IiwicG9zMSIsInBvczIiLCJyZWdpc3RlclN1cnJvdW5kaW5nUG9zIiwiYWlQbGF5IiwicmVwZWF0IiwicDEiLCJwMiIsInBsYXllckJvYXJkIiwiZW5lbXlCb2FyZCIsInBvcyIsInJlbmRlckF0dGFja1AyIiwibmV3UG9zIiwiYXR0YWNrVG93YXJkcyIsInBvcCIsImRpciIsImUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb25zb2xlIiwibG9nIiwiY2xhc3NMaXN0IiwiYWRkIiwiY2hlY2tJZkdhbWVPdmVyIiwicmVuZGVyUGxheWVyU2hpcHMiLCJwbGF5ZXJCb2FyZEFyZWEiLCJjZWxsIiwic2V0QXR0cmlidXRlIiwibW9kYWwiLCJtb2RhbFdpbm5lciIsInBsYXlBZ2FpbkJ1dHRvbiIsInN0eWxlIiwiZGlzcGxheSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWxvYWQiLCJ0ZXh0Q29udGVudCIsInJhbmRvbWl6ZUxpc3RlbmVyIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZSIsImNvbXB1dGVyIiwicHMiLCJzdWJzY3JpYmVycyIsInB1Ymxpc2giLCJldmVudE5hbWUiLCJkYXRhIiwiaXNBcnJheSIsImNhbGxiYWNrIiwic3Vic2NyaWJlIiwiaW5kZXgiLCJ1bnN1YnNjcmliZSIsInNwbGljZSIsInB1YlN1YiIsInBsYXllciIsImVuZW15IiwiZW5lbXlCb2FyZEFyZWEiLCJvbmNlIiwiYWRkTGlzdGVuZXJzVG9FbmVteUJvYXJkIiwiaGFuZGxlQXR0YWNrIiwicmVuZGVyQXR0YWNrcyIsImF0dGFja0VuZW15Q2VsbCJdLCJzb3VyY2VSb290IjoiIn0=